
ByggernNode2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a04  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000045c  20000000  00081a04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a4  2000045c  00081e60  0002045c  2**2
                  ALLOC
  3 .stack        00000400  20000500  00081f04  0002045c  2**0
                  ALLOC
  4 .heap         00000200  20000900  00082304  0002045c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020485  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009fc9  00000000  00000000  000204de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a21  00000000  00000000  0002a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000160d  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000278  00000000  00000000  0002d4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  0002d74d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000137f3  00000000  00000000  0002d965  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005e60  00000000  00000000  00041158  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054e62  00000000  00000000  00046fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000007fc  00000000  00000000  0009be1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 09 00 20 0d 04 08 00 09 04 08 00 09 04 08 00     ... ............
   80010:	09 04 08 00 09 04 08 00 09 04 08 00 00 00 00 00     ................
	...
   8002c:	09 04 08 00 09 04 08 00 00 00 00 00 09 04 08 00     ................
   8003c:	e5 0d 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   8004c:	ed 07 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   8005c:	09 04 08 00 d5 0e 08 00 09 04 08 00 00 00 00 00     ................
   8006c:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
	...
   80084:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   80094:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800a4:	00 00 00 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800b4:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800c4:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800d4:	09 04 08 00 09 04 08 00 09 04 08 00 09 04 08 00     ................
   800e4:	09 04 08 00 09 04 08 00 71 03 08 00 09 04 08 00     ........q.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000045c 	.word	0x2000045c
   80110:	00000000 	.word	0x00000000
   80114:	00081a04 	.word	0x00081a04

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081a04 	.word	0x00081a04
   80154:	20000460 	.word	0x20000460
   80158:	00081a04 	.word	0x00081a04
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
   8017e:	6913      	ldr	r3, [r2, #16]
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
   80194:	665c      	str	r4, [r3, #100]	; 0x64
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   801ac:	6150      	str	r0, [r2, #20]
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
   801b6:	46a1      	mov	r9, r4
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
   80238:	2001      	movs	r0, #1
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
   80250:	b508      	push	{r3, lr}
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_send>:
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d036      	beq.n	802e2 <can_send+0x82>
   80274:	8803      	ldrh	r3, [r0, #0]
   80276:	4a1c      	ldr	r2, [pc, #112]	; (802e8 <can_send+0x88>)
   80278:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   8027c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80280:	014b      	lsls	r3, r1, #5
   80282:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80286:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8028a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
   8028e:	7883      	ldrb	r3, [r0, #2]
   80290:	2b07      	cmp	r3, #7
   80292:	bf84      	itt	hi
   80294:	2307      	movhi	r3, #7
   80296:	7083      	strbhi	r3, [r0, #2]
   80298:	7982      	ldrb	r2, [r0, #6]
   8029a:	7943      	ldrb	r3, [r0, #5]
   8029c:	041b      	lsls	r3, r3, #16
   8029e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802a2:	78c2      	ldrb	r2, [r0, #3]
   802a4:	4313      	orrs	r3, r2
   802a6:	7902      	ldrb	r2, [r0, #4]
   802a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802ac:	0149      	lsls	r1, r1, #5
   802ae:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   802b2:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   802b6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
   802ba:	7a82      	ldrb	r2, [r0, #10]
   802bc:	7a43      	ldrb	r3, [r0, #9]
   802be:	041b      	lsls	r3, r3, #16
   802c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   802c4:	79c2      	ldrb	r2, [r0, #7]
   802c6:	4313      	orrs	r3, r2
   802c8:	7a02      	ldrb	r2, [r0, #8]
   802ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   802ce:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
   802d2:	7883      	ldrb	r3, [r0, #2]
   802d4:	041b      	lsls	r3, r3, #16
   802d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802da:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   802de:	2000      	movs	r0, #0
   802e0:	4770      	bx	lr
   802e2:	2001      	movs	r0, #1
   802e4:	4770      	bx	lr
   802e6:	bf00      	nop
   802e8:	1ffc0000 	.word	0x1ffc0000

000802ec <can_receive>:
   802ec:	014b      	lsls	r3, r1, #5
   802ee:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802f2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802fa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802fe:	d033      	beq.n	80368 <can_receive+0x7c>
   80300:	b430      	push	{r4, r5}
   80302:	014b      	lsls	r3, r1, #5
   80304:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80308:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8030c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   80310:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
   80314:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80318:	f3c5 458a 	ubfx	r5, r5, #18, #11
   8031c:	8005      	strh	r5, [r0, #0]
   8031e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80322:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80326:	7083      	strb	r3, [r0, #2]
   80328:	461d      	mov	r5, r3
   8032a:	b15b      	cbz	r3, 80344 <can_receive+0x58>
   8032c:	3003      	adds	r0, #3
   8032e:	2300      	movs	r3, #0
   80330:	2b03      	cmp	r3, #3
   80332:	bfd9      	ittee	le
   80334:	7002      	strble	r2, [r0, #0]
   80336:	0a12      	lsrle	r2, r2, #8
   80338:	7004      	strbgt	r4, [r0, #0]
   8033a:	0a24      	lsrgt	r4, r4, #8
   8033c:	3301      	adds	r3, #1
   8033e:	3001      	adds	r0, #1
   80340:	42ab      	cmp	r3, r5
   80342:	d1f5      	bne.n	80330 <can_receive+0x44>
   80344:	4b09      	ldr	r3, [pc, #36]	; (8036c <can_receive+0x80>)
   80346:	f101 0210 	add.w	r2, r1, #16
   8034a:	0152      	lsls	r2, r2, #5
   8034c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80350:	5098      	str	r0, [r3, r2]
   80352:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80356:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8035a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8035e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   80362:	2000      	movs	r0, #0
   80364:	bc30      	pop	{r4, r5}
   80366:	4770      	bx	lr
   80368:	2001      	movs	r0, #1
   8036a:	4770      	bx	lr
   8036c:	400b4000 	.word	0x400b4000

00080370 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80370:	b530      	push	{r4, r5, lr}
   80372:	b085      	sub	sp, #20
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80374:	4b1c      	ldr	r3, [pc, #112]	; (803e8 <CAN0_Handler+0x78>)
   80376:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80378:	f014 0f06 	tst.w	r4, #6
   8037c:	d01d      	beq.n	803ba <CAN0_Handler+0x4a>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8037e:	f014 0f02 	tst.w	r4, #2
   80382:	d127      	bne.n	803d4 <CAN0_Handler+0x64>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80384:	f014 0f04 	tst.w	r4, #4
   80388:	d029      	beq.n	803de <CAN0_Handler+0x6e>
		
		{
			can_receive(&message, 2);
   8038a:	2102      	movs	r1, #2
   8038c:	a801      	add	r0, sp, #4
   8038e:	4b17      	ldr	r3, [pc, #92]	; (803ec <CAN0_Handler+0x7c>)
   80390:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80392:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80396:	b11a      	cbz	r2, 803a0 <CAN0_Handler+0x30>
   80398:	2300      	movs	r3, #0
   8039a:	3301      	adds	r3, #1
   8039c:	4293      	cmp	r3, r2
   8039e:	d1fc      	bne.n	8039a <CAN0_Handler+0x2a>
		{
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
		
		if (message.id=1){
   803a0:	ad04      	add	r5, sp, #16
   803a2:	2301      	movs	r3, #1
   803a4:	f825 3d0c 	strh.w	r3, [r5, #-12]!
			pwm_update_duty_cycle(&message);
   803a8:	4628      	mov	r0, r5
   803aa:	4b11      	ldr	r3, [pc, #68]	; (803f0 <CAN0_Handler+0x80>)
   803ac:	4798      	blx	r3
			//motor_dac_send(&message);
			motor_solenoid(&message);
   803ae:	4628      	mov	r0, r5
   803b0:	4b10      	ldr	r3, [pc, #64]	; (803f4 <CAN0_Handler+0x84>)
   803b2:	4798      	blx	r3
			PID_update_refPos(&message);
   803b4:	4628      	mov	r0, r5
   803b6:	4b10      	ldr	r3, [pc, #64]	; (803f8 <CAN0_Handler+0x88>)
   803b8:	4798      	blx	r3
		}
	}

	
	if(can_sr & CAN_SR_MB0)
   803ba:	f014 0f01 	tst.w	r4, #1
   803be:	d002      	beq.n	803c6 <CAN0_Handler+0x56>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803c0:	2201      	movs	r2, #1
   803c2:	4b09      	ldr	r3, [pc, #36]	; (803e8 <CAN0_Handler+0x78>)
   803c4:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   803c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803ca:	4b0c      	ldr	r3, [pc, #48]	; (803fc <CAN0_Handler+0x8c>)
   803cc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);

}
   803d0:	b005      	add	sp, #20
   803d2:	bd30      	pop	{r4, r5, pc}
			can_receive(&message, 1);
   803d4:	2101      	movs	r1, #1
   803d6:	a801      	add	r0, sp, #4
   803d8:	4b04      	ldr	r3, [pc, #16]	; (803ec <CAN0_Handler+0x7c>)
   803da:	4798      	blx	r3
   803dc:	e7d9      	b.n	80392 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   803de:	4808      	ldr	r0, [pc, #32]	; (80400 <CAN0_Handler+0x90>)
   803e0:	4b08      	ldr	r3, [pc, #32]	; (80404 <CAN0_Handler+0x94>)
   803e2:	4798      	blx	r3
   803e4:	e7d5      	b.n	80392 <CAN0_Handler+0x22>
   803e6:	bf00      	nop
   803e8:	400b4000 	.word	0x400b4000
   803ec:	000802ed 	.word	0x000802ed
   803f0:	00080979 	.word	0x00080979
   803f4:	0008063d 	.word	0x0008063d
   803f8:	000808e1 	.word	0x000808e1
   803fc:	e000e100 	.word	0xe000e100
   80400:	000818d0 	.word	0x000818d0
   80404:	00080dc1 	.word	0x00080dc1

00080408 <Dummy_Handler>:
   80408:	e7fe      	b.n	80408 <Dummy_Handler>
	...

0008040c <Reset_Handler>:
   8040c:	b508      	push	{r3, lr}
   8040e:	4b18      	ldr	r3, [pc, #96]	; (80470 <Reset_Handler+0x64>)
   80410:	4a18      	ldr	r2, [pc, #96]	; (80474 <Reset_Handler+0x68>)
   80412:	429a      	cmp	r2, r3
   80414:	d010      	beq.n	80438 <Reset_Handler+0x2c>
   80416:	4b18      	ldr	r3, [pc, #96]	; (80478 <Reset_Handler+0x6c>)
   80418:	4a15      	ldr	r2, [pc, #84]	; (80470 <Reset_Handler+0x64>)
   8041a:	429a      	cmp	r2, r3
   8041c:	d20c      	bcs.n	80438 <Reset_Handler+0x2c>
   8041e:	3b01      	subs	r3, #1
   80420:	1a9b      	subs	r3, r3, r2
   80422:	f023 0303 	bic.w	r3, r3, #3
   80426:	3304      	adds	r3, #4
   80428:	4413      	add	r3, r2
   8042a:	4912      	ldr	r1, [pc, #72]	; (80474 <Reset_Handler+0x68>)
   8042c:	f851 0b04 	ldr.w	r0, [r1], #4
   80430:	f842 0b04 	str.w	r0, [r2], #4
   80434:	429a      	cmp	r2, r3
   80436:	d1f9      	bne.n	8042c <Reset_Handler+0x20>
   80438:	4b10      	ldr	r3, [pc, #64]	; (8047c <Reset_Handler+0x70>)
   8043a:	4a11      	ldr	r2, [pc, #68]	; (80480 <Reset_Handler+0x74>)
   8043c:	429a      	cmp	r2, r3
   8043e:	d20a      	bcs.n	80456 <Reset_Handler+0x4a>
   80440:	3b01      	subs	r3, #1
   80442:	1a9b      	subs	r3, r3, r2
   80444:	f023 0303 	bic.w	r3, r3, #3
   80448:	3304      	adds	r3, #4
   8044a:	4413      	add	r3, r2
   8044c:	2100      	movs	r1, #0
   8044e:	f842 1b04 	str.w	r1, [r2], #4
   80452:	4293      	cmp	r3, r2
   80454:	d1fb      	bne.n	8044e <Reset_Handler+0x42>
   80456:	4b0b      	ldr	r3, [pc, #44]	; (80484 <Reset_Handler+0x78>)
   80458:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8045c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80460:	4a09      	ldr	r2, [pc, #36]	; (80488 <Reset_Handler+0x7c>)
   80462:	6093      	str	r3, [r2, #8]
   80464:	4b09      	ldr	r3, [pc, #36]	; (8048c <Reset_Handler+0x80>)
   80466:	4798      	blx	r3
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <Reset_Handler+0x84>)
   8046a:	4798      	blx	r3
   8046c:	e7fe      	b.n	8046c <Reset_Handler+0x60>
   8046e:	bf00      	nop
   80470:	20000000 	.word	0x20000000
   80474:	00081a04 	.word	0x00081a04
   80478:	2000045c 	.word	0x2000045c
   8047c:	20000500 	.word	0x20000500
   80480:	2000045c 	.word	0x2000045c
   80484:	00080000 	.word	0x00080000
   80488:	e000ed00 	.word	0xe000ed00
   8048c:	00081761 	.word	0x00081761
   80490:	00080a49 	.word	0x00080a49

00080494 <SystemInit>:
   80494:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80498:	4a20      	ldr	r2, [pc, #128]	; (8051c <SystemInit+0x88>)
   8049a:	6013      	str	r3, [r2, #0]
   8049c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   804a0:	6013      	str	r3, [r2, #0]
   804a2:	4b1f      	ldr	r3, [pc, #124]	; (80520 <SystemInit+0x8c>)
   804a4:	6a1b      	ldr	r3, [r3, #32]
   804a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804aa:	d107      	bne.n	804bc <SystemInit+0x28>
   804ac:	4a1d      	ldr	r2, [pc, #116]	; (80524 <SystemInit+0x90>)
   804ae:	4b1c      	ldr	r3, [pc, #112]	; (80520 <SystemInit+0x8c>)
   804b0:	621a      	str	r2, [r3, #32]
   804b2:	461a      	mov	r2, r3
   804b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804b6:	f013 0f01 	tst.w	r3, #1
   804ba:	d0fb      	beq.n	804b4 <SystemInit+0x20>
   804bc:	4a1a      	ldr	r2, [pc, #104]	; (80528 <SystemInit+0x94>)
   804be:	4b18      	ldr	r3, [pc, #96]	; (80520 <SystemInit+0x8c>)
   804c0:	621a      	str	r2, [r3, #32]
   804c2:	461a      	mov	r2, r3
   804c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   804ca:	d0fb      	beq.n	804c4 <SystemInit+0x30>
   804cc:	4a14      	ldr	r2, [pc, #80]	; (80520 <SystemInit+0x8c>)
   804ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
   804d0:	f023 0303 	bic.w	r3, r3, #3
   804d4:	f043 0301 	orr.w	r3, r3, #1
   804d8:	6313      	str	r3, [r2, #48]	; 0x30
   804da:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804dc:	f013 0f08 	tst.w	r3, #8
   804e0:	d0fb      	beq.n	804da <SystemInit+0x46>
   804e2:	4a12      	ldr	r2, [pc, #72]	; (8052c <SystemInit+0x98>)
   804e4:	4b0e      	ldr	r3, [pc, #56]	; (80520 <SystemInit+0x8c>)
   804e6:	629a      	str	r2, [r3, #40]	; 0x28
   804e8:	461a      	mov	r2, r3
   804ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804ec:	f013 0f02 	tst.w	r3, #2
   804f0:	d0fb      	beq.n	804ea <SystemInit+0x56>
   804f2:	2211      	movs	r2, #17
   804f4:	4b0a      	ldr	r3, [pc, #40]	; (80520 <SystemInit+0x8c>)
   804f6:	631a      	str	r2, [r3, #48]	; 0x30
   804f8:	461a      	mov	r2, r3
   804fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   804fc:	f013 0f08 	tst.w	r3, #8
   80500:	d0fb      	beq.n	804fa <SystemInit+0x66>
   80502:	2212      	movs	r2, #18
   80504:	4b06      	ldr	r3, [pc, #24]	; (80520 <SystemInit+0x8c>)
   80506:	631a      	str	r2, [r3, #48]	; 0x30
   80508:	461a      	mov	r2, r3
   8050a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8050c:	f013 0f08 	tst.w	r3, #8
   80510:	d0fb      	beq.n	8050a <SystemInit+0x76>
   80512:	4a07      	ldr	r2, [pc, #28]	; (80530 <SystemInit+0x9c>)
   80514:	4b07      	ldr	r3, [pc, #28]	; (80534 <SystemInit+0xa0>)
   80516:	601a      	str	r2, [r3, #0]
   80518:	4770      	bx	lr
   8051a:	bf00      	nop
   8051c:	400e0a00 	.word	0x400e0a00
   80520:	400e0600 	.word	0x400e0600
   80524:	00370809 	.word	0x00370809
   80528:	01370809 	.word	0x01370809
   8052c:	200d3f01 	.word	0x200d3f01
   80530:	0501bd00 	.word	0x0501bd00
   80534:	20000000 	.word	0x20000000

00080538 <motor_init>:
#include "printf-stdarg.h"
#include "DRIVER_PID.h"



void motor_init(void){
   80538:	b410      	push	{r4}
	
	//enable PIO registers
	PIOB->PIO_PER	|= PIO_PER_P27; //pwm13
   8053a:	4930      	ldr	r1, [pc, #192]	; (805fc <motor_init+0xc4>)
   8053c:	680b      	ldr	r3, [r1, #0]
   8053e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80542:	600b      	str	r3, [r1, #0]
	//MJ1
	PIOD->PIO_PER	|= PIO_PER_P0; //!OE
   80544:	4b2e      	ldr	r3, [pc, #184]	; (80600 <motor_init+0xc8>)
   80546:	681a      	ldr	r2, [r3, #0]
   80548:	f042 0201 	orr.w	r2, r2, #1
   8054c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_PER	|= PIO_PER_P1; //!RST
   8054e:	681a      	ldr	r2, [r3, #0]
   80550:	f042 0202 	orr.w	r2, r2, #2
   80554:	601a      	str	r2, [r3, #0]
	PIOD->PIO_PER	|= PIO_PER_P2; //SEL
   80556:	681a      	ldr	r2, [r3, #0]
   80558:	f042 0204 	orr.w	r2, r2, #4
   8055c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_PER	|= PIO_PER_P9; //EN
   8055e:	681a      	ldr	r2, [r3, #0]
   80560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80564:	601a      	str	r2, [r3, #0]
	PIOD->PIO_PER	|= PIO_PER_P10;//DIR
   80566:	681a      	ldr	r2, [r3, #0]
   80568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   8056c:	601a      	str	r2, [r3, #0]
	//MJ2
	PIOC->PIO_PER	|= PIO_PER_P1; //D0
   8056e:	4a25      	ldr	r2, [pc, #148]	; (80604 <motor_init+0xcc>)
   80570:	6810      	ldr	r0, [r2, #0]
   80572:	f040 0002 	orr.w	r0, r0, #2
   80576:	6010      	str	r0, [r2, #0]
	PIOC->PIO_PER	|= PIO_PER_P2; //D1
   80578:	6810      	ldr	r0, [r2, #0]
   8057a:	f040 0004 	orr.w	r0, r0, #4
   8057e:	6010      	str	r0, [r2, #0]
	PIOC->PIO_PER	|= PIO_PER_P3; //D2
   80580:	6810      	ldr	r0, [r2, #0]
   80582:	f040 0008 	orr.w	r0, r0, #8
   80586:	6010      	str	r0, [r2, #0]
	PIOC->PIO_PER	|= PIO_PER_P4; //D3
   80588:	6810      	ldr	r0, [r2, #0]
   8058a:	f040 0010 	orr.w	r0, r0, #16
   8058e:	6010      	str	r0, [r2, #0]
	PIOC->PIO_PER	|= PIO_PER_P5; //D4
   80590:	6810      	ldr	r0, [r2, #0]
   80592:	f040 0020 	orr.w	r0, r0, #32
   80596:	6010      	str	r0, [r2, #0]
	PIOC->PIO_PER	|= PIO_PER_P6; //D5
   80598:	6810      	ldr	r0, [r2, #0]
   8059a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   8059e:	6010      	str	r0, [r2, #0]
	PIOC->PIO_PER	|= PIO_PER_P7; //D6
   805a0:	6810      	ldr	r0, [r2, #0]
   805a2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   805a6:	6010      	str	r0, [r2, #0]
	PIOC->PIO_PER	|= PIO_PER_P8; //D7
   805a8:	6810      	ldr	r0, [r2, #0]
   805aa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   805ae:	6010      	str	r0, [r2, #0]
	
	//Enable clock to PIOC peripheral, in order to be able to read pin input 
	PMC->PMC_PCER0	|= (1 << 13);
   805b0:	4c15      	ldr	r4, [pc, #84]	; (80608 <motor_init+0xd0>)
   805b2:	6920      	ldr	r0, [r4, #16]
   805b4:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
   805b8:	6120      	str	r0, [r4, #16]
	
	//enable input of MJ2 pins
	PIOC->PIO_ODR	|= (PIO_ODR_P1 | PIO_ODR_P2 | PIO_ODR_P3 | PIO_ODR_P4 | PIO_ODR_P5 | PIO_ODR_P6 | PIO_ODR_P7 | PIO_ODR_P8);
   805ba:	6950      	ldr	r0, [r2, #20]
   805bc:	f440 70ff 	orr.w	r0, r0, #510	; 0x1fe
   805c0:	6150      	str	r0, [r2, #20]
	
	//enable output of MJ1 pins
	PIOB->PIO_OER	|= PIO_OER_P27;
   805c2:	690a      	ldr	r2, [r1, #16]
   805c4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   805c8:	610a      	str	r2, [r1, #16]
	PIOD->PIO_OER	|= (PIO_OER_P0 | PIO_OER_P1 | PIO_OER_P2 | PIO_OER_P9 | PIO_OER_P10);
   805ca:	691a      	ldr	r2, [r3, #16]
   805cc:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
   805d0:	f042 0207 	orr.w	r2, r2, #7
   805d4:	611a      	str	r2, [r3, #16]
	
	PIOD->PIO_SODR	|= PIO_SODR_P9; //set EN to enable motor
   805d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   805d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   805dc:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_SODR	|= PIO_SODR_P10; //set direction. USE CODR for the other direction
   805de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   805e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   805e4:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR	|= PIO_SODR_P0;	//Set !OE high to disable output of encoder
   805e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   805e8:	f042 0201 	orr.w	r2, r2, #1
   805ec:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_SODR	|= PIO_SODR_P1;	//!RST should be high
   805ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   805f0:	f042 0202 	orr.w	r2, r2, #2
   805f4:	631a      	str	r2, [r3, #48]	; 0x30
	
}
   805f6:	bc10      	pop	{r4}
   805f8:	4770      	bx	lr
   805fa:	bf00      	nop
   805fc:	400e1000 	.word	0x400e1000
   80600:	400e1400 	.word	0x400e1400
   80604:	400e1200 	.word	0x400e1200
   80608:	400e0600 	.word	0x400e0600

0008060c <motor_dac_init>:
	return result;
}

void motor_dac_init(void){
	
	REG_PMC_PCER1	|= PMC_PCER1_PID38; //enable clock
   8060c:	4a08      	ldr	r2, [pc, #32]	; (80630 <motor_dac_init+0x24>)
   8060e:	6813      	ldr	r3, [r2, #0]
   80610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80614:	6013      	str	r3, [r2, #0]
	REG_DACC_MR		&= ~DACC_MR_TRGEN_DIS; //free-running mode
   80616:	4b07      	ldr	r3, [pc, #28]	; (80634 <motor_dac_init+0x28>)
   80618:	681a      	ldr	r2, [r3, #0]
   8061a:	601a      	str	r2, [r3, #0]
	REG_DACC_MR		|= DACC_MR_USER_SEL_CHANNEL1; //channel 1
   8061c:	681a      	ldr	r2, [r3, #0]
   8061e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80622:	601a      	str	r2, [r3, #0]
	REG_DACC_CHER	|= DACC_CHER_CH1;
   80624:	4a04      	ldr	r2, [pc, #16]	; (80638 <motor_dac_init+0x2c>)
   80626:	6813      	ldr	r3, [r2, #0]
   80628:	f043 0302 	orr.w	r3, r3, #2
   8062c:	6013      	str	r3, [r2, #0]
   8062e:	4770      	bx	lr
   80630:	400e0700 	.word	0x400e0700
   80634:	400c8004 	.word	0x400c8004
   80638:	400c8010 	.word	0x400c8010

0008063c <motor_solenoid>:
	}
	REG_DACC_CDR = temp;
}

void motor_solenoid(CAN_MESSAGE *msg){
	if(msg->data[2]){
   8063c:	7943      	ldrb	r3, [r0, #5]
   8063e:	b92b      	cbnz	r3, 8064c <motor_solenoid+0x10>
	PIOB->PIO_CODR |= PIO_CODR_P27;//pin 13 on shield. active low
	}
	else{
	PIOB->PIO_SODR |= PIO_SODR_P27;		
   80640:	4a05      	ldr	r2, [pc, #20]	; (80658 <motor_solenoid+0x1c>)
   80642:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80644:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80648:	6313      	str	r3, [r2, #48]	; 0x30
   8064a:	4770      	bx	lr
	PIOB->PIO_CODR |= PIO_CODR_P27;//pin 13 on shield. active low
   8064c:	4a02      	ldr	r2, [pc, #8]	; (80658 <motor_solenoid+0x1c>)
   8064e:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80650:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80654:	6353      	str	r3, [r2, #52]	; 0x34
   80656:	4770      	bx	lr
   80658:	400e1000 	.word	0x400e1000

0008065c <motor_encoder_tglreset>:
	}
}

void motor_encoder_tglreset(void){
	PIOD->PIO_CODR |= PIO_CODR_P1;	
   8065c:	4a07      	ldr	r2, [pc, #28]	; (8067c <motor_encoder_tglreset+0x20>)
   8065e:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80660:	f043 0302 	orr.w	r3, r3, #2
   80664:	6353      	str	r3, [r2, #52]	; 0x34
   80666:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
	for(int i=0; i<2000; i++);		
   8066a:	3b01      	subs	r3, #1
   8066c:	d1fd      	bne.n	8066a <motor_encoder_tglreset+0xe>
	PIOD->PIO_SODR |= PIO_SODR_P1;
   8066e:	4a03      	ldr	r2, [pc, #12]	; (8067c <motor_encoder_tglreset+0x20>)
   80670:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80672:	f043 0302 	orr.w	r3, r3, #2
   80676:	6313      	str	r3, [r2, #48]	; 0x30
   80678:	4770      	bx	lr
   8067a:	bf00      	nop
   8067c:	400e1400 	.word	0x400e1400

00080680 <motor_read_encoder>:
int16_t motor_read_encoder(int doReset){
   80680:	b538      	push	{r3, r4, r5, lr}
	PIOD->PIO_CODR	|= PIO_CODR_P0;	//Set !OE low to enable output of encoder
   80682:	4b14      	ldr	r3, [pc, #80]	; (806d4 <motor_read_encoder+0x54>)
   80684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   80686:	f042 0201 	orr.w	r2, r2, #1
   8068a:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR	|= PIO_CODR_P2;	//Set SEL low to get the high byte out
   8068c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   8068e:	f042 0204 	orr.w	r2, r2, #4
   80692:	635a      	str	r2, [r3, #52]	; 0x34
   80694:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
	for(int i =0; i<2000; i++);		//waiting..
   80698:	3b01      	subs	r3, #1
   8069a:	d1fd      	bne.n	80698 <motor_read_encoder+0x18>
	int8_t MSB = PIOC->PIO_PDSR;
   8069c:	4b0e      	ldr	r3, [pc, #56]	; (806d8 <motor_read_encoder+0x58>)
   8069e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   806a0:	b26d      	sxtb	r5, r5
	PIOD->PIO_SODR	|= PIO_SODR_P2;	//Set SEL high to get the low byte out
   806a2:	4a0c      	ldr	r2, [pc, #48]	; (806d4 <motor_read_encoder+0x54>)
   806a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806a6:	f043 0304 	orr.w	r3, r3, #4
   806aa:	6313      	str	r3, [r2, #48]	; 0x30
   806ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
	for(int i =0; i<2000; i++);		//waiting..
   806b0:	3b01      	subs	r3, #1
   806b2:	d1fd      	bne.n	806b0 <motor_read_encoder+0x30>
	int8_t LSB = PIOC->PIO_PDSR;
   806b4:	4b08      	ldr	r3, [pc, #32]	; (806d8 <motor_read_encoder+0x58>)
   806b6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   806b8:	b264      	sxtb	r4, r4
	if(doReset){
   806ba:	b940      	cbnz	r0, 806ce <motor_read_encoder+0x4e>
	PIOD->PIO_SODR	|= PIO_SODR_P0;	//Set !OE high to disable output of encoder
   806bc:	4a05      	ldr	r2, [pc, #20]	; (806d4 <motor_read_encoder+0x54>)
   806be:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806c0:	f043 0301 	orr.w	r3, r3, #1
   806c4:	6313      	str	r3, [r2, #48]	; 0x30
	int16_t result = (short)(((MSB) & 0xFF) << 8 | (LSB) & 0xFF); //merge MSB and LSB
   806c6:	b2e0      	uxtb	r0, r4
}
   806c8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   806cc:	bd38      	pop	{r3, r4, r5, pc}
		motor_encoder_tglreset();
   806ce:	4b03      	ldr	r3, [pc, #12]	; (806dc <motor_read_encoder+0x5c>)
   806d0:	4798      	blx	r3
   806d2:	e7f3      	b.n	806bc <motor_read_encoder+0x3c>
   806d4:	400e1400 	.word	0x400e1400
   806d8:	400e1200 	.word	0x400e1200
   806dc:	0008065d 	.word	0x0008065d

000806e0 <motor_run>:
}

void motor_run(int dirLeft, int speed){
	if(dirLeft){
   806e0:	b170      	cbz	r0, 80700 <motor_run+0x20>
		PIOD->PIO_SODR |= PIO_SODR_P10; //DIR left
   806e2:	4a0a      	ldr	r2, [pc, #40]	; (8070c <motor_run+0x2c>)
   806e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   806ea:	6313      	str	r3, [r2, #48]	; 0x30
   806ec:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
		speed = threshold;
	}
	else if( speed < 0){
		speed = 0;
	}
	REG_DACC_CDR=speed;
   806f0:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   806f4:	bfa8      	it	ge
   806f6:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
   806fa:	4b05      	ldr	r3, [pc, #20]	; (80710 <motor_run+0x30>)
   806fc:	6019      	str	r1, [r3, #0]
   806fe:	4770      	bx	lr
		PIOD->PIO_CODR |= PIO_CODR_P10; //DIR right
   80700:	4a02      	ldr	r2, [pc, #8]	; (8070c <motor_run+0x2c>)
   80702:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80708:	6353      	str	r3, [r2, #52]	; 0x34
   8070a:	e7ef      	b.n	806ec <motor_run+0xc>
   8070c:	400e1400 	.word	0x400e1400
   80710:	400c8020 	.word	0x400c8020

00080714 <motor_stop>:
	motor_encoder_tglreset();
	
	printf("Calibration done, Position %d \n\r", motor_read_encoder(0));
}

void motor_stop(void){
   80714:	b508      	push	{r3, lr}
	motor_run(0,0);
   80716:	2100      	movs	r1, #0
   80718:	4608      	mov	r0, r1
   8071a:	4b01      	ldr	r3, [pc, #4]	; (80720 <motor_stop+0xc>)
   8071c:	4798      	blx	r3
   8071e:	bd08      	pop	{r3, pc}
   80720:	000806e1 	.word	0x000806e1

00080724 <motor_calibrate>:
void motor_calibrate(void){
   80724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int pos = motor_read_encoder(0);
   80728:	2000      	movs	r0, #0
   8072a:	4b14      	ldr	r3, [pc, #80]	; (8077c <motor_calibrate+0x58>)
   8072c:	4798      	blx	r3
   8072e:	4680      	mov	r8, r0
			motor_run(0, 800);
   80730:	2500      	movs	r5, #0
   80732:	4f13      	ldr	r7, [pc, #76]	; (80780 <motor_calibrate+0x5c>)
		pos = motor_read_encoder(0);
   80734:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8077c <motor_calibrate+0x58>
void motor_calibrate(void){
   80738:	4c12      	ldr	r4, [pc, #72]	; (80784 <motor_calibrate+0x60>)
			motor_run(0, 800);
   8073a:	f44f 7648 	mov.w	r6, #800	; 0x320
   8073e:	4631      	mov	r1, r6
   80740:	4628      	mov	r0, r5
   80742:	47b8      	blx	r7
		for(int i = 0; i < 100000; i++){
   80744:	3c01      	subs	r4, #1
   80746:	d1fa      	bne.n	8073e <motor_calibrate+0x1a>
		pos = motor_read_encoder(0);
   80748:	4628      	mov	r0, r5
   8074a:	47c8      	blx	r9
   8074c:	4604      	mov	r4, r0
		printf("prevPos: %d, pos: %d \n\r", prevPos, pos);
   8074e:	4602      	mov	r2, r0
   80750:	4641      	mov	r1, r8
   80752:	480d      	ldr	r0, [pc, #52]	; (80788 <motor_calibrate+0x64>)
   80754:	4b0d      	ldr	r3, [pc, #52]	; (8078c <motor_calibrate+0x68>)
   80756:	4798      	blx	r3
	while(prevPos != pos){
   80758:	4544      	cmp	r4, r8
   8075a:	d001      	beq.n	80760 <motor_calibrate+0x3c>
		pos = motor_read_encoder(0);
   8075c:	46a0      	mov	r8, r4
   8075e:	e7eb      	b.n	80738 <motor_calibrate+0x14>
	motor_stop();
   80760:	4b0b      	ldr	r3, [pc, #44]	; (80790 <motor_calibrate+0x6c>)
   80762:	4798      	blx	r3
	motor_encoder_tglreset();
   80764:	4b0b      	ldr	r3, [pc, #44]	; (80794 <motor_calibrate+0x70>)
   80766:	4798      	blx	r3
	printf("Calibration done, Position %d \n\r", motor_read_encoder(0));
   80768:	2000      	movs	r0, #0
   8076a:	4b04      	ldr	r3, [pc, #16]	; (8077c <motor_calibrate+0x58>)
   8076c:	4798      	blx	r3
   8076e:	4601      	mov	r1, r0
   80770:	4809      	ldr	r0, [pc, #36]	; (80798 <motor_calibrate+0x74>)
   80772:	4b06      	ldr	r3, [pc, #24]	; (8078c <motor_calibrate+0x68>)
   80774:	4798      	blx	r3
   80776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8077a:	bf00      	nop
   8077c:	00080681 	.word	0x00080681
   80780:	000806e1 	.word	0x000806e1
   80784:	000186a0 	.word	0x000186a0
   80788:	000818fc 	.word	0x000818fc
   8078c:	00080dc1 	.word	0x00080dc1
   80790:	00080715 	.word	0x00080715
   80794:	0008065d 	.word	0x0008065d
   80798:	00081914 	.word	0x00081914

0008079c <PID_rtt_init>:
double dt = 0.010;
double kp = 1;
double ki = 0.5;
double kd = 0.01;

void PID_rtt_init(void){
   8079c:	b510      	push	{r4, lr}
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8079e:	2208      	movs	r2, #8
   807a0:	4b0c      	ldr	r3, [pc, #48]	; (807d4 <PID_rtt_init+0x38>)
   807a2:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(RTT_IRQn); // Enable RTT interrupts in NVIC
	uint8_t mseconds = 1000*dt;
   807a4:	2200      	movs	r2, #0
   807a6:	4b0c      	ldr	r3, [pc, #48]	; (807d8 <PID_rtt_init+0x3c>)
   807a8:	490c      	ldr	r1, [pc, #48]	; (807dc <PID_rtt_init+0x40>)
   807aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   807ae:	4c0c      	ldr	r4, [pc, #48]	; (807e0 <PID_rtt_init+0x44>)
   807b0:	47a0      	blx	r4
   807b2:	4b0c      	ldr	r3, [pc, #48]	; (807e4 <PID_rtt_init+0x48>)
   807b4:	4798      	blx	r3
	uint32_t prescaler = mseconds * 33; //not fully accurate, but good enough.
   807b6:	b2c0      	uxtb	r0, r0
   807b8:	eb00 1040 	add.w	r0, r0, r0, lsl #5
	REG_RTT_MR = 0;
   807bc:	4b0a      	ldr	r3, [pc, #40]	; (807e8 <PID_rtt_init+0x4c>)
   807be:	2200      	movs	r2, #0
   807c0:	601a      	str	r2, [r3, #0]
	REG_RTT_MR |= (prescaler << RTT_MR_RTPRES_Pos);
   807c2:	681a      	ldr	r2, [r3, #0]
   807c4:	4310      	orrs	r0, r2
   807c6:	6018      	str	r0, [r3, #0]
	REG_RTT_MR |= RTT_MR_RTTINCIEN;
   807c8:	681a      	ldr	r2, [r3, #0]
   807ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   807ce:	601a      	str	r2, [r3, #0]
   807d0:	bd10      	pop	{r4, pc}
   807d2:	bf00      	nop
   807d4:	e000e100 	.word	0xe000e100
   807d8:	408f4000 	.word	0x408f4000
   807dc:	20000008 	.word	0x20000008
   807e0:	000812ad 	.word	0x000812ad
   807e4:	00081721 	.word	0x00081721
   807e8:	400e1a30 	.word	0x400e1a30

000807ec <RTT_Handler>:
};



void RTT_Handler(void){
   807ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807f0:	b085      	sub	sp, #20
	//this interupt handler can be used to control the regulator. rembemer to call pid_rtt_init();
	int pos = motor_read_encoder(0);
   807f2:	2000      	movs	r0, #0
   807f4:	4b2f      	ldr	r3, [pc, #188]	; (808b4 <RTT_Handler+0xc8>)
   807f6:	4798      	blx	r3
	int ref = refPos; //RefPos might change at an interrupt.
   807f8:	4b2f      	ldr	r3, [pc, #188]	; (808b8 <RTT_Handler+0xcc>)
	int error = ref - pos;
   807fa:	681c      	ldr	r4, [r3, #0]
   807fc:	1a24      	subs	r4, r4, r0
	sumError += error;
   807fe:	4f2f      	ldr	r7, [pc, #188]	; (808bc <RTT_Handler+0xd0>)
   80800:	683b      	ldr	r3, [r7, #0]
   80802:	eb04 0b03 	add.w	fp, r4, r3
   80806:	f8c7 b000 	str.w	fp, [r7]

	int derivative	= kd/dt*(error-prevError);
   8080a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 808d0 <RTT_Handler+0xe4>
   8080e:	e9da 2300 	ldrd	r2, r3, [sl]
   80812:	4610      	mov	r0, r2
   80814:	4619      	mov	r1, r3
	int integral	= dt*ki*sumError;
   80816:	4e2a      	ldr	r6, [pc, #168]	; (808c0 <RTT_Handler+0xd4>)
   80818:	e9da 2302 	ldrd	r2, r3, [sl, #8]
   8081c:	e9cd 0100 	strd	r0, r1, [sp]
   80820:	47b0      	blx	r6
   80822:	4680      	mov	r8, r0
   80824:	4689      	mov	r9, r1
   80826:	4d27      	ldr	r5, [pc, #156]	; (808c4 <RTT_Handler+0xd8>)
   80828:	4658      	mov	r0, fp
   8082a:	47a8      	blx	r5
   8082c:	4602      	mov	r2, r0
   8082e:	460b      	mov	r3, r1
   80830:	4640      	mov	r0, r8
   80832:	4649      	mov	r1, r9
   80834:	47b0      	blx	r6
   80836:	f8df b09c 	ldr.w	fp, [pc, #156]	; 808d4 <RTT_Handler+0xe8>
   8083a:	47d8      	blx	fp
	
	int power = kp*error + integral + derivative;
   8083c:	47a8      	blx	r5
   8083e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   80842:	4620      	mov	r0, r4
   80844:	47a8      	blx	r5
   80846:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   8084a:	47b0      	blx	r6
   8084c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 808d8 <RTT_Handler+0xec>
   80850:	4602      	mov	r2, r0
   80852:	460b      	mov	r3, r1
   80854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   80858:	47c8      	blx	r9
   8085a:	e9cd 0102 	strd	r0, r1, [sp, #8]
	int derivative	= kd/dt*(error-prevError);
   8085e:	e9dd 2300 	ldrd	r2, r3, [sp]
   80862:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   80866:	f8df 8074 	ldr.w	r8, [pc, #116]	; 808dc <RTT_Handler+0xf0>
   8086a:	47c0      	blx	r8
   8086c:	e9cd 0100 	strd	r0, r1, [sp]
   80870:	6878      	ldr	r0, [r7, #4]
   80872:	1a20      	subs	r0, r4, r0
   80874:	47a8      	blx	r5
   80876:	4602      	mov	r2, r0
   80878:	460b      	mov	r3, r1
   8087a:	e9dd 0100 	ldrd	r0, r1, [sp]
   8087e:	47b0      	blx	r6
   80880:	47d8      	blx	fp
	int power = kp*error + integral + derivative;
   80882:	47a8      	blx	r5
   80884:	4602      	mov	r2, r0
   80886:	460b      	mov	r3, r1
   80888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8088c:	47c8      	blx	r9
   8088e:	47d8      	blx	fp
	
	bool dir = 0;
	if(power < 0){
   80890:	1e01      	subs	r1, r0, #0
   80892:	db0c      	blt.n	808ae <RTT_Handler+0xc2>
		dir = 0;
		power = -power;
	}
	else if(power > 0){
   80894:	2900      	cmp	r1, #0
   80896:	bfd4      	ite	le
   80898:	2000      	movle	r0, #0
   8089a:	2001      	movgt	r0, #1
		dir = 1;
	}
	motor_run(dir,power);
   8089c:	4b0a      	ldr	r3, [pc, #40]	; (808c8 <RTT_Handler+0xdc>)
   8089e:	4798      	blx	r3
	
	prevError = error;
   808a0:	4b06      	ldr	r3, [pc, #24]	; (808bc <RTT_Handler+0xd0>)
   808a2:	605c      	str	r4, [r3, #4]

	//reading status register will clear interrupt flags
	uint32_t status = REG_RTT_SR;
   808a4:	4b09      	ldr	r3, [pc, #36]	; (808cc <RTT_Handler+0xe0>)
   808a6:	681b      	ldr	r3, [r3, #0]
}
   808a8:	b005      	add	sp, #20
   808aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		power = -power;
   808ae:	4249      	negs	r1, r1
		dir = 0;
   808b0:	2000      	movs	r0, #0
   808b2:	e7f3      	b.n	8089c <RTT_Handler+0xb0>
   808b4:	00080681 	.word	0x00080681
   808b8:	20000494 	.word	0x20000494
   808bc:	20000478 	.word	0x20000478
   808c0:	000812ad 	.word	0x000812ad
   808c4:	000811e1 	.word	0x000811e1
   808c8:	000806e1 	.word	0x000806e1
   808cc:	400e1a3c 	.word	0x400e1a3c
   808d0:	20000008 	.word	0x20000008
   808d4:	000816d1 	.word	0x000816d1
   808d8:	00080f49 	.word	0x00080f49
   808dc:	00081501 	.word	0x00081501

000808e0 <PID_update_refPos>:


void PID_update_refPos(CAN_MESSAGE *msg){
	int8_t posData = msg->data[0]; //[-100,100]
	refPos = -(posData - 100)*190/2; //Converting [-100,100] to [19000,0]
   808e0:	f990 3003 	ldrsb.w	r3, [r0, #3]
   808e4:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
   808e8:	23be      	movs	r3, #190	; 0xbe
   808ea:	fb03 f302 	mul.w	r3, r3, r2
   808ee:	105b      	asrs	r3, r3, #1
   808f0:	4a01      	ldr	r2, [pc, #4]	; (808f8 <PID_update_refPos+0x18>)
   808f2:	6013      	str	r3, [r2, #0]
   808f4:	4770      	bx	lr
   808f6:	bf00      	nop
   808f8:	20000494 	.word	0x20000494

000808fc <pwm_init>:

void pwm_init(void){

	//pin 44 on shield
	//peripheral B channel 6
	REG_PMC_PCER1	|= PMC_PCER1_PID36; 	//enable clock 
   808fc:	4a18      	ldr	r2, [pc, #96]	; (80960 <pwm_init+0x64>)
   808fe:	6813      	ldr	r3, [r2, #0]
   80900:	f043 0310 	orr.w	r3, r3, #16
   80904:	6013      	str	r3, [r2, #0]
	

    PIOC->PIO_ABSR	|= PIO_ABSR_P18; //Choose peripheral, A=0 B=1
   80906:	4b17      	ldr	r3, [pc, #92]	; (80964 <pwm_init+0x68>)
   80908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8090a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8090e:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_PDR	|= PIO_PDR_P18;  //PIO disable register for I/O set PWM pin to output 
   80910:	685a      	ldr	r2, [r3, #4]
   80912:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   80916:	605a      	str	r2, [r3, #4]


	REG_PWM_CLK		|= PWM_CLK_PREB(0) | PWM_CLK_DIVB(42); //clockB = mck/42=2MHz
   80918:	4a13      	ldr	r2, [pc, #76]	; (80968 <pwm_init+0x6c>)
   8091a:	6813      	ldr	r3, [r2, #0]
   8091c:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
   80920:	6013      	str	r3, [r2, #0]

	REG_PWM_CMR6	|= (PWM_CMR_CALG); //dual slope mode
   80922:	4b12      	ldr	r3, [pc, #72]	; (8096c <pwm_init+0x70>)
   80924:	681a      	ldr	r2, [r3, #0]
   80926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8092a:	601a      	str	r2, [r3, #0]
	REG_PWM_CMR6	|= (PWM_CMR_CPRE_CLKB); //use clock B
   8092c:	681a      	ldr	r2, [r3, #0]
   8092e:	f042 020c 	orr.w	r2, r2, #12
   80932:	601a      	str	r2, [r3, #0]
	REG_PWM_CMR6	|= (PWM_CMR_CPOL); // change polarity. start high instead of low
   80934:	681a      	ldr	r2, [r3, #0]
   80936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8093a:	601a      	str	r2, [r3, #0]

	REG_PWM_CPRD6	&= 0;
   8093c:	4a0c      	ldr	r2, [pc, #48]	; (80970 <pwm_init+0x74>)
   8093e:	6813      	ldr	r3, [r2, #0]
   80940:	2100      	movs	r1, #0
   80942:	6011      	str	r1, [r2, #0]
	REG_PWM_CDTY6	&= 0;  
   80944:	4b0b      	ldr	r3, [pc, #44]	; (80974 <pwm_init+0x78>)
   80946:	6818      	ldr	r0, [r3, #0]
   80948:	6019      	str	r1, [r3, #0]
	REG_PWM_CPRD6	= 20000; //period
   8094a:	f644 6120 	movw	r1, #20000	; 0x4e20
   8094e:	6011      	str	r1, [r2, #0]
	REG_PWM_CDTY6	= 1500; //duty cycle
   80950:	f240 52dc 	movw	r2, #1500	; 0x5dc
   80954:	601a      	str	r2, [r3, #0]
	REG_PWM_ENA		= PWM_ENA_CHID6;	
   80956:	2240      	movs	r2, #64	; 0x40
   80958:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
   8095c:	601a      	str	r2, [r3, #0]
   8095e:	4770      	bx	lr
   80960:	400e0700 	.word	0x400e0700
   80964:	400e1200 	.word	0x400e1200
   80968:	40094000 	.word	0x40094000
   8096c:	400942c0 	.word	0x400942c0
   80970:	400942cc 	.word	0x400942cc
   80974:	400942c4 	.word	0x400942c4

00080978 <pwm_update_duty_cycle>:


void pwm_update_duty_cycle(CAN_MESSAGE *msg){
	 
	 int8_t tall = msg->data[0];
	 int16_t dutyCycle = tall*5+1500;
   80978:	f990 3003 	ldrsb.w	r3, [r0, #3]
   8097c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80980:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
   80984:	3304      	adds	r3, #4
   80986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8098a:	bfb8      	it	lt
   8098c:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
		 dutyCycle = 2000;
	 }
	 else if(dutyCycle < 1000){
		 dutyCycle = 1000;
	 }
	 REG_PWM_CDTYUPD6 = dutyCycle;
   80990:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   80994:	bfa8      	it	ge
   80996:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
   8099a:	4a01      	ldr	r2, [pc, #4]	; (809a0 <pwm_update_duty_cycle+0x28>)
   8099c:	6013      	str	r3, [r2, #0]
   8099e:	4770      	bx	lr
   809a0:	400942c8 	.word	0x400942c8

000809a4 <adc_init>:



// not ab peripherals, but extra //see 43.5.3
void adc_init(void){
	REG_PMC_PCER1	|= PMC_PCER1_PID37; 	//enable clock
   809a4:	4a0b      	ldr	r2, [pc, #44]	; (809d4 <adc_init+0x30>)
   809a6:	6813      	ldr	r3, [r2, #0]
   809a8:	f043 0320 	orr.w	r3, r3, #32
   809ac:	6013      	str	r3, [r2, #0]
	REG_ADC_CHER	|= ADC_CHDR_CH0; // Channel 0. entails that PA2 is chosen (A7/AD)
   809ae:	f5a2 3201 	sub.w	r2, r2, #132096	; 0x20400
   809b2:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
   809b6:	6813      	ldr	r3, [r2, #0]
   809b8:	f043 0301 	orr.w	r3, r3, #1
   809bc:	6013      	str	r3, [r2, #0]
	REG_ADC_MR		|= ADC_MR_FREERUN_ON; //chosen free-running mode
   809be:	3a0c      	subs	r2, #12
   809c0:	6813      	ldr	r3, [r2, #0]
   809c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   809c6:	6013      	str	r3, [r2, #0]
	REG_ADC_CR		|= ADC_CR_START; //The software trigger that starts ADC conversion
   809c8:	3a04      	subs	r2, #4
   809ca:	6813      	ldr	r3, [r2, #0]
   809cc:	f043 0302 	orr.w	r3, r3, #2
   809d0:	6013      	str	r3, [r2, #0]
   809d2:	4770      	bx	lr
   809d4:	400e0700 	.word	0x400e0700

000809d8 <adc_ballpoint>:

void adc_read_putty(void){
	printf("adc value: %d \n\r",REG_ADC_CDR);
}

void adc_ballpoint(void){
   809d8:	b530      	push	{r4, r5, lr}
   809da:	b085      	sub	sp, #20
	int adcval = REG_ADC_CDR;
   809dc:	4b14      	ldr	r3, [pc, #80]	; (80a30 <adc_ballpoint+0x58>)
   809de:	681c      	ldr	r4, [r3, #0]
	if(adcval < 250  && activateGoal == 1){ // adc value threshold depends on IR condition
   809e0:	2cf9      	cmp	r4, #249	; 0xf9
   809e2:	dc03      	bgt.n	809ec <adc_ballpoint+0x14>
   809e4:	4b13      	ldr	r3, [pc, #76]	; (80a34 <adc_ballpoint+0x5c>)
   809e6:	681b      	ldr	r3, [r3, #0]
   809e8:	2b01      	cmp	r3, #1
   809ea:	d00a      	beq.n	80a02 <adc_ballpoint+0x2a>
		msg.data_length = 1;
		msg.data[0] = 1;
		can_send(&msg, 0);
		
	}
	if (adcval> 4000 && activateGoal==0){
   809ec:	f5b4 6f7a 	cmp.w	r4, #4000	; 0xfa0
   809f0:	dd05      	ble.n	809fe <adc_ballpoint+0x26>
   809f2:	4b10      	ldr	r3, [pc, #64]	; (80a34 <adc_ballpoint+0x5c>)
   809f4:	681b      	ldr	r3, [r3, #0]
   809f6:	b913      	cbnz	r3, 809fe <adc_ballpoint+0x26>
		activateGoal = 1;
   809f8:	2201      	movs	r2, #1
   809fa:	4b0e      	ldr	r3, [pc, #56]	; (80a34 <adc_ballpoint+0x5c>)
   809fc:	601a      	str	r2, [r3, #0]
	}
   809fe:	b005      	add	sp, #20
   80a00:	bd30      	pop	{r4, r5, pc}
		goalCount++;
   80a02:	4b0d      	ldr	r3, [pc, #52]	; (80a38 <adc_ballpoint+0x60>)
   80a04:	6819      	ldr	r1, [r3, #0]
   80a06:	3101      	adds	r1, #1
   80a08:	6019      	str	r1, [r3, #0]
		activateGoal = 0;
   80a0a:	2500      	movs	r5, #0
   80a0c:	4b09      	ldr	r3, [pc, #36]	; (80a34 <adc_ballpoint+0x5c>)
   80a0e:	601d      	str	r5, [r3, #0]
		printf("Goal Count: %d \n\r", goalCount);
   80a10:	480a      	ldr	r0, [pc, #40]	; (80a3c <adc_ballpoint+0x64>)
   80a12:	4b0b      	ldr	r3, [pc, #44]	; (80a40 <adc_ballpoint+0x68>)
   80a14:	4798      	blx	r3
		msg.id = 0;
   80a16:	f8ad 5004 	strh.w	r5, [sp, #4]
		msg.data_length = 1;
   80a1a:	2301      	movs	r3, #1
   80a1c:	f88d 3006 	strb.w	r3, [sp, #6]
		msg.data[0] = 1;
   80a20:	f88d 3007 	strb.w	r3, [sp, #7]
		can_send(&msg, 0);
   80a24:	4629      	mov	r1, r5
   80a26:	a801      	add	r0, sp, #4
   80a28:	4b06      	ldr	r3, [pc, #24]	; (80a44 <adc_ballpoint+0x6c>)
   80a2a:	4798      	blx	r3
   80a2c:	e7de      	b.n	809ec <adc_ballpoint+0x14>
   80a2e:	bf00      	nop
   80a30:	400c0050 	.word	0x400c0050
   80a34:	20000028 	.word	0x20000028
   80a38:	20000480 	.word	0x20000480
   80a3c:	0008194c 	.word	0x0008194c
   80a40:	00080dc1 	.word	0x00080dc1
   80a44:	00080261 	.word	0x00080261

00080a48 <main>:
#include "timer.h"

#define CAN_BR 0x00290561

int main(void)
{
   80a48:	b508      	push	{r3, lr}
		//LED TEST
		PIOA->PIO_PER	|= PIO_PER_P19;  //PIO enable register
   80a4a:	4b1c      	ldr	r3, [pc, #112]	; (80abc <main+0x74>)
   80a4c:	681a      	ldr	r2, [r3, #0]
   80a4e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a52:	601a      	str	r2, [r3, #0]
		PIOA->PIO_OER	|= PIO_OER_P19;  //PIO enable output register
   80a54:	691a      	ldr	r2, [r3, #16]
   80a56:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a5a:	611a      	str	r2, [r3, #16]
		PIOA->PIO_SODR	|= PIO_SODR_P19;  //set output data register
   80a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a62:	631a      	str	r2, [r3, #48]	; 0x30
								
		PIOA->PIO_PER	|= PIO_PER_P20;  //PIO enable register
   80a64:	681a      	ldr	r2, [r3, #0]
   80a66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80a6a:	601a      	str	r2, [r3, #0]
		PIOA->PIO_OER	|= PIO_OER_P20;  //PIO enable output register
   80a6c:	691a      	ldr	r2, [r3, #16]
   80a6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80a72:	611a      	str	r2, [r3, #16]
		PIOA->PIO_SODR	|= PIO_SODR_P20;  //set output data register
   80a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80a76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80a7a:	631a      	str	r2, [r3, #48]	; 0x30
		
	
		SystemInit(); //SAM system init
   80a7c:	4b10      	ldr	r3, [pc, #64]	; (80ac0 <main+0x78>)
   80a7e:	4798      	blx	r3
		WDT->WDT_MR |= WDT_MR_WDDIS; // disable the watchdog timer
   80a80:	4a10      	ldr	r2, [pc, #64]	; (80ac4 <main+0x7c>)
   80a82:	6853      	ldr	r3, [r2, #4]
   80a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   80a88:	6053      	str	r3, [r2, #4]
		configure_uart();
   80a8a:	4b0f      	ldr	r3, [pc, #60]	; (80ac8 <main+0x80>)
   80a8c:	4798      	blx	r3
		can_init_def_tx_rx_mb(CAN_BR);
   80a8e:	480f      	ldr	r0, [pc, #60]	; (80acc <main+0x84>)
   80a90:	4b0f      	ldr	r3, [pc, #60]	; (80ad0 <main+0x88>)
   80a92:	4798      	blx	r3
		pwm_init();
   80a94:	4b0f      	ldr	r3, [pc, #60]	; (80ad4 <main+0x8c>)
   80a96:	4798      	blx	r3
		adc_init();
   80a98:	4b0f      	ldr	r3, [pc, #60]	; (80ad8 <main+0x90>)
   80a9a:	4798      	blx	r3
		motor_init();
   80a9c:	4b0f      	ldr	r3, [pc, #60]	; (80adc <main+0x94>)
   80a9e:	4798      	blx	r3
		motor_dac_init();
   80aa0:	4b0f      	ldr	r3, [pc, #60]	; (80ae0 <main+0x98>)
   80aa2:	4798      	blx	r3
		motor_stop();
   80aa4:	4b0f      	ldr	r3, [pc, #60]	; (80ae4 <main+0x9c>)
   80aa6:	4798      	blx	r3
		motor_encoder_tglreset();
   80aa8:	4b0f      	ldr	r3, [pc, #60]	; (80ae8 <main+0xa0>)
   80aaa:	4798      	blx	r3
		motor_calibrate();
   80aac:	4b0f      	ldr	r3, [pc, #60]	; (80aec <main+0xa4>)
   80aae:	4798      	blx	r3
		PID_rtt_init();
   80ab0:	4b0f      	ldr	r3, [pc, #60]	; (80af0 <main+0xa8>)
   80ab2:	4798      	blx	r3
		
    while (1){
		//adc_read_putty();
		adc_ballpoint();
   80ab4:	4c0f      	ldr	r4, [pc, #60]	; (80af4 <main+0xac>)
   80ab6:	47a0      	blx	r4
   80ab8:	e7fd      	b.n	80ab6 <main+0x6e>
   80aba:	bf00      	nop
   80abc:	400e0e00 	.word	0x400e0e00
   80ac0:	00080495 	.word	0x00080495
   80ac4:	400e1a50 	.word	0x400e1a50
   80ac8:	00080e49 	.word	0x00080e49
   80acc:	00290561 	.word	0x00290561
   80ad0:	00080251 	.word	0x00080251
   80ad4:	000808fd 	.word	0x000808fd
   80ad8:	000809a5 	.word	0x000809a5
   80adc:	00080539 	.word	0x00080539
   80ae0:	0008060d 	.word	0x0008060d
   80ae4:	00080715 	.word	0x00080715
   80ae8:	0008065d 	.word	0x0008065d
   80aec:	00080725 	.word	0x00080725
   80af0:	0008079d 	.word	0x0008079d
   80af4:	000809d9 	.word	0x000809d9

00080af8 <prints>:
   80af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80afc:	460d      	mov	r5, r1
   80afe:	1e16      	subs	r6, r2, #0
   80b00:	dd48      	ble.n	80b94 <prints+0x9c>
   80b02:	780a      	ldrb	r2, [r1, #0]
   80b04:	2a00      	cmp	r2, #0
   80b06:	d035      	beq.n	80b74 <prints+0x7c>
   80b08:	460a      	mov	r2, r1
   80b0a:	2400      	movs	r4, #0
   80b0c:	3401      	adds	r4, #1
   80b0e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80b12:	2900      	cmp	r1, #0
   80b14:	d1fa      	bne.n	80b0c <prints+0x14>
   80b16:	42a6      	cmp	r6, r4
   80b18:	dc2d      	bgt.n	80b76 <prints+0x7e>
   80b1a:	2400      	movs	r4, #0
   80b1c:	f003 0202 	and.w	r2, r3, #2
   80b20:	2a00      	cmp	r2, #0
   80b22:	bf0c      	ite	eq
   80b24:	f04f 0820 	moveq.w	r8, #32
   80b28:	f04f 0830 	movne.w	r8, #48	; 0x30
   80b2c:	f013 0301 	ands.w	r3, r3, #1
   80b30:	d123      	bne.n	80b7a <prints+0x82>
   80b32:	2c00      	cmp	r4, #0
   80b34:	dd28      	ble.n	80b88 <prints+0x90>
   80b36:	4626      	mov	r6, r4
   80b38:	fa5f f988 	uxtb.w	r9, r8
   80b3c:	4f18      	ldr	r7, [pc, #96]	; (80ba0 <prints+0xa8>)
   80b3e:	4648      	mov	r0, r9
   80b40:	47b8      	blx	r7
   80b42:	3e01      	subs	r6, #1
   80b44:	d1fb      	bne.n	80b3e <prints+0x46>
   80b46:	7828      	ldrb	r0, [r5, #0]
   80b48:	b188      	cbz	r0, 80b6e <prints+0x76>
   80b4a:	4f15      	ldr	r7, [pc, #84]	; (80ba0 <prints+0xa8>)
   80b4c:	47b8      	blx	r7
   80b4e:	3401      	adds	r4, #1
   80b50:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80b54:	2800      	cmp	r0, #0
   80b56:	d1f9      	bne.n	80b4c <prints+0x54>
   80b58:	2e00      	cmp	r6, #0
   80b5a:	dd08      	ble.n	80b6e <prints+0x76>
   80b5c:	4635      	mov	r5, r6
   80b5e:	fa5f f888 	uxtb.w	r8, r8
   80b62:	4f0f      	ldr	r7, [pc, #60]	; (80ba0 <prints+0xa8>)
   80b64:	4640      	mov	r0, r8
   80b66:	47b8      	blx	r7
   80b68:	3d01      	subs	r5, #1
   80b6a:	d1fb      	bne.n	80b64 <prints+0x6c>
   80b6c:	4434      	add	r4, r6
   80b6e:	4620      	mov	r0, r4
   80b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b74:	2400      	movs	r4, #0
   80b76:	1b34      	subs	r4, r6, r4
   80b78:	e7d0      	b.n	80b1c <prints+0x24>
   80b7a:	4626      	mov	r6, r4
   80b7c:	7828      	ldrb	r0, [r5, #0]
   80b7e:	b108      	cbz	r0, 80b84 <prints+0x8c>
   80b80:	2400      	movs	r4, #0
   80b82:	e7e2      	b.n	80b4a <prints+0x52>
   80b84:	2400      	movs	r4, #0
   80b86:	e7e7      	b.n	80b58 <prints+0x60>
   80b88:	4626      	mov	r6, r4
   80b8a:	461c      	mov	r4, r3
   80b8c:	e7db      	b.n	80b46 <prints+0x4e>
   80b8e:	f04f 0820 	mov.w	r8, #32
   80b92:	e7d8      	b.n	80b46 <prints+0x4e>
   80b94:	f013 0401 	ands.w	r4, r3, #1
   80b98:	d0f9      	beq.n	80b8e <prints+0x96>
   80b9a:	f04f 0820 	mov.w	r8, #32
   80b9e:	e7ed      	b.n	80b7c <prints+0x84>
   80ba0:	00080eb1 	.word	0x00080eb1

00080ba4 <printi>:
   80ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80ba6:	b085      	sub	sp, #20
   80ba8:	4607      	mov	r7, r0
   80baa:	b381      	cbz	r1, 80c0e <printi+0x6a>
   80bac:	460c      	mov	r4, r1
   80bae:	b10b      	cbz	r3, 80bb4 <printi+0x10>
   80bb0:	2a0a      	cmp	r2, #10
   80bb2:	d038      	beq.n	80c26 <printi+0x82>
   80bb4:	2300      	movs	r3, #0
   80bb6:	f88d 300f 	strb.w	r3, [sp, #15]
   80bba:	2600      	movs	r6, #0
   80bbc:	2900      	cmp	r1, #0
   80bbe:	d046      	beq.n	80c4e <printi+0xaa>
   80bc0:	f10d 050f 	add.w	r5, sp, #15
   80bc4:	990c      	ldr	r1, [sp, #48]	; 0x30
   80bc6:	393a      	subs	r1, #58	; 0x3a
   80bc8:	fbb4 f3f2 	udiv	r3, r4, r2
   80bcc:	fb02 4313 	mls	r3, r2, r3, r4
   80bd0:	2b09      	cmp	r3, #9
   80bd2:	bfc8      	it	gt
   80bd4:	185b      	addgt	r3, r3, r1
   80bd6:	3330      	adds	r3, #48	; 0x30
   80bd8:	f805 3d01 	strb.w	r3, [r5, #-1]!
   80bdc:	fbb4 f4f2 	udiv	r4, r4, r2
   80be0:	2c00      	cmp	r4, #0
   80be2:	d1f1      	bne.n	80bc8 <printi+0x24>
   80be4:	b156      	cbz	r6, 80bfc <printi+0x58>
   80be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80be8:	b11b      	cbz	r3, 80bf2 <printi+0x4e>
   80bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bec:	f013 0f02 	tst.w	r3, #2
   80bf0:	d125      	bne.n	80c3e <printi+0x9a>
   80bf2:	232d      	movs	r3, #45	; 0x2d
   80bf4:	f805 3c01 	strb.w	r3, [r5, #-1]
   80bf8:	3d01      	subs	r5, #1
   80bfa:	2600      	movs	r6, #0
   80bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80c00:	4629      	mov	r1, r5
   80c02:	4638      	mov	r0, r7
   80c04:	4c14      	ldr	r4, [pc, #80]	; (80c58 <printi+0xb4>)
   80c06:	47a0      	blx	r4
   80c08:	4430      	add	r0, r6
   80c0a:	b005      	add	sp, #20
   80c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c0e:	2330      	movs	r3, #48	; 0x30
   80c10:	f88d 3004 	strb.w	r3, [sp, #4]
   80c14:	2300      	movs	r3, #0
   80c16:	f88d 3005 	strb.w	r3, [sp, #5]
   80c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80c1e:	a901      	add	r1, sp, #4
   80c20:	4c0d      	ldr	r4, [pc, #52]	; (80c58 <printi+0xb4>)
   80c22:	47a0      	blx	r4
   80c24:	e7f1      	b.n	80c0a <printi+0x66>
   80c26:	2900      	cmp	r1, #0
   80c28:	dac4      	bge.n	80bb4 <printi+0x10>
   80c2a:	424c      	negs	r4, r1
   80c2c:	2300      	movs	r3, #0
   80c2e:	f88d 300f 	strb.w	r3, [sp, #15]
   80c32:	f10d 050f 	add.w	r5, sp, #15
   80c36:	2c00      	cmp	r4, #0
   80c38:	d0d5      	beq.n	80be6 <printi+0x42>
   80c3a:	2601      	movs	r6, #1
   80c3c:	e7c0      	b.n	80bc0 <printi+0x1c>
   80c3e:	202d      	movs	r0, #45	; 0x2d
   80c40:	4b06      	ldr	r3, [pc, #24]	; (80c5c <printi+0xb8>)
   80c42:	4798      	blx	r3
   80c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80c46:	3b01      	subs	r3, #1
   80c48:	930a      	str	r3, [sp, #40]	; 0x28
   80c4a:	2601      	movs	r6, #1
   80c4c:	e7d6      	b.n	80bfc <printi+0x58>
   80c4e:	461e      	mov	r6, r3
   80c50:	f10d 050f 	add.w	r5, sp, #15
   80c54:	e7d2      	b.n	80bfc <printi+0x58>
   80c56:	bf00      	nop
   80c58:	00080af9 	.word	0x00080af9
   80c5c:	00080eb1 	.word	0x00080eb1

00080c60 <print>:
   80c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c64:	b087      	sub	sp, #28
   80c66:	4680      	mov	r8, r0
   80c68:	780b      	ldrb	r3, [r1, #0]
   80c6a:	2b00      	cmp	r3, #0
   80c6c:	f000 8094 	beq.w	80d98 <print+0x138>
   80c70:	468b      	mov	fp, r1
   80c72:	4617      	mov	r7, r2
   80c74:	2500      	movs	r5, #0
   80c76:	4e4e      	ldr	r6, [pc, #312]	; (80db0 <print+0x150>)
   80c78:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80db8 <print+0x158>
   80c7c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80dbc <print+0x15c>
   80c80:	e046      	b.n	80d10 <print+0xb0>
   80c82:	2200      	movs	r2, #0
   80c84:	e070      	b.n	80d68 <print+0x108>
   80c86:	6839      	ldr	r1, [r7, #0]
   80c88:	3704      	adds	r7, #4
   80c8a:	484a      	ldr	r0, [pc, #296]	; (80db4 <print+0x154>)
   80c8c:	2900      	cmp	r1, #0
   80c8e:	bf08      	it	eq
   80c90:	4601      	moveq	r1, r0
   80c92:	4640      	mov	r0, r8
   80c94:	47d0      	blx	sl
   80c96:	4405      	add	r5, r0
   80c98:	e035      	b.n	80d06 <print+0xa6>
   80c9a:	6839      	ldr	r1, [r7, #0]
   80c9c:	3704      	adds	r7, #4
   80c9e:	2061      	movs	r0, #97	; 0x61
   80ca0:	9002      	str	r0, [sp, #8]
   80ca2:	9301      	str	r3, [sp, #4]
   80ca4:	9200      	str	r2, [sp, #0]
   80ca6:	2301      	movs	r3, #1
   80ca8:	220a      	movs	r2, #10
   80caa:	4640      	mov	r0, r8
   80cac:	47c8      	blx	r9
   80cae:	4405      	add	r5, r0
   80cb0:	e029      	b.n	80d06 <print+0xa6>
   80cb2:	6839      	ldr	r1, [r7, #0]
   80cb4:	3704      	adds	r7, #4
   80cb6:	2061      	movs	r0, #97	; 0x61
   80cb8:	9002      	str	r0, [sp, #8]
   80cba:	9301      	str	r3, [sp, #4]
   80cbc:	9200      	str	r2, [sp, #0]
   80cbe:	2300      	movs	r3, #0
   80cc0:	2210      	movs	r2, #16
   80cc2:	4640      	mov	r0, r8
   80cc4:	47c8      	blx	r9
   80cc6:	4405      	add	r5, r0
   80cc8:	e01d      	b.n	80d06 <print+0xa6>
   80cca:	6839      	ldr	r1, [r7, #0]
   80ccc:	3704      	adds	r7, #4
   80cce:	2041      	movs	r0, #65	; 0x41
   80cd0:	9002      	str	r0, [sp, #8]
   80cd2:	9301      	str	r3, [sp, #4]
   80cd4:	9200      	str	r2, [sp, #0]
   80cd6:	2300      	movs	r3, #0
   80cd8:	2210      	movs	r2, #16
   80cda:	4640      	mov	r0, r8
   80cdc:	47c8      	blx	r9
   80cde:	4405      	add	r5, r0
   80ce0:	e011      	b.n	80d06 <print+0xa6>
   80ce2:	6839      	ldr	r1, [r7, #0]
   80ce4:	3704      	adds	r7, #4
   80ce6:	2061      	movs	r0, #97	; 0x61
   80ce8:	9002      	str	r0, [sp, #8]
   80cea:	9301      	str	r3, [sp, #4]
   80cec:	9200      	str	r2, [sp, #0]
   80cee:	2300      	movs	r3, #0
   80cf0:	220a      	movs	r2, #10
   80cf2:	4640      	mov	r0, r8
   80cf4:	47c8      	blx	r9
   80cf6:	4405      	add	r5, r0
   80cf8:	e005      	b.n	80d06 <print+0xa6>
   80cfa:	46a3      	mov	fp, r4
   80cfc:	f89b 0000 	ldrb.w	r0, [fp]
   80d00:	47b0      	blx	r6
   80d02:	3501      	adds	r5, #1
   80d04:	465c      	mov	r4, fp
   80d06:	f104 0b01 	add.w	fp, r4, #1
   80d0a:	7863      	ldrb	r3, [r4, #1]
   80d0c:	2b00      	cmp	r3, #0
   80d0e:	d044      	beq.n	80d9a <print+0x13a>
   80d10:	2b25      	cmp	r3, #37	; 0x25
   80d12:	d1f3      	bne.n	80cfc <print+0x9c>
   80d14:	f10b 0401 	add.w	r4, fp, #1
   80d18:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80d1c:	2b00      	cmp	r3, #0
   80d1e:	d03c      	beq.n	80d9a <print+0x13a>
   80d20:	2b25      	cmp	r3, #37	; 0x25
   80d22:	d0ea      	beq.n	80cfa <print+0x9a>
   80d24:	2b2d      	cmp	r3, #45	; 0x2d
   80d26:	bf06      	itte	eq
   80d28:	f10b 0402 	addeq.w	r4, fp, #2
   80d2c:	2301      	moveq	r3, #1
   80d2e:	2300      	movne	r3, #0
   80d30:	7822      	ldrb	r2, [r4, #0]
   80d32:	2a30      	cmp	r2, #48	; 0x30
   80d34:	d105      	bne.n	80d42 <print+0xe2>
   80d36:	f043 0302 	orr.w	r3, r3, #2
   80d3a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80d3e:	2a30      	cmp	r2, #48	; 0x30
   80d40:	d0f9      	beq.n	80d36 <print+0xd6>
   80d42:	7821      	ldrb	r1, [r4, #0]
   80d44:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80d48:	b2d2      	uxtb	r2, r2
   80d4a:	2a09      	cmp	r2, #9
   80d4c:	d899      	bhi.n	80c82 <print+0x22>
   80d4e:	2200      	movs	r2, #0
   80d50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80d54:	3930      	subs	r1, #48	; 0x30
   80d56:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   80d5a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80d5e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80d62:	b2c0      	uxtb	r0, r0
   80d64:	2809      	cmp	r0, #9
   80d66:	d9f3      	bls.n	80d50 <print+0xf0>
   80d68:	2973      	cmp	r1, #115	; 0x73
   80d6a:	d08c      	beq.n	80c86 <print+0x26>
   80d6c:	2964      	cmp	r1, #100	; 0x64
   80d6e:	d094      	beq.n	80c9a <print+0x3a>
   80d70:	2978      	cmp	r1, #120	; 0x78
   80d72:	d09e      	beq.n	80cb2 <print+0x52>
   80d74:	2958      	cmp	r1, #88	; 0x58
   80d76:	d0a8      	beq.n	80cca <print+0x6a>
   80d78:	2975      	cmp	r1, #117	; 0x75
   80d7a:	d0b2      	beq.n	80ce2 <print+0x82>
   80d7c:	2963      	cmp	r1, #99	; 0x63
   80d7e:	d1c2      	bne.n	80d06 <print+0xa6>
   80d80:	6839      	ldr	r1, [r7, #0]
   80d82:	3704      	adds	r7, #4
   80d84:	f88d 1014 	strb.w	r1, [sp, #20]
   80d88:	2100      	movs	r1, #0
   80d8a:	f88d 1015 	strb.w	r1, [sp, #21]
   80d8e:	a905      	add	r1, sp, #20
   80d90:	4640      	mov	r0, r8
   80d92:	47d0      	blx	sl
   80d94:	4405      	add	r5, r0
   80d96:	e7b6      	b.n	80d06 <print+0xa6>
   80d98:	2500      	movs	r5, #0
   80d9a:	f1b8 0f00 	cmp.w	r8, #0
   80d9e:	d003      	beq.n	80da8 <print+0x148>
   80da0:	f8d8 3000 	ldr.w	r3, [r8]
   80da4:	2200      	movs	r2, #0
   80da6:	701a      	strb	r2, [r3, #0]
   80da8:	4628      	mov	r0, r5
   80daa:	b007      	add	sp, #28
   80dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80db0:	00080eb1 	.word	0x00080eb1
   80db4:	00081960 	.word	0x00081960
   80db8:	00080af9 	.word	0x00080af9
   80dbc:	00080ba5 	.word	0x00080ba5

00080dc0 <printf>:
   80dc0:	b40f      	push	{r0, r1, r2, r3}
   80dc2:	b500      	push	{lr}
   80dc4:	b083      	sub	sp, #12
   80dc6:	aa04      	add	r2, sp, #16
   80dc8:	f852 1b04 	ldr.w	r1, [r2], #4
   80dcc:	9201      	str	r2, [sp, #4]
   80dce:	2000      	movs	r0, #0
   80dd0:	4b03      	ldr	r3, [pc, #12]	; (80de0 <printf+0x20>)
   80dd2:	4798      	blx	r3
   80dd4:	b003      	add	sp, #12
   80dd6:	f85d eb04 	ldr.w	lr, [sp], #4
   80dda:	b004      	add	sp, #16
   80ddc:	4770      	bx	lr
   80dde:	bf00      	nop
   80de0:	00080c61 	.word	0x00080c61

00080de4 <SysTick_Handler>:

void SysTick_disable(void){
	SysTick->CTRL = 0;
}

void SysTick_Handler(void){
   80de4:	b538      	push	{r3, r4, r5, lr}
	
	SysTick_counter++;
   80de6:	4b12      	ldr	r3, [pc, #72]	; (80e30 <SysTick_Handler+0x4c>)
   80de8:	6819      	ldr	r1, [r3, #0]
   80dea:	3101      	adds	r1, #1
   80dec:	6019      	str	r1, [r3, #0]
	if(SysTick_counter == CompareValms){
   80dee:	685b      	ldr	r3, [r3, #4]
   80df0:	4299      	cmp	r1, r3
   80df2:	d00b      	beq.n	80e0c <SysTick_Handler+0x28>
		busywait_alarm = 1;
	}
	
	if(SysTick_counter%1000 == 0){
   80df4:	4a0f      	ldr	r2, [pc, #60]	; (80e34 <SysTick_Handler+0x50>)
   80df6:	fb82 3201 	smull	r3, r2, r2, r1
   80dfa:	17cb      	asrs	r3, r1, #31
   80dfc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   80e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80e04:	fb02 1313 	mls	r3, r2, r3, r1
   80e08:	b123      	cbz	r3, 80e14 <SysTick_Handler+0x30>
   80e0a:	bd38      	pop	{r3, r4, r5, pc}
		busywait_alarm = 1;
   80e0c:	2201      	movs	r2, #1
   80e0e:	4b08      	ldr	r3, [pc, #32]	; (80e30 <SysTick_Handler+0x4c>)
   80e10:	721a      	strb	r2, [r3, #8]
   80e12:	e7ef      	b.n	80df4 <SysTick_Handler+0x10>
		SysTick_seconds++;
   80e14:	4c06      	ldr	r4, [pc, #24]	; (80e30 <SysTick_Handler+0x4c>)
   80e16:	68e3      	ldr	r3, [r4, #12]
   80e18:	3301      	adds	r3, #1
   80e1a:	60e3      	str	r3, [r4, #12]
		printf("counter: %d", SysTick_counter);
   80e1c:	4806      	ldr	r0, [pc, #24]	; (80e38 <SysTick_Handler+0x54>)
   80e1e:	4d07      	ldr	r5, [pc, #28]	; (80e3c <SysTick_Handler+0x58>)
   80e20:	47a8      	blx	r5
		printf("busywait: %d", busywait_alarm);
   80e22:	7a21      	ldrb	r1, [r4, #8]
   80e24:	4806      	ldr	r0, [pc, #24]	; (80e40 <SysTick_Handler+0x5c>)
   80e26:	47a8      	blx	r5
		printf("Seconds: %d \n\r", SysTick_seconds);
   80e28:	68e1      	ldr	r1, [r4, #12]
   80e2a:	4806      	ldr	r0, [pc, #24]	; (80e44 <SysTick_Handler+0x60>)
   80e2c:	47a8      	blx	r5
	}
}
   80e2e:	e7ec      	b.n	80e0a <SysTick_Handler+0x26>
   80e30:	20000484 	.word	0x20000484
   80e34:	10624dd3 	.word	0x10624dd3
   80e38:	00081968 	.word	0x00081968
   80e3c:	00080dc1 	.word	0x00080dc1
   80e40:	00081974 	.word	0x00081974
   80e44:	00081984 	.word	0x00081984

00080e48 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80e48:	4b16      	ldr	r3, [pc, #88]	; (80ea4 <configure_uart+0x5c>)
   80e4a:	2200      	movs	r2, #0
   80e4c:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80e4e:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e50:	4b15      	ldr	r3, [pc, #84]	; (80ea8 <configure_uart+0x60>)
   80e52:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e56:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e58:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80e5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80e5c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80e5e:	4002      	ands	r2, r0
   80e60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80e64:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80e66:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80e68:	f44f 7280 	mov.w	r2, #256	; 0x100
   80e6c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80e70:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80e72:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80e76:	21ac      	movs	r1, #172	; 0xac
   80e78:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80e7a:	f240 2123 	movw	r1, #547	; 0x223
   80e7e:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80e84:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80e86:	f240 2102 	movw	r1, #514	; 0x202
   80e8a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80e8e:	f04f 31ff 	mov.w	r1, #4294967295
   80e92:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80e94:	21e1      	movs	r1, #225	; 0xe1
   80e96:	6099      	str	r1, [r3, #8]
   80e98:	4904      	ldr	r1, [pc, #16]	; (80eac <configure_uart+0x64>)
   80e9a:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80e9c:	2250      	movs	r2, #80	; 0x50
   80e9e:	601a      	str	r2, [r3, #0]
   80ea0:	4770      	bx	lr
   80ea2:	bf00      	nop
   80ea4:	20000498 	.word	0x20000498
   80ea8:	400e0e00 	.word	0x400e0e00
   80eac:	e000e100 	.word	0xe000e100

00080eb0 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80eb0:	4b07      	ldr	r3, [pc, #28]	; (80ed0 <uart_putchar+0x20>)
   80eb2:	695b      	ldr	r3, [r3, #20]
   80eb4:	f013 0f02 	tst.w	r3, #2
   80eb8:	d008      	beq.n	80ecc <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80eba:	4b05      	ldr	r3, [pc, #20]	; (80ed0 <uart_putchar+0x20>)
   80ebc:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80ebe:	461a      	mov	r2, r3
   80ec0:	6953      	ldr	r3, [r2, #20]
   80ec2:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ec6:	d0fb      	beq.n	80ec0 <uart_putchar+0x10>
	return 0;
   80ec8:	2000      	movs	r0, #0
   80eca:	4770      	bx	lr
	return 1;
   80ecc:	2001      	movs	r0, #1
}
   80ece:	4770      	bx	lr
   80ed0:	400e0800 	.word	0x400e0800

00080ed4 <UART_Handler>:

void UART_Handler(void)
{
   80ed4:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80ed6:	4b15      	ldr	r3, [pc, #84]	; (80f2c <UART_Handler+0x58>)
   80ed8:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80eda:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80ede:	d003      	beq.n	80ee8 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80ee0:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80ee4:	4a11      	ldr	r2, [pc, #68]	; (80f2c <UART_Handler+0x58>)
   80ee6:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80ee8:	f013 0f01 	tst.w	r3, #1
   80eec:	d012      	beq.n	80f14 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80eee:	4810      	ldr	r0, [pc, #64]	; (80f30 <UART_Handler+0x5c>)
   80ef0:	7842      	ldrb	r2, [r0, #1]
   80ef2:	1c53      	adds	r3, r2, #1
   80ef4:	4259      	negs	r1, r3
   80ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80efa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80efe:	bf58      	it	pl
   80f00:	424b      	negpl	r3, r1
   80f02:	7801      	ldrb	r1, [r0, #0]
   80f04:	428b      	cmp	r3, r1
   80f06:	d006      	beq.n	80f16 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80f08:	4908      	ldr	r1, [pc, #32]	; (80f2c <UART_Handler+0x58>)
   80f0a:	6988      	ldr	r0, [r1, #24]
   80f0c:	4908      	ldr	r1, [pc, #32]	; (80f30 <UART_Handler+0x5c>)
   80f0e:	440a      	add	r2, r1
   80f10:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80f12:	704b      	strb	r3, [r1, #1]
   80f14:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80f16:	4807      	ldr	r0, [pc, #28]	; (80f34 <UART_Handler+0x60>)
   80f18:	4b07      	ldr	r3, [pc, #28]	; (80f38 <UART_Handler+0x64>)
   80f1a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80f1c:	4b03      	ldr	r3, [pc, #12]	; (80f2c <UART_Handler+0x58>)
   80f1e:	699a      	ldr	r2, [r3, #24]
   80f20:	4b03      	ldr	r3, [pc, #12]	; (80f30 <UART_Handler+0x5c>)
   80f22:	7859      	ldrb	r1, [r3, #1]
   80f24:	440b      	add	r3, r1
   80f26:	709a      	strb	r2, [r3, #2]
			return;
   80f28:	bd08      	pop	{r3, pc}
   80f2a:	bf00      	nop
   80f2c:	400e0800 	.word	0x400e0800
   80f30:	20000498 	.word	0x20000498
   80f34:	000819bc 	.word	0x000819bc
   80f38:	00080dc1 	.word	0x00080dc1

00080f3c <__aeabi_drsub>:
   80f3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80f40:	e002      	b.n	80f48 <__adddf3>
   80f42:	bf00      	nop

00080f44 <__aeabi_dsub>:
   80f44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080f48 <__adddf3>:
   80f48:	b530      	push	{r4, r5, lr}
   80f4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80f4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80f52:	ea94 0f05 	teq	r4, r5
   80f56:	bf08      	it	eq
   80f58:	ea90 0f02 	teqeq	r0, r2
   80f5c:	bf1f      	itttt	ne
   80f5e:	ea54 0c00 	orrsne.w	ip, r4, r0
   80f62:	ea55 0c02 	orrsne.w	ip, r5, r2
   80f66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80f6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80f6e:	f000 80e2 	beq.w	81136 <__adddf3+0x1ee>
   80f72:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80f76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80f7a:	bfb8      	it	lt
   80f7c:	426d      	neglt	r5, r5
   80f7e:	dd0c      	ble.n	80f9a <__adddf3+0x52>
   80f80:	442c      	add	r4, r5
   80f82:	ea80 0202 	eor.w	r2, r0, r2
   80f86:	ea81 0303 	eor.w	r3, r1, r3
   80f8a:	ea82 0000 	eor.w	r0, r2, r0
   80f8e:	ea83 0101 	eor.w	r1, r3, r1
   80f92:	ea80 0202 	eor.w	r2, r0, r2
   80f96:	ea81 0303 	eor.w	r3, r1, r3
   80f9a:	2d36      	cmp	r5, #54	; 0x36
   80f9c:	bf88      	it	hi
   80f9e:	bd30      	pophi	{r4, r5, pc}
   80fa0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80fa4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80fa8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80fac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80fb0:	d002      	beq.n	80fb8 <__adddf3+0x70>
   80fb2:	4240      	negs	r0, r0
   80fb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80fb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80fbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80fc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80fc4:	d002      	beq.n	80fcc <__adddf3+0x84>
   80fc6:	4252      	negs	r2, r2
   80fc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80fcc:	ea94 0f05 	teq	r4, r5
   80fd0:	f000 80a7 	beq.w	81122 <__adddf3+0x1da>
   80fd4:	f1a4 0401 	sub.w	r4, r4, #1
   80fd8:	f1d5 0e20 	rsbs	lr, r5, #32
   80fdc:	db0d      	blt.n	80ffa <__adddf3+0xb2>
   80fde:	fa02 fc0e 	lsl.w	ip, r2, lr
   80fe2:	fa22 f205 	lsr.w	r2, r2, r5
   80fe6:	1880      	adds	r0, r0, r2
   80fe8:	f141 0100 	adc.w	r1, r1, #0
   80fec:	fa03 f20e 	lsl.w	r2, r3, lr
   80ff0:	1880      	adds	r0, r0, r2
   80ff2:	fa43 f305 	asr.w	r3, r3, r5
   80ff6:	4159      	adcs	r1, r3
   80ff8:	e00e      	b.n	81018 <__adddf3+0xd0>
   80ffa:	f1a5 0520 	sub.w	r5, r5, #32
   80ffe:	f10e 0e20 	add.w	lr, lr, #32
   81002:	2a01      	cmp	r2, #1
   81004:	fa03 fc0e 	lsl.w	ip, r3, lr
   81008:	bf28      	it	cs
   8100a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8100e:	fa43 f305 	asr.w	r3, r3, r5
   81012:	18c0      	adds	r0, r0, r3
   81014:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81018:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8101c:	d507      	bpl.n	8102e <__adddf3+0xe6>
   8101e:	f04f 0e00 	mov.w	lr, #0
   81022:	f1dc 0c00 	rsbs	ip, ip, #0
   81026:	eb7e 0000 	sbcs.w	r0, lr, r0
   8102a:	eb6e 0101 	sbc.w	r1, lr, r1
   8102e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81032:	d31b      	bcc.n	8106c <__adddf3+0x124>
   81034:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81038:	d30c      	bcc.n	81054 <__adddf3+0x10c>
   8103a:	0849      	lsrs	r1, r1, #1
   8103c:	ea5f 0030 	movs.w	r0, r0, rrx
   81040:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81044:	f104 0401 	add.w	r4, r4, #1
   81048:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8104c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81050:	f080 809a 	bcs.w	81188 <__adddf3+0x240>
   81054:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81058:	bf08      	it	eq
   8105a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8105e:	f150 0000 	adcs.w	r0, r0, #0
   81062:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81066:	ea41 0105 	orr.w	r1, r1, r5
   8106a:	bd30      	pop	{r4, r5, pc}
   8106c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81070:	4140      	adcs	r0, r0
   81072:	eb41 0101 	adc.w	r1, r1, r1
   81076:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8107a:	f1a4 0401 	sub.w	r4, r4, #1
   8107e:	d1e9      	bne.n	81054 <__adddf3+0x10c>
   81080:	f091 0f00 	teq	r1, #0
   81084:	bf04      	itt	eq
   81086:	4601      	moveq	r1, r0
   81088:	2000      	moveq	r0, #0
   8108a:	fab1 f381 	clz	r3, r1
   8108e:	bf08      	it	eq
   81090:	3320      	addeq	r3, #32
   81092:	f1a3 030b 	sub.w	r3, r3, #11
   81096:	f1b3 0220 	subs.w	r2, r3, #32
   8109a:	da0c      	bge.n	810b6 <__adddf3+0x16e>
   8109c:	320c      	adds	r2, #12
   8109e:	dd08      	ble.n	810b2 <__adddf3+0x16a>
   810a0:	f102 0c14 	add.w	ip, r2, #20
   810a4:	f1c2 020c 	rsb	r2, r2, #12
   810a8:	fa01 f00c 	lsl.w	r0, r1, ip
   810ac:	fa21 f102 	lsr.w	r1, r1, r2
   810b0:	e00c      	b.n	810cc <__adddf3+0x184>
   810b2:	f102 0214 	add.w	r2, r2, #20
   810b6:	bfd8      	it	le
   810b8:	f1c2 0c20 	rsble	ip, r2, #32
   810bc:	fa01 f102 	lsl.w	r1, r1, r2
   810c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   810c4:	bfdc      	itt	le
   810c6:	ea41 010c 	orrle.w	r1, r1, ip
   810ca:	4090      	lslle	r0, r2
   810cc:	1ae4      	subs	r4, r4, r3
   810ce:	bfa2      	ittt	ge
   810d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   810d4:	4329      	orrge	r1, r5
   810d6:	bd30      	popge	{r4, r5, pc}
   810d8:	ea6f 0404 	mvn.w	r4, r4
   810dc:	3c1f      	subs	r4, #31
   810de:	da1c      	bge.n	8111a <__adddf3+0x1d2>
   810e0:	340c      	adds	r4, #12
   810e2:	dc0e      	bgt.n	81102 <__adddf3+0x1ba>
   810e4:	f104 0414 	add.w	r4, r4, #20
   810e8:	f1c4 0220 	rsb	r2, r4, #32
   810ec:	fa20 f004 	lsr.w	r0, r0, r4
   810f0:	fa01 f302 	lsl.w	r3, r1, r2
   810f4:	ea40 0003 	orr.w	r0, r0, r3
   810f8:	fa21 f304 	lsr.w	r3, r1, r4
   810fc:	ea45 0103 	orr.w	r1, r5, r3
   81100:	bd30      	pop	{r4, r5, pc}
   81102:	f1c4 040c 	rsb	r4, r4, #12
   81106:	f1c4 0220 	rsb	r2, r4, #32
   8110a:	fa20 f002 	lsr.w	r0, r0, r2
   8110e:	fa01 f304 	lsl.w	r3, r1, r4
   81112:	ea40 0003 	orr.w	r0, r0, r3
   81116:	4629      	mov	r1, r5
   81118:	bd30      	pop	{r4, r5, pc}
   8111a:	fa21 f004 	lsr.w	r0, r1, r4
   8111e:	4629      	mov	r1, r5
   81120:	bd30      	pop	{r4, r5, pc}
   81122:	f094 0f00 	teq	r4, #0
   81126:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8112a:	bf06      	itte	eq
   8112c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81130:	3401      	addeq	r4, #1
   81132:	3d01      	subne	r5, #1
   81134:	e74e      	b.n	80fd4 <__adddf3+0x8c>
   81136:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8113a:	bf18      	it	ne
   8113c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81140:	d029      	beq.n	81196 <__adddf3+0x24e>
   81142:	ea94 0f05 	teq	r4, r5
   81146:	bf08      	it	eq
   81148:	ea90 0f02 	teqeq	r0, r2
   8114c:	d005      	beq.n	8115a <__adddf3+0x212>
   8114e:	ea54 0c00 	orrs.w	ip, r4, r0
   81152:	bf04      	itt	eq
   81154:	4619      	moveq	r1, r3
   81156:	4610      	moveq	r0, r2
   81158:	bd30      	pop	{r4, r5, pc}
   8115a:	ea91 0f03 	teq	r1, r3
   8115e:	bf1e      	ittt	ne
   81160:	2100      	movne	r1, #0
   81162:	2000      	movne	r0, #0
   81164:	bd30      	popne	{r4, r5, pc}
   81166:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8116a:	d105      	bne.n	81178 <__adddf3+0x230>
   8116c:	0040      	lsls	r0, r0, #1
   8116e:	4149      	adcs	r1, r1
   81170:	bf28      	it	cs
   81172:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81176:	bd30      	pop	{r4, r5, pc}
   81178:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8117c:	bf3c      	itt	cc
   8117e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81182:	bd30      	popcc	{r4, r5, pc}
   81184:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81188:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8118c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81190:	f04f 0000 	mov.w	r0, #0
   81194:	bd30      	pop	{r4, r5, pc}
   81196:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8119a:	bf1a      	itte	ne
   8119c:	4619      	movne	r1, r3
   8119e:	4610      	movne	r0, r2
   811a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   811a4:	bf1c      	itt	ne
   811a6:	460b      	movne	r3, r1
   811a8:	4602      	movne	r2, r0
   811aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   811ae:	bf06      	itte	eq
   811b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   811b4:	ea91 0f03 	teqeq	r1, r3
   811b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   811bc:	bd30      	pop	{r4, r5, pc}
   811be:	bf00      	nop

000811c0 <__aeabi_ui2d>:
   811c0:	f090 0f00 	teq	r0, #0
   811c4:	bf04      	itt	eq
   811c6:	2100      	moveq	r1, #0
   811c8:	4770      	bxeq	lr
   811ca:	b530      	push	{r4, r5, lr}
   811cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811d4:	f04f 0500 	mov.w	r5, #0
   811d8:	f04f 0100 	mov.w	r1, #0
   811dc:	e750      	b.n	81080 <__adddf3+0x138>
   811de:	bf00      	nop

000811e0 <__aeabi_i2d>:
   811e0:	f090 0f00 	teq	r0, #0
   811e4:	bf04      	itt	eq
   811e6:	2100      	moveq	r1, #0
   811e8:	4770      	bxeq	lr
   811ea:	b530      	push	{r4, r5, lr}
   811ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   811f8:	bf48      	it	mi
   811fa:	4240      	negmi	r0, r0
   811fc:	f04f 0100 	mov.w	r1, #0
   81200:	e73e      	b.n	81080 <__adddf3+0x138>
   81202:	bf00      	nop

00081204 <__aeabi_f2d>:
   81204:	0042      	lsls	r2, r0, #1
   81206:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8120a:	ea4f 0131 	mov.w	r1, r1, rrx
   8120e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81212:	bf1f      	itttt	ne
   81214:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81218:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8121c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81220:	4770      	bxne	lr
   81222:	f092 0f00 	teq	r2, #0
   81226:	bf14      	ite	ne
   81228:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8122c:	4770      	bxeq	lr
   8122e:	b530      	push	{r4, r5, lr}
   81230:	f44f 7460 	mov.w	r4, #896	; 0x380
   81234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8123c:	e720      	b.n	81080 <__adddf3+0x138>
   8123e:	bf00      	nop

00081240 <__aeabi_ul2d>:
   81240:	ea50 0201 	orrs.w	r2, r0, r1
   81244:	bf08      	it	eq
   81246:	4770      	bxeq	lr
   81248:	b530      	push	{r4, r5, lr}
   8124a:	f04f 0500 	mov.w	r5, #0
   8124e:	e00a      	b.n	81266 <__aeabi_l2d+0x16>

00081250 <__aeabi_l2d>:
   81250:	ea50 0201 	orrs.w	r2, r0, r1
   81254:	bf08      	it	eq
   81256:	4770      	bxeq	lr
   81258:	b530      	push	{r4, r5, lr}
   8125a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8125e:	d502      	bpl.n	81266 <__aeabi_l2d+0x16>
   81260:	4240      	negs	r0, r0
   81262:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81266:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8126a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8126e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81272:	f43f aedc 	beq.w	8102e <__adddf3+0xe6>
   81276:	f04f 0203 	mov.w	r2, #3
   8127a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8127e:	bf18      	it	ne
   81280:	3203      	addne	r2, #3
   81282:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81286:	bf18      	it	ne
   81288:	3203      	addne	r2, #3
   8128a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8128e:	f1c2 0320 	rsb	r3, r2, #32
   81292:	fa00 fc03 	lsl.w	ip, r0, r3
   81296:	fa20 f002 	lsr.w	r0, r0, r2
   8129a:	fa01 fe03 	lsl.w	lr, r1, r3
   8129e:	ea40 000e 	orr.w	r0, r0, lr
   812a2:	fa21 f102 	lsr.w	r1, r1, r2
   812a6:	4414      	add	r4, r2
   812a8:	e6c1      	b.n	8102e <__adddf3+0xe6>
   812aa:	bf00      	nop

000812ac <__aeabi_dmul>:
   812ac:	b570      	push	{r4, r5, r6, lr}
   812ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   812b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   812b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   812ba:	bf1d      	ittte	ne
   812bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   812c0:	ea94 0f0c 	teqne	r4, ip
   812c4:	ea95 0f0c 	teqne	r5, ip
   812c8:	f000 f8de 	bleq	81488 <__aeabi_dmul+0x1dc>
   812cc:	442c      	add	r4, r5
   812ce:	ea81 0603 	eor.w	r6, r1, r3
   812d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   812d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   812da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   812de:	bf18      	it	ne
   812e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   812e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   812e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   812ec:	d038      	beq.n	81360 <__aeabi_dmul+0xb4>
   812ee:	fba0 ce02 	umull	ip, lr, r0, r2
   812f2:	f04f 0500 	mov.w	r5, #0
   812f6:	fbe1 e502 	umlal	lr, r5, r1, r2
   812fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   812fe:	fbe0 e503 	umlal	lr, r5, r0, r3
   81302:	f04f 0600 	mov.w	r6, #0
   81306:	fbe1 5603 	umlal	r5, r6, r1, r3
   8130a:	f09c 0f00 	teq	ip, #0
   8130e:	bf18      	it	ne
   81310:	f04e 0e01 	orrne.w	lr, lr, #1
   81314:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81318:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8131c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81320:	d204      	bcs.n	8132c <__aeabi_dmul+0x80>
   81322:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81326:	416d      	adcs	r5, r5
   81328:	eb46 0606 	adc.w	r6, r6, r6
   8132c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81330:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81334:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81338:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8133c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81340:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81344:	bf88      	it	hi
   81346:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8134a:	d81e      	bhi.n	8138a <__aeabi_dmul+0xde>
   8134c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81350:	bf08      	it	eq
   81352:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81356:	f150 0000 	adcs.w	r0, r0, #0
   8135a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8135e:	bd70      	pop	{r4, r5, r6, pc}
   81360:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81364:	ea46 0101 	orr.w	r1, r6, r1
   81368:	ea40 0002 	orr.w	r0, r0, r2
   8136c:	ea81 0103 	eor.w	r1, r1, r3
   81370:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81374:	bfc2      	ittt	gt
   81376:	ebd4 050c 	rsbsgt	r5, r4, ip
   8137a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8137e:	bd70      	popgt	{r4, r5, r6, pc}
   81380:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81384:	f04f 0e00 	mov.w	lr, #0
   81388:	3c01      	subs	r4, #1
   8138a:	f300 80ab 	bgt.w	814e4 <__aeabi_dmul+0x238>
   8138e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81392:	bfde      	ittt	le
   81394:	2000      	movle	r0, #0
   81396:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8139a:	bd70      	pople	{r4, r5, r6, pc}
   8139c:	f1c4 0400 	rsb	r4, r4, #0
   813a0:	3c20      	subs	r4, #32
   813a2:	da35      	bge.n	81410 <__aeabi_dmul+0x164>
   813a4:	340c      	adds	r4, #12
   813a6:	dc1b      	bgt.n	813e0 <__aeabi_dmul+0x134>
   813a8:	f104 0414 	add.w	r4, r4, #20
   813ac:	f1c4 0520 	rsb	r5, r4, #32
   813b0:	fa00 f305 	lsl.w	r3, r0, r5
   813b4:	fa20 f004 	lsr.w	r0, r0, r4
   813b8:	fa01 f205 	lsl.w	r2, r1, r5
   813bc:	ea40 0002 	orr.w	r0, r0, r2
   813c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   813c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   813c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   813cc:	fa21 f604 	lsr.w	r6, r1, r4
   813d0:	eb42 0106 	adc.w	r1, r2, r6
   813d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   813d8:	bf08      	it	eq
   813da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   813de:	bd70      	pop	{r4, r5, r6, pc}
   813e0:	f1c4 040c 	rsb	r4, r4, #12
   813e4:	f1c4 0520 	rsb	r5, r4, #32
   813e8:	fa00 f304 	lsl.w	r3, r0, r4
   813ec:	fa20 f005 	lsr.w	r0, r0, r5
   813f0:	fa01 f204 	lsl.w	r2, r1, r4
   813f4:	ea40 0002 	orr.w	r0, r0, r2
   813f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81400:	f141 0100 	adc.w	r1, r1, #0
   81404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81408:	bf08      	it	eq
   8140a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8140e:	bd70      	pop	{r4, r5, r6, pc}
   81410:	f1c4 0520 	rsb	r5, r4, #32
   81414:	fa00 f205 	lsl.w	r2, r0, r5
   81418:	ea4e 0e02 	orr.w	lr, lr, r2
   8141c:	fa20 f304 	lsr.w	r3, r0, r4
   81420:	fa01 f205 	lsl.w	r2, r1, r5
   81424:	ea43 0302 	orr.w	r3, r3, r2
   81428:	fa21 f004 	lsr.w	r0, r1, r4
   8142c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81430:	fa21 f204 	lsr.w	r2, r1, r4
   81434:	ea20 0002 	bic.w	r0, r0, r2
   81438:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8143c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81440:	bf08      	it	eq
   81442:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81446:	bd70      	pop	{r4, r5, r6, pc}
   81448:	f094 0f00 	teq	r4, #0
   8144c:	d10f      	bne.n	8146e <__aeabi_dmul+0x1c2>
   8144e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81452:	0040      	lsls	r0, r0, #1
   81454:	eb41 0101 	adc.w	r1, r1, r1
   81458:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8145c:	bf08      	it	eq
   8145e:	3c01      	subeq	r4, #1
   81460:	d0f7      	beq.n	81452 <__aeabi_dmul+0x1a6>
   81462:	ea41 0106 	orr.w	r1, r1, r6
   81466:	f095 0f00 	teq	r5, #0
   8146a:	bf18      	it	ne
   8146c:	4770      	bxne	lr
   8146e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81472:	0052      	lsls	r2, r2, #1
   81474:	eb43 0303 	adc.w	r3, r3, r3
   81478:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8147c:	bf08      	it	eq
   8147e:	3d01      	subeq	r5, #1
   81480:	d0f7      	beq.n	81472 <__aeabi_dmul+0x1c6>
   81482:	ea43 0306 	orr.w	r3, r3, r6
   81486:	4770      	bx	lr
   81488:	ea94 0f0c 	teq	r4, ip
   8148c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81490:	bf18      	it	ne
   81492:	ea95 0f0c 	teqne	r5, ip
   81496:	d00c      	beq.n	814b2 <__aeabi_dmul+0x206>
   81498:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8149c:	bf18      	it	ne
   8149e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814a2:	d1d1      	bne.n	81448 <__aeabi_dmul+0x19c>
   814a4:	ea81 0103 	eor.w	r1, r1, r3
   814a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814ac:	f04f 0000 	mov.w	r0, #0
   814b0:	bd70      	pop	{r4, r5, r6, pc}
   814b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   814b6:	bf06      	itte	eq
   814b8:	4610      	moveq	r0, r2
   814ba:	4619      	moveq	r1, r3
   814bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   814c0:	d019      	beq.n	814f6 <__aeabi_dmul+0x24a>
   814c2:	ea94 0f0c 	teq	r4, ip
   814c6:	d102      	bne.n	814ce <__aeabi_dmul+0x222>
   814c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   814cc:	d113      	bne.n	814f6 <__aeabi_dmul+0x24a>
   814ce:	ea95 0f0c 	teq	r5, ip
   814d2:	d105      	bne.n	814e0 <__aeabi_dmul+0x234>
   814d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   814d8:	bf1c      	itt	ne
   814da:	4610      	movne	r0, r2
   814dc:	4619      	movne	r1, r3
   814de:	d10a      	bne.n	814f6 <__aeabi_dmul+0x24a>
   814e0:	ea81 0103 	eor.w	r1, r1, r3
   814e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   814ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   814f0:	f04f 0000 	mov.w	r0, #0
   814f4:	bd70      	pop	{r4, r5, r6, pc}
   814f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   814fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   814fe:	bd70      	pop	{r4, r5, r6, pc}

00081500 <__aeabi_ddiv>:
   81500:	b570      	push	{r4, r5, r6, lr}
   81502:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8150a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8150e:	bf1d      	ittte	ne
   81510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81514:	ea94 0f0c 	teqne	r4, ip
   81518:	ea95 0f0c 	teqne	r5, ip
   8151c:	f000 f8a7 	bleq	8166e <__aeabi_ddiv+0x16e>
   81520:	eba4 0405 	sub.w	r4, r4, r5
   81524:	ea81 0e03 	eor.w	lr, r1, r3
   81528:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8152c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81530:	f000 8088 	beq.w	81644 <__aeabi_ddiv+0x144>
   81534:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81538:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8153c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81540:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81544:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81548:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8154c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81550:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81554:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81558:	429d      	cmp	r5, r3
   8155a:	bf08      	it	eq
   8155c:	4296      	cmpeq	r6, r2
   8155e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81562:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81566:	d202      	bcs.n	8156e <__aeabi_ddiv+0x6e>
   81568:	085b      	lsrs	r3, r3, #1
   8156a:	ea4f 0232 	mov.w	r2, r2, rrx
   8156e:	1ab6      	subs	r6, r6, r2
   81570:	eb65 0503 	sbc.w	r5, r5, r3
   81574:	085b      	lsrs	r3, r3, #1
   81576:	ea4f 0232 	mov.w	r2, r2, rrx
   8157a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8157e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81582:	ebb6 0e02 	subs.w	lr, r6, r2
   81586:	eb75 0e03 	sbcs.w	lr, r5, r3
   8158a:	bf22      	ittt	cs
   8158c:	1ab6      	subcs	r6, r6, r2
   8158e:	4675      	movcs	r5, lr
   81590:	ea40 000c 	orrcs.w	r0, r0, ip
   81594:	085b      	lsrs	r3, r3, #1
   81596:	ea4f 0232 	mov.w	r2, r2, rrx
   8159a:	ebb6 0e02 	subs.w	lr, r6, r2
   8159e:	eb75 0e03 	sbcs.w	lr, r5, r3
   815a2:	bf22      	ittt	cs
   815a4:	1ab6      	subcs	r6, r6, r2
   815a6:	4675      	movcs	r5, lr
   815a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   815ac:	085b      	lsrs	r3, r3, #1
   815ae:	ea4f 0232 	mov.w	r2, r2, rrx
   815b2:	ebb6 0e02 	subs.w	lr, r6, r2
   815b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   815ba:	bf22      	ittt	cs
   815bc:	1ab6      	subcs	r6, r6, r2
   815be:	4675      	movcs	r5, lr
   815c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   815c4:	085b      	lsrs	r3, r3, #1
   815c6:	ea4f 0232 	mov.w	r2, r2, rrx
   815ca:	ebb6 0e02 	subs.w	lr, r6, r2
   815ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   815d2:	bf22      	ittt	cs
   815d4:	1ab6      	subcs	r6, r6, r2
   815d6:	4675      	movcs	r5, lr
   815d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   815dc:	ea55 0e06 	orrs.w	lr, r5, r6
   815e0:	d018      	beq.n	81614 <__aeabi_ddiv+0x114>
   815e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   815e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   815ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   815ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   815f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   815f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   815fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   815fe:	d1c0      	bne.n	81582 <__aeabi_ddiv+0x82>
   81600:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81604:	d10b      	bne.n	8161e <__aeabi_ddiv+0x11e>
   81606:	ea41 0100 	orr.w	r1, r1, r0
   8160a:	f04f 0000 	mov.w	r0, #0
   8160e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81612:	e7b6      	b.n	81582 <__aeabi_ddiv+0x82>
   81614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81618:	bf04      	itt	eq
   8161a:	4301      	orreq	r1, r0
   8161c:	2000      	moveq	r0, #0
   8161e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81622:	bf88      	it	hi
   81624:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81628:	f63f aeaf 	bhi.w	8138a <__aeabi_dmul+0xde>
   8162c:	ebb5 0c03 	subs.w	ip, r5, r3
   81630:	bf04      	itt	eq
   81632:	ebb6 0c02 	subseq.w	ip, r6, r2
   81636:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8163a:	f150 0000 	adcs.w	r0, r0, #0
   8163e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81642:	bd70      	pop	{r4, r5, r6, pc}
   81644:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81648:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8164c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81650:	bfc2      	ittt	gt
   81652:	ebd4 050c 	rsbsgt	r5, r4, ip
   81656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8165a:	bd70      	popgt	{r4, r5, r6, pc}
   8165c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81660:	f04f 0e00 	mov.w	lr, #0
   81664:	3c01      	subs	r4, #1
   81666:	e690      	b.n	8138a <__aeabi_dmul+0xde>
   81668:	ea45 0e06 	orr.w	lr, r5, r6
   8166c:	e68d      	b.n	8138a <__aeabi_dmul+0xde>
   8166e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81672:	ea94 0f0c 	teq	r4, ip
   81676:	bf08      	it	eq
   81678:	ea95 0f0c 	teqeq	r5, ip
   8167c:	f43f af3b 	beq.w	814f6 <__aeabi_dmul+0x24a>
   81680:	ea94 0f0c 	teq	r4, ip
   81684:	d10a      	bne.n	8169c <__aeabi_ddiv+0x19c>
   81686:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8168a:	f47f af34 	bne.w	814f6 <__aeabi_dmul+0x24a>
   8168e:	ea95 0f0c 	teq	r5, ip
   81692:	f47f af25 	bne.w	814e0 <__aeabi_dmul+0x234>
   81696:	4610      	mov	r0, r2
   81698:	4619      	mov	r1, r3
   8169a:	e72c      	b.n	814f6 <__aeabi_dmul+0x24a>
   8169c:	ea95 0f0c 	teq	r5, ip
   816a0:	d106      	bne.n	816b0 <__aeabi_ddiv+0x1b0>
   816a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   816a6:	f43f aefd 	beq.w	814a4 <__aeabi_dmul+0x1f8>
   816aa:	4610      	mov	r0, r2
   816ac:	4619      	mov	r1, r3
   816ae:	e722      	b.n	814f6 <__aeabi_dmul+0x24a>
   816b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   816b4:	bf18      	it	ne
   816b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   816ba:	f47f aec5 	bne.w	81448 <__aeabi_dmul+0x19c>
   816be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   816c2:	f47f af0d 	bne.w	814e0 <__aeabi_dmul+0x234>
   816c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   816ca:	f47f aeeb 	bne.w	814a4 <__aeabi_dmul+0x1f8>
   816ce:	e712      	b.n	814f6 <__aeabi_dmul+0x24a>

000816d0 <__aeabi_d2iz>:
   816d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   816d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   816d8:	d215      	bcs.n	81706 <__aeabi_d2iz+0x36>
   816da:	d511      	bpl.n	81700 <__aeabi_d2iz+0x30>
   816dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   816e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   816e4:	d912      	bls.n	8170c <__aeabi_d2iz+0x3c>
   816e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   816ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   816ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   816f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   816f6:	fa23 f002 	lsr.w	r0, r3, r2
   816fa:	bf18      	it	ne
   816fc:	4240      	negne	r0, r0
   816fe:	4770      	bx	lr
   81700:	f04f 0000 	mov.w	r0, #0
   81704:	4770      	bx	lr
   81706:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8170a:	d105      	bne.n	81718 <__aeabi_d2iz+0x48>
   8170c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81710:	bf08      	it	eq
   81712:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81716:	4770      	bx	lr
   81718:	f04f 0000 	mov.w	r0, #0
   8171c:	4770      	bx	lr
   8171e:	bf00      	nop

00081720 <__aeabi_d2uiz>:
   81720:	004a      	lsls	r2, r1, #1
   81722:	d211      	bcs.n	81748 <__aeabi_d2uiz+0x28>
   81724:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81728:	d211      	bcs.n	8174e <__aeabi_d2uiz+0x2e>
   8172a:	d50d      	bpl.n	81748 <__aeabi_d2uiz+0x28>
   8172c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81730:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81734:	d40e      	bmi.n	81754 <__aeabi_d2uiz+0x34>
   81736:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8173a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8173e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81742:	fa23 f002 	lsr.w	r0, r3, r2
   81746:	4770      	bx	lr
   81748:	f04f 0000 	mov.w	r0, #0
   8174c:	4770      	bx	lr
   8174e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81752:	d102      	bne.n	8175a <__aeabi_d2uiz+0x3a>
   81754:	f04f 30ff 	mov.w	r0, #4294967295
   81758:	4770      	bx	lr
   8175a:	f04f 0000 	mov.w	r0, #0
   8175e:	4770      	bx	lr

00081760 <__libc_init_array>:
   81760:	b570      	push	{r4, r5, r6, lr}
   81762:	4e0f      	ldr	r6, [pc, #60]	; (817a0 <__libc_init_array+0x40>)
   81764:	4d0f      	ldr	r5, [pc, #60]	; (817a4 <__libc_init_array+0x44>)
   81766:	1b76      	subs	r6, r6, r5
   81768:	10b6      	asrs	r6, r6, #2
   8176a:	bf18      	it	ne
   8176c:	2400      	movne	r4, #0
   8176e:	d005      	beq.n	8177c <__libc_init_array+0x1c>
   81770:	3401      	adds	r4, #1
   81772:	f855 3b04 	ldr.w	r3, [r5], #4
   81776:	4798      	blx	r3
   81778:	42a6      	cmp	r6, r4
   8177a:	d1f9      	bne.n	81770 <__libc_init_array+0x10>
   8177c:	4e0a      	ldr	r6, [pc, #40]	; (817a8 <__libc_init_array+0x48>)
   8177e:	4d0b      	ldr	r5, [pc, #44]	; (817ac <__libc_init_array+0x4c>)
   81780:	f000 f92e 	bl	819e0 <_init>
   81784:	1b76      	subs	r6, r6, r5
   81786:	10b6      	asrs	r6, r6, #2
   81788:	bf18      	it	ne
   8178a:	2400      	movne	r4, #0
   8178c:	d006      	beq.n	8179c <__libc_init_array+0x3c>
   8178e:	3401      	adds	r4, #1
   81790:	f855 3b04 	ldr.w	r3, [r5], #4
   81794:	4798      	blx	r3
   81796:	42a6      	cmp	r6, r4
   81798:	d1f9      	bne.n	8178e <__libc_init_array+0x2e>
   8179a:	bd70      	pop	{r4, r5, r6, pc}
   8179c:	bd70      	pop	{r4, r5, r6, pc}
   8179e:	bf00      	nop
   817a0:	000819ec 	.word	0x000819ec
   817a4:	000819ec 	.word	0x000819ec
   817a8:	000819f4 	.word	0x000819f4
   817ac:	000819ec 	.word	0x000819ec

000817b0 <register_fini>:
   817b0:	4b02      	ldr	r3, [pc, #8]	; (817bc <register_fini+0xc>)
   817b2:	b113      	cbz	r3, 817ba <register_fini+0xa>
   817b4:	4802      	ldr	r0, [pc, #8]	; (817c0 <register_fini+0x10>)
   817b6:	f000 b805 	b.w	817c4 <atexit>
   817ba:	4770      	bx	lr
   817bc:	00000000 	.word	0x00000000
   817c0:	000817d1 	.word	0x000817d1

000817c4 <atexit>:
   817c4:	2300      	movs	r3, #0
   817c6:	4601      	mov	r1, r0
   817c8:	461a      	mov	r2, r3
   817ca:	4618      	mov	r0, r3
   817cc:	f000 b81e 	b.w	8180c <__register_exitproc>

000817d0 <__libc_fini_array>:
   817d0:	b538      	push	{r3, r4, r5, lr}
   817d2:	4c0a      	ldr	r4, [pc, #40]	; (817fc <__libc_fini_array+0x2c>)
   817d4:	4d0a      	ldr	r5, [pc, #40]	; (81800 <__libc_fini_array+0x30>)
   817d6:	1b64      	subs	r4, r4, r5
   817d8:	10a4      	asrs	r4, r4, #2
   817da:	d00a      	beq.n	817f2 <__libc_fini_array+0x22>
   817dc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   817e0:	3b01      	subs	r3, #1
   817e2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   817e6:	3c01      	subs	r4, #1
   817e8:	f855 3904 	ldr.w	r3, [r5], #-4
   817ec:	4798      	blx	r3
   817ee:	2c00      	cmp	r4, #0
   817f0:	d1f9      	bne.n	817e6 <__libc_fini_array+0x16>
   817f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   817f6:	f000 b8fd 	b.w	819f4 <_fini>
   817fa:	bf00      	nop
   817fc:	00081a04 	.word	0x00081a04
   81800:	00081a00 	.word	0x00081a00

00081804 <__retarget_lock_acquire_recursive>:
   81804:	4770      	bx	lr
   81806:	bf00      	nop

00081808 <__retarget_lock_release_recursive>:
   81808:	4770      	bx	lr
   8180a:	bf00      	nop

0008180c <__register_exitproc>:
   8180c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81810:	4d2c      	ldr	r5, [pc, #176]	; (818c4 <__register_exitproc+0xb8>)
   81812:	4606      	mov	r6, r0
   81814:	6828      	ldr	r0, [r5, #0]
   81816:	4698      	mov	r8, r3
   81818:	460f      	mov	r7, r1
   8181a:	4691      	mov	r9, r2
   8181c:	f7ff fff2 	bl	81804 <__retarget_lock_acquire_recursive>
   81820:	4b29      	ldr	r3, [pc, #164]	; (818c8 <__register_exitproc+0xbc>)
   81822:	681c      	ldr	r4, [r3, #0]
   81824:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81828:	2b00      	cmp	r3, #0
   8182a:	d03e      	beq.n	818aa <__register_exitproc+0x9e>
   8182c:	685a      	ldr	r2, [r3, #4]
   8182e:	2a1f      	cmp	r2, #31
   81830:	dc1c      	bgt.n	8186c <__register_exitproc+0x60>
   81832:	f102 0e01 	add.w	lr, r2, #1
   81836:	b176      	cbz	r6, 81856 <__register_exitproc+0x4a>
   81838:	2101      	movs	r1, #1
   8183a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8183e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81842:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81846:	4091      	lsls	r1, r2
   81848:	4308      	orrs	r0, r1
   8184a:	2e02      	cmp	r6, #2
   8184c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81850:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81854:	d023      	beq.n	8189e <__register_exitproc+0x92>
   81856:	3202      	adds	r2, #2
   81858:	f8c3 e004 	str.w	lr, [r3, #4]
   8185c:	6828      	ldr	r0, [r5, #0]
   8185e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81862:	f7ff ffd1 	bl	81808 <__retarget_lock_release_recursive>
   81866:	2000      	movs	r0, #0
   81868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8186c:	4b17      	ldr	r3, [pc, #92]	; (818cc <__register_exitproc+0xc0>)
   8186e:	b30b      	cbz	r3, 818b4 <__register_exitproc+0xa8>
   81870:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81874:	f3af 8000 	nop.w
   81878:	4603      	mov	r3, r0
   8187a:	b1d8      	cbz	r0, 818b4 <__register_exitproc+0xa8>
   8187c:	2000      	movs	r0, #0
   8187e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81882:	f04f 0e01 	mov.w	lr, #1
   81886:	6058      	str	r0, [r3, #4]
   81888:	6019      	str	r1, [r3, #0]
   8188a:	4602      	mov	r2, r0
   8188c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81890:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81894:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81898:	2e00      	cmp	r6, #0
   8189a:	d0dc      	beq.n	81856 <__register_exitproc+0x4a>
   8189c:	e7cc      	b.n	81838 <__register_exitproc+0x2c>
   8189e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   818a2:	4301      	orrs	r1, r0
   818a4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   818a8:	e7d5      	b.n	81856 <__register_exitproc+0x4a>
   818aa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   818ae:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   818b2:	e7bb      	b.n	8182c <__register_exitproc+0x20>
   818b4:	6828      	ldr	r0, [r5, #0]
   818b6:	f7ff ffa7 	bl	81808 <__retarget_lock_release_recursive>
   818ba:	f04f 30ff 	mov.w	r0, #4294967295
   818be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   818c2:	bf00      	nop
   818c4:	20000458 	.word	0x20000458
   818c8:	000819dc 	.word	0x000819dc
   818cc:	00000000 	.word	0x00000000
   818d0:	304e4143 	.word	0x304e4143
   818d4:	73656d20 	.word	0x73656d20
   818d8:	65676173 	.word	0x65676173
   818dc:	72726120 	.word	0x72726120
   818e0:	64657669 	.word	0x64657669
   818e4:	206e6920 	.word	0x206e6920
   818e8:	2d6e6f6e 	.word	0x2d6e6f6e
   818ec:	64657375 	.word	0x64657375
   818f0:	69616d20 	.word	0x69616d20
   818f4:	786f626c 	.word	0x786f626c
   818f8:	00000d0a 	.word	0x00000d0a
   818fc:	76657270 	.word	0x76657270
   81900:	3a736f50 	.word	0x3a736f50
   81904:	2c642520 	.word	0x2c642520
   81908:	736f7020 	.word	0x736f7020
   8190c:	6425203a 	.word	0x6425203a
   81910:	000d0a20 	.word	0x000d0a20
   81914:	696c6143 	.word	0x696c6143
   81918:	74617262 	.word	0x74617262
   8191c:	206e6f69 	.word	0x206e6f69
   81920:	656e6f64 	.word	0x656e6f64
   81924:	6f50202c 	.word	0x6f50202c
   81928:	69746973 	.word	0x69746973
   8192c:	25206e6f 	.word	0x25206e6f
   81930:	0d0a2064 	.word	0x0d0a2064
   81934:	00000000 	.word	0x00000000
   81938:	20636461 	.word	0x20636461
   8193c:	756c6176 	.word	0x756c6176
   81940:	25203a65 	.word	0x25203a65
   81944:	0d0a2064 	.word	0x0d0a2064
   81948:	00000000 	.word	0x00000000
   8194c:	6c616f47 	.word	0x6c616f47
   81950:	756f4320 	.word	0x756f4320
   81954:	203a746e 	.word	0x203a746e
   81958:	0a206425 	.word	0x0a206425
   8195c:	0000000d 	.word	0x0000000d
   81960:	6c756e28 	.word	0x6c756e28
   81964:	0000296c 	.word	0x0000296c
   81968:	6e756f63 	.word	0x6e756f63
   8196c:	3a726574 	.word	0x3a726574
   81970:	00642520 	.word	0x00642520
   81974:	79737562 	.word	0x79737562
   81978:	74696177 	.word	0x74696177
   8197c:	6425203a 	.word	0x6425203a
   81980:	00000000 	.word	0x00000000
   81984:	6f636553 	.word	0x6f636553
   81988:	3a73646e 	.word	0x3a73646e
   8198c:	20642520 	.word	0x20642520
   81990:	00000d0a 	.word	0x00000d0a
   81994:	656d6954 	.word	0x656d6954
   81998:	74732072 	.word	0x74732072
   8199c:	65747261 	.word	0x65747261
   819a0:	2e2e2e64 	.word	0x2e2e2e64
   819a4:	000d0a20 	.word	0x000d0a20
   819a8:	542e2e2e 	.word	0x542e2e2e
   819ac:	72656d69 	.word	0x72656d69
   819b0:	6f747320 	.word	0x6f747320
   819b4:	64657070 	.word	0x64657070
   819b8:	00000d0a 	.word	0x00000d0a
   819bc:	3a525245 	.word	0x3a525245
   819c0:	52415520 	.word	0x52415520
   819c4:	58522054 	.word	0x58522054
   819c8:	66756220 	.word	0x66756220
   819cc:	20726566 	.word	0x20726566
   819d0:	66207369 	.word	0x66207369
   819d4:	0a6c6c75 	.word	0x0a6c6c75
   819d8:	0000000d 	.word	0x0000000d

000819dc <_global_impure_ptr>:
   819dc:	20000030                                0.. 

000819e0 <_init>:
   819e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   819e2:	bf00      	nop
   819e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   819e6:	bc08      	pop	{r3}
   819e8:	469e      	mov	lr, r3
   819ea:	4770      	bx	lr

000819ec <__init_array_start>:
   819ec:	000817b1 	.word	0x000817b1

000819f0 <__frame_dummy_init_array_entry>:
   819f0:	00080119                                ....

000819f4 <_fini>:
   819f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   819f6:	bf00      	nop
   819f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   819fa:	bc08      	pop	{r3}
   819fc:	469e      	mov	lr, r3
   819fe:	4770      	bx	lr

00081a00 <__fini_array_start>:
   81a00:	000800f5 	.word	0x000800f5
