
Byggern2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  000026d2  00002766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800252  00800252  000028b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000417f  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001774  00000000  00000000  00006ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b97  00000000  00000000  00008553  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  0000a0ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db0  00000000  00000000  0000a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022d6  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000da46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__ctors_end>
       4:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_1>
       8:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
       c:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      10:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      14:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      18:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      1c:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      20:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      24:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      28:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      2c:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      30:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      34:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      38:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      3c:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      40:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__vector_16>
      44:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      48:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      4c:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      50:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      54:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      58:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      5c:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      60:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      64:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      68:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>
      6c:	0c 94 94 04 	jmp	0x928	; 0x928 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	36 02       	muls	r19, r22
      72:	35 02       	muls	r19, r21
      74:	2d 02       	muls	r18, r29
      76:	25 02       	muls	r18, r21
      78:	1a 02       	muls	r17, r26
      7a:	10 02       	muls	r17, r16
      7c:	0f 02       	muls	r16, r31
      7e:	0e 02       	muls	r16, r30
      80:	0d 02       	muls	r16, r29
      82:	0c 02       	muls	r16, r28
      84:	02 02       	muls	r16, r18
      86:	f8 01       	movw	r30, r16
      88:	eb 01       	movw	r28, r22
      8a:	df 01       	movw	r26, r30
      8c:	de 01       	movw	r26, r28
      8e:	dd 01       	movw	r26, r26
      90:	dc 01       	movw	r26, r24
      92:	db 01       	movw	r26, r22
      94:	d0 01       	movw	r26, r0
      96:	c4 01       	movw	r24, r8
      98:	b8 01       	movw	r22, r16
      9a:	ab 01       	movw	r20, r22
      9c:	aa 01       	movw	r20, r20
      9e:	a9 01       	movw	r20, r18
      a0:	a8 01       	movw	r20, r16
      a2:	9b 01       	movw	r18, r22
      a4:	96 01       	movw	r18, r12
      a6:	95 01       	movw	r18, r10
      a8:	94 01       	movw	r18, r8
      aa:	93 01       	movw	r18, r6
      ac:	92 01       	movw	r18, r4
      ae:	91 01       	movw	r18, r2
      b0:	86 01       	movw	r16, r12
      b2:	85 01       	movw	r16, r10
      b4:	7c 01       	movw	r14, r24
      b6:	75 01       	movw	r14, r10
      b8:	74 01       	movw	r14, r8
      ba:	73 01       	movw	r14, r6
      bc:	72 01       	movw	r14, r4
      be:	71 01       	movw	r14, r2
      c0:	70 01       	movw	r14, r0
      c2:	6f 01       	movw	r12, r30
      c4:	64 01       	movw	r12, r8
      c6:	5b 01       	movw	r10, r22
      c8:	5a 01       	movw	r10, r20
      ca:	59 01       	movw	r10, r18
      cc:	58 01       	movw	r10, r16
      ce:	57 01       	movw	r10, r14
      d0:	56 01       	movw	r10, r12
      d2:	55 01       	movw	r10, r10
      d4:	4c 01       	movw	r8, r24
      d6:	45 01       	movw	r8, r10
      d8:	44 01       	movw	r8, r8
      da:	43 01       	movw	r8, r6
      dc:	42 01       	movw	r8, r4
      de:	41 01       	movw	r8, r2
      e0:	40 01       	movw	r8, r0
      e2:	3f 01       	movw	r6, r30
      e4:	38 01       	movw	r6, r16
      e6:	31 01       	movw	r6, r2
      e8:	30 01       	movw	r6, r0
      ea:	2f 01       	movw	r4, r30
      ec:	2e 01       	movw	r4, r28
      ee:	2d 01       	movw	r4, r26
      f0:	2c 01       	movw	r4, r24
      f2:	2b 01       	movw	r4, r22
      f4:	1f 01       	movw	r2, r30
      f6:	1e 01       	movw	r2, r28
      f8:	11 01       	movw	r2, r2
      fa:	02 01       	movw	r0, r4
      fc:	01 01       	movw	r0, r2
      fe:	00 01       	movw	r0, r0

00000100 <calibrate_8>:
	...

00000101 <calibrate_7>:
	...

00000102 <calibrate_6>:
     102:	54 48 45 20 43 4f 4e 54 52 4f 4c 4c 45 52 00        THE CONTROLLER.

00000111 <calibrate_5>:
     111:	44 4f 20 4e 4f 54 20 54 4f 55 43 48 00              DO NOT TOUCH.

0000011e <calibrate_4>:
	...

0000011f <calibrate_3>:
     11f:	43 41 4c 49 42 52 41 54 49 4e 47 00                 CALIBRATING.

0000012b <calibrate_2>:
	...

0000012c <calibrate_1>:
	...

0000012d <slider_8>:
	...

0000012e <slider_7>:
	...

0000012f <slider_6>:
	...

00000130 <slider_5>:
	...

00000131 <slider_4>:
     131:	43 48 4f 53 45 4e 00                                CHOSEN.

00000138 <slider_3>:
     138:	53 4c 49 44 45 52 00                                SLIDER.

0000013f <slider_2>:
	...

00000140 <slider_1>:
	...

00000141 <joystick_8>:
	...

00000142 <joystick_7>:
	...

00000143 <joystick_6>:
	...

00000144 <joystick_5>:
	...

00000145 <joystick_4>:
     145:	43 48 4f 53 45 4e 00                                CHOSEN.

0000014c <joystick_3>:
     14c:	4a 4f 59 53 54 49 43 4b 00                          JOYSTICK.

00000155 <joystick_2>:
	...

00000156 <joystick_1>:
	...

00000157 <controllerP_8>:
	...

00000158 <controllerP_7>:
	...

00000159 <controllerP_6>:
	...

0000015a <controllerP_5>:
	...

0000015b <controllerP_4>:
     15b:	3e 53 4c 49 44 45 52 3c 00                          >SLIDER<.

00000164 <controllerP_3>:
     164:	3e 4a 4f 59 53 54 49 43 4b 3c 00                    >JOYSTICK<.

0000016f <controllerP_2>:
	...

00000170 <controllerP_1>:
	...

00000171 <controller_8>:
	...

00000172 <controller_7>:
	...

00000173 <controller_6>:
	...

00000174 <controller_5>:
	...

00000175 <controller_4>:
     175:	53 4c 49 44 45 52 00                                SLIDER.

0000017c <controller_3>:
     17c:	4a 4f 59 53 54 49 43 4b 00                          JOYSTICK.

00000185 <controller_2>:
	...

00000186 <controller_1>:
     186:	43 4f 4e 54 52 4f 4c 4c 45 52 00                    CONTROLLER.

00000191 <p2_8>:
	...

00000192 <p2_7>:
	...

00000193 <p2_6>:
	...

00000194 <p2_5>:
	...

00000195 <p2_4>:
	...

00000196 <p2_3>:
     196:	48 45 52 45 00                                      HERE.

0000019b <p2_2>:
     19b:	49 4e 53 54 52 55 43 54 49 4f 4e 53 00              INSTRUCTIONS.

000001a8 <p2_1>:
	...

000001a9 <p1_8>:
	...

000001aa <p1_7>:
	...

000001ab <p1_6>:
     1ab:	42 55 54 54 4f 4e 20 53 54 41 52 54 00              BUTTON START.

000001b8 <p1_5>:
     1b8:	50 52 45 53 53 20 52 49 47 48 54 00                 PRESS RIGHT.

000001c4 <p1_4>:
     1c4:	4f 4e 20 53 4f 4c 4f 4e 4f 49 44 00                 ON SOLONOID.

000001d0 <p1_3>:
     1d0:	50 4c 41 43 45 20 42 41 4c 4c 00                    PLACE BALL.

000001db <p1_2>:
	...

000001dc <p1_1>:
	...

000001dd <mainP_8>:
	...

000001de <mainP_7>:
	...

000001df <mainP_6>:
     1df:	3e 43 41 4c 49 42 52 41 54 45 3c 00                 >CALIBRATE<.

000001eb <mainP_5>:
     1eb:	3e 43 4f 4e 54 52 4f 4c 4c 45 52 3c 00              >CONTROLLER<.

000001f8 <mainP_4>:
     1f8:	3e 32 50 4c 41 59 45 52 3c 00                       >2PLAYER<.

00000202 <mainP_3>:
     202:	3e 31 50 4c 41 59 45 52 3c 00                       >1PLAYER<.

0000020c <mainP_2>:
	...

0000020d <mainP_1>:
	...

0000020e <main_8>:
	...

0000020f <main_7>:
	...

00000210 <main_6>:
     210:	43 41 4c 49 42 52 41 54 45 00                       CALIBRATE.

0000021a <main_5>:
     21a:	43 4f 4e 54 52 4f 4c 4c 45 52 00                    CONTROLLER.

00000225 <main_4>:
     225:	32 50 4c 41 59 45 52 00                             2PLAYER.

0000022d <main_3>:
     22d:	31 50 4c 41 59 45 52 00                             1PLAYER.

00000235 <main_2>:
	...

00000236 <main_1>:
     236:	50 49 4e 47 50 4f 4e 47 00                          PINGPONG.

0000023f <font4>:
     23f:	00 00 00 00 00 5c 00 00 0c 00 0c 00 7c 28 7c 28     .....\......|(|(
     24f:	58 dc 68 00 24 10 48 00 28 54 28 40 00 0c 00 00     X.h.$.H.(T(@....
     25f:	00 78 84 00 84 78 00 00 54 38 54 00 10 7c 10 00     .x...x..T8T..|..
     26f:	80 40 00 00 10 10 10 00 00 40 00 00 60 10 0c 00     .@.......@..`...
     27f:	38 54 38 00 48 7c 40 00 48 64 58 00 44 54 2c 00     8T8.H|@.HdX.DT,.
     28f:	1c 10 7c 00 5c 54 24 00 38 54 24 00 64 14 0c 00     ..|.\T$.8T$.d...
     29f:	68 54 2c 00 48 54 38 00 00 48 00 00 80 48 00 00     hT,.HT8..H...H..
     2af:	10 28 44 00 28 28 28 00 44 28 10 00 04 54 08 00     .(D.(((.D(...T..
     2bf:	38 44 5c 00 78 14 78 00 7c 54 28 00 38 44 28 00     8D\.x.x.|T(.8D(.
     2cf:	7c 44 38 00 7c 54 44 00 7c 14 04 00 38 44 74 00     |D8.|TD.|...8Dt.
     2df:	7c 10 7c 00 44 7c 44 00 20 40 3c 00 7c 10 6c 00     |.|.D|D. @<.|.l.
     2ef:	7c 40 40 00 7c 18 7c 00 78 10 3c 00 38 44 38 00     |@@.|.|.x.<.8D8.
     2ff:	7c 14 08 00 38 44 b8 00 7c 14 68 00 48 54 24 00     |...8D..|.h.HT$.
     30f:	04 7c 04 00 7c 40 7c 00 3c 60 3c 00 7c 30 7c 00     .|..|@|.<`<.|0|.
     31f:	6c 10 6c 00 0c 70 0c 00 64 54 4c 00 00 7c 44 00     l.l..p..dTL..|D.
     32f:	0c 10 60 00 44 7c 00 00 08 04 08 00 80 80 80 00     ..`.D|..........
     33f:	00 04 08 00 30 48 78 00 7c 48 30 00 30 48 48 00     ....0Hx.|H0.0HH.
     34f:	30 48 7c 00 30 68 50 00 10 78 14 00 90 a8 78 00     0H|.0hP..x....x.
     35f:	7c 08 70 00 50 74 40 00 80 80 74 00 7c 10 68 00     |.p.Pt@...t.|.h.
     36f:	44 7c 40 00 78 10 78 00 78 08 70 00 30 48 30 00     D|@.x.x.x.p.0H0.
     37f:	f8 28 10 00 30 48 f8 00 78 10 08 00 50 58 28 00     .(..0H..x...PX(.
     38f:	08 3c 48 00 38 40 78 00 38 40 38 00 78 20 78 00     .<H.8@x.8@8.x x.
     39f:	48 30 48 00 98 a0 78 00 48 68 58 00 10 78 84 00     H0H...x.HhX..x..
     3af:	00 7c 00 00 84 78 10 00 08 04 08 04                 .|...x......

000003bb <font6>:
	...
     3c3:	5f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14 00     _...............
     3d3:	24 2a 7f 2a 12 00 23 13 08 64 62 00 36 49 55 22     $*.*..#..db.6IU"
     3e3:	50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00 41     P........."A...A
     3f3:	22 1c 00 00 08 2a 1c 2a 08 00 08 08 3e 08 08 00     "....*.*....>...
     403:	00 50 30 00 00 00 08 08 08 08 08 00 00 60 60 00     .P0..........``.
     413:	00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00 42     .. .....>QIE>..B
     423:	7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31 00     .@..BaQIF.!AEK1.
     433:	18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49 49     ......'EEE9.<JII
     443:	30 00 01 71 09 05 03 00 36 49 49 49 36 00 06 49     0..q....6III6..I
     453:	49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00 00     I)...66....V6...
     463:	08 1c 2a 08 08 00 14 14 14 14 14 00 08 08 2a 1c     ..*...........*.
     473:	08 00 02 01 51 09 06 00 32 49 79 41 3e 00 7e 11     ....Q...2IyA>.~.
     483:	11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22 00     ..~..III6.>AAA".
     493:	7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09 01     .AA"...IIIA.....
     4a3:	01 00 3e 41 41 51 32 00 7f 08 08 08 7f 00 00 41     ..>AAQ2........A
     4b3:	7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41 00     .A.. @A?....."A.
     4c3:	7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 04 08 10     .@@@@...........
     4d3:	7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e 41     ..>AAA>.......>A
     4e3:	51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31 00     Q!^....)F.FIII1.
     4f3:	01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40 20     ......?@@@?.. @ 
     503:	1f 00 7f 20 18 20 7f 00 63 14 08 14 63 00 03 04     ... . ..c...c...
     513:	78 04 03 00 61 51 49 45 43 00 00 00 7f 41 41 00     x...aQIEC....AA.
     523:	02 04 08 10 20 00 41 41 7f 00 00 00 04 02 01 02     .... .AA........
     533:	04 00 40 40 40 40 40 00 00 01 02 04 00 00 20 54     ..@@@@@....... T
     543:	54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20 00     TTx..HDD8.8DDD .
     553:	38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09 01     8DDH..8TTT...~..
     563:	02 00 08 14 54 54 3c 00 7f 08 04 04 78 00 00 44     ....TT<.....x..D
     573:	7d 40 00 00 20 40 44 3d 00 00 00 7f 10 28 44 00     }@.. @D=.....(D.
     583:	00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04 04     .A.@..|...x.|...
     593:	78 00 38 44 44 44 38 00 7c 14 14 14 08 00 08 14     x.8DDD8.|.......
     5a3:	14 18 7c 00 7c 08 04 04 08 00 48 54 54 54 20 00     ..|.|.....HTTT .
     5b3:	04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40 20     .?D@ .<@@ |.. @ 
     5c3:	1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 0c 50     ..<@0@<.D(.(D..P
     5d3:	50 50 3c 00 44 64 54 4c 44 00 00 08 36 41 00 00     PP<.DdTLD...6A..
     5e3:	00 00 7f 00 00 00 00 41 36 08 00 00 02 01 03 02     .......A6.......
     5f3:	01 00                                               ..

000005f5 <font8>:
	...
     5fd:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     60d:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     61d:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     62d:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     63d:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     64d:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     65d:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     66d:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     67d:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     68d:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     69d:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     6ad:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     6bd:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     6cd:	00 a0 ec 6c 00 00 00 00 18 24 42 99 24 42 81 00     ...l.....$B.$B..
     6dd:	14 14 14 14 14 14 00 00 81 42 24 99 42 24 18 00     .........B$.B$..
     6ed:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     6fd:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     70d:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     71d:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     72d:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     73d:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     74d:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     75d:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     76d:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     77d:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     78d:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     79d:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     7ad:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     7bd:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     7cd:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     7dd:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     7ed:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     7fd:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     80d:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     81d:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     82d:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     83d:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     84d:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     85d:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     86d:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     87d:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     88d:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     89d:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     8ad:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     8bd:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     8cd:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     8dd:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000008ee <__ctors_end>:
     8ee:	11 24       	eor	r1, r1
     8f0:	1f be       	out	0x3f, r1	; 63
     8f2:	cf ef       	ldi	r28, 0xFF	; 255
     8f4:	d4 e0       	ldi	r29, 0x04	; 4
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	cd bf       	out	0x3d, r28	; 61

000008fa <__do_copy_data>:
     8fa:	12 e0       	ldi	r17, 0x02	; 2
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b1 e0       	ldi	r27, 0x01	; 1
     900:	e2 ed       	ldi	r30, 0xD2	; 210
     902:	f6 e2       	ldi	r31, 0x26	; 38
     904:	02 c0       	rjmp	.+4      	; 0x90a <__do_copy_data+0x10>
     906:	05 90       	lpm	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	a2 35       	cpi	r26, 0x52	; 82
     90c:	b1 07       	cpc	r27, r17
     90e:	d9 f7       	brne	.-10     	; 0x906 <__do_copy_data+0xc>

00000910 <__do_clear_bss>:
     910:	22 e0       	ldi	r18, 0x02	; 2
     912:	a2 e5       	ldi	r26, 0x52	; 82
     914:	b2 e0       	ldi	r27, 0x02	; 2
     916:	01 c0       	rjmp	.+2      	; 0x91a <.do_clear_bss_start>

00000918 <.do_clear_bss_loop>:
     918:	1d 92       	st	X+, r1

0000091a <.do_clear_bss_start>:
     91a:	af 36       	cpi	r26, 0x6F	; 111
     91c:	b2 07       	cpc	r27, r18
     91e:	e1 f7       	brne	.-8      	; 0x918 <.do_clear_bss_loop>
     920:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <main>
     924:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <_exit>

00000928 <__bad_interrupt>:
     928:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000092c <clock_init>:
     92c:	8c 9a       	sbi	0x11, 4	; 17
     92e:	f8 94       	cli
     930:	eb e8       	ldi	r30, 0x8B	; 139
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	80 64       	ori	r24, 0x40	; 64
     938:	80 83       	st	Z, r24
     93a:	ea e8       	ldi	r30, 0x8A	; 138
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	81 60       	ori	r24, 0x01	; 1
     942:	80 83       	st	Z, r24
     944:	80 81       	ld	r24, Z
     946:	88 60       	ori	r24, 0x08	; 8
     948:	80 83       	st	Z, r24
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     952:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     956:	78 94       	sei
     958:	08 95       	ret

0000095a <adc_init>:
     95a:	0e 94 96 04 	call	0x92c	; 0x92c <clock_init>
     95e:	08 95       	ret

00000960 <adc_read>:
     960:	cf 93       	push	r28
     962:	c8 2f       	mov	r28, r24
     964:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <xmem_init>
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	74 e0       	ldi	r23, 0x04	; 4
     96c:	8c 2f       	mov	r24, r28
     96e:	80 68       	ori	r24, 0x80	; 128
     970:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xmem_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	80 e1       	ldi	r24, 0x10	; 16
     976:	8a 95       	dec	r24
     978:	f1 f7       	brne	.-4      	; 0x976 <adc_read+0x16>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <adc_read+0x1c>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <xmem_read>
     984:	90 e1       	ldi	r25, 0x10	; 16
     986:	9a 95       	dec	r25
     988:	f1 f7       	brne	.-4      	; 0x986 <adc_read+0x26>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <adc_read+0x2c>
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <can_init>:
		printf("Message data: %x", p1->id);
		
		mcp_bit_modify(MCP_CANINTF, 0x02, 0);
	}
	
}
     992:	0e 94 76 0d 	call	0x1aec	; 0x1aec <mcp_init>
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	88 e2       	ldi	r24, 0x28	; 40
     99a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     99e:	65 eb       	ldi	r22, 0xB5	; 181
     9a0:	89 e2       	ldi	r24, 0x29	; 41
     9a2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     9a6:	63 e4       	ldi	r22, 0x43	; 67
     9a8:	8a e2       	ldi	r24, 0x2A	; 42
     9aa:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	8f e0       	ldi	r24, 0x0F	; 15
     9b2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     9b6:	f8 94       	cli
     9b8:	85 b7       	in	r24, 0x35	; 53
     9ba:	82 60       	ori	r24, 0x02	; 2
     9bc:	85 bf       	out	0x35, r24	; 53
     9be:	85 b7       	in	r24, 0x35	; 53
     9c0:	8e 7f       	andi	r24, 0xFE	; 254
     9c2:	85 bf       	out	0x35, r24	; 53
     9c4:	8b b7       	in	r24, 0x3b	; 59
     9c6:	80 64       	ori	r24, 0x40	; 64
     9c8:	8b bf       	out	0x3b, r24	; 59
     9ca:	78 94       	sei
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	8b e2       	ldi	r24, 0x2B	; 43
     9d0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     9d4:	08 95       	ret

000009d6 <can_send_message>:
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	ec 01       	movw	r28, r24
     9e2:	08 81       	ld	r16, Y
     9e4:	19 81       	ldd	r17, Y+1	; 0x01
     9e6:	b8 01       	movw	r22, r16
     9e8:	76 95       	lsr	r23
     9ea:	67 95       	ror	r22
     9ec:	76 95       	lsr	r23
     9ee:	67 95       	ror	r22
     9f0:	76 95       	lsr	r23
     9f2:	67 95       	ror	r22
     9f4:	81 e3       	ldi	r24, 0x31	; 49
     9f6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     9fa:	60 2f       	mov	r22, r16
     9fc:	62 95       	swap	r22
     9fe:	66 0f       	add	r22, r22
     a00:	60 7e       	andi	r22, 0xE0	; 224
     a02:	82 e3       	ldi	r24, 0x32	; 50
     a04:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     a08:	fa 80       	ldd	r15, Y+2	; 0x02
     a0a:	6f 2d       	mov	r22, r15
     a0c:	6f 70       	andi	r22, 0x0F	; 15
     a0e:	85 e3       	ldi	r24, 0x35	; 53
     a10:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     a14:	ff 20       	and	r15, r15
     a16:	79 f0       	breq	.+30     	; 0xa36 <can_send_message+0x60>
     a18:	8e 01       	movw	r16, r28
     a1a:	0d 5f       	subi	r16, 0xFD	; 253
     a1c:	1f 4f       	sbci	r17, 0xFF	; 255
     a1e:	d6 e3       	ldi	r29, 0x36	; 54
     a20:	df 0d       	add	r29, r15
     a22:	c6 e3       	ldi	r28, 0x36	; 54
     a24:	f8 01       	movw	r30, r16
     a26:	61 91       	ld	r22, Z+
     a28:	8f 01       	movw	r16, r30
     a2a:	8c 2f       	mov	r24, r28
     a2c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <mcp_write>
     a30:	cf 5f       	subi	r28, 0xFF	; 255
     a32:	cd 13       	cpse	r28, r29
     a34:	f7 cf       	rjmp	.-18     	; 0xa24 <can_send_message+0x4e>
     a36:	81 e8       	ldi	r24, 0x81	; 129
     a38:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <mcp_req_to_send>
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	08 95       	ret

00000a48 <__vector_1>:




ISR(INT0_vect){ //Interrupt handler for IR-goal signal CAN message from node 2 
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	CAN_flag = 1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__data_end>
	printf("CAN INTERRUPT \t");
     a70:	87 e5       	ldi	r24, 0x57	; 87
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
	
	mcp_bit_modify(MCP_CANINTF, 0x01, 0);
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	8c e2       	ldi	r24, 0x2C	; 44
     a82:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <mcp_bit_modify>
	mcp_bit_modify(MCP_CANINTF, 0x01, 0); //Må skrive to ganger. MCP må få det inn med teskje. 
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	8c e2       	ldi	r24, 0x2C	; 44
     a8c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <mcp_bit_modify>
	
	uint8_t test2 = mcp_read(MCP_CANSTAT);
     a90:	8e e0       	ldi	r24, 0x0E	; 14
     a92:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <mcp_read>
	uint8_t mask1 = 0xf0;
	uint8_t mask2 = 0x0f;
	uint8_t test1 = test2 & mask1;
	test2 = test2 & mask2;
	printf("OPMODE: %d \t ICOD: %d \n\r", test1, test2);
     a96:	98 2f       	mov	r25, r24
     a98:	9f 70       	andi	r25, 0x0F	; 15
     a9a:	1f 92       	push	r1
     a9c:	9f 93       	push	r25
     a9e:	80 7f       	andi	r24, 0xF0	; 240
     aa0:	1f 92       	push	r1
     aa2:	8f 93       	push	r24
     aa4:	87 e6       	ldi	r24, 0x67	; 103
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	9f 93       	push	r25
     aaa:	8f 93       	push	r24
     aac:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
	
	
}
     ab0:	8d b7       	in	r24, 0x3d	; 61
     ab2:	9e b7       	in	r25, 0x3e	; 62
     ab4:	08 96       	adiw	r24, 0x08	; 8
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	9e bf       	out	0x3e, r25	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	8d bf       	out	0x3d, r24	; 61
     ac0:	ff 91       	pop	r31
     ac2:	ef 91       	pop	r30
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	7f 91       	pop	r23
     ace:	6f 91       	pop	r22
     ad0:	5f 91       	pop	r21
     ad2:	4f 91       	pop	r20
     ad4:	3f 91       	pop	r19
     ad6:	2f 91       	pop	r18
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	0f 90       	pop	r0
     ade:	1f 90       	pop	r1
     ae0:	18 95       	reti

00000ae2 <joystick_calibrate>:


volatile uint8_t x_offset;
volatile uint8_t y_offset;

void joystick_calibrate(){
     ae2:	cf 92       	push	r12
     ae4:	df 92       	push	r13
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	c0 59       	subi	r28, 0x90	; 144
     af8:	d1 40       	sbci	r29, 0x01	; 1
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	8e 01       	movw	r16, r28
     b06:	07 53       	subi	r16, 0x37	; 55
     b08:	1f 4f       	sbci	r17, 0xFF	; 255
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	7c 01       	movw	r14, r24
     b10:	6e 01       	movw	r12, r28
     b12:	9f e6       	ldi	r25, 0x6F	; 111
     b14:	c9 1a       	sub	r12, r25
     b16:	9e ef       	ldi	r25, 0xFE	; 254
     b18:	d9 0a       	sbc	r13, r25
	int n=100,arrx[n],arry[n];
	for(int i = 0;i < n;i++) {
		arrx[i]=adc_read(1);
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 b0 04 	call	0x960	; 0x960 <adc_read>
     b22:	f8 01       	movw	r30, r16
     b24:	81 93       	st	Z+, r24
     b26:	91 93       	st	Z+, r25
     b28:	8f 01       	movw	r16, r30
		arry[i]=adc_read(0);
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 b0 04 	call	0x960	; 0x960 <adc_read>
     b32:	f7 01       	movw	r30, r14
     b34:	81 93       	st	Z+, r24
     b36:	91 93       	st	Z+, r25
     b38:	7f 01       	movw	r14, r30
volatile uint8_t x_offset;
volatile uint8_t y_offset;

void joystick_calibrate(){
	int n=100,arrx[n],arry[n];
	for(int i = 0;i < n;i++) {
     b3a:	0c 15       	cp	r16, r12
     b3c:	1d 05       	cpc	r17, r13
     b3e:	69 f7       	brne	.-38     	; 0xb1a <joystick_calibrate+0x38>
		arrx[i]=adc_read(1);
		arry[i]=adc_read(0);
	}
	
	x_offset = util_median(arrx,n);
     b40:	64 e6       	ldi	r22, 0x64	; 100
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	ce 01       	movw	r24, r28
     b46:	87 53       	subi	r24, 0x37	; 55
     b48:	9f 4f       	sbci	r25, 0xFF	; 255
     b4a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <util_median>
     b4e:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <x_offset>
	y_offset = util_median(arry,n);
     b52:	64 e6       	ldi	r22, 0x64	; 100
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <util_median>
     b5e:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <y_offset>
}
     b62:	c0 57       	subi	r28, 0x70	; 112
     b64:	de 4f       	sbci	r29, 0xFE	; 254
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	08 95       	ret

00000b82 <joystick_getPosition>:

joystick_position joystick_getPosition(void){
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
	joystick_position position;
	uint8_t x = adc_read(1);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 b0 04 	call	0x960	; 0x960 <adc_read>
     b90:	ec 01       	movw	r28, r24
	uint8_t y = adc_read(0);
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 b0 04 	call	0x960	; 0x960 <adc_read>
     b9a:	9c 01       	movw	r18, r24
     b9c:	48 2f       	mov	r20, r24

	if(x > x_offset){
     b9e:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <x_offset>
     ba2:	8c 17       	cp	r24, r28
     ba4:	a8 f4       	brcc	.+42     	; 0xbd0 <joystick_getPosition+0x4e>
		position.x_pos = (int8_t)100*(x-x_offset)/(0xFF - x_offset);
     ba6:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <x_offset>
     baa:	50 91 5e 02 	lds	r21, 0x025E	; 0x80025e <x_offset>
     bae:	dd 27       	eor	r29, r29
     bb0:	c8 1b       	sub	r28, r24
     bb2:	d1 09       	sbc	r29, r1
     bb4:	64 e6       	ldi	r22, 0x64	; 100
     bb6:	6c 9f       	mul	r22, r28
     bb8:	c0 01       	movw	r24, r0
     bba:	6d 9f       	mul	r22, r29
     bbc:	90 0d       	add	r25, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	6f ef       	ldi	r22, 0xFF	; 255
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	65 1b       	sub	r22, r21
     bc6:	71 09       	sbc	r23, r1
     bc8:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divmodhi4>
     bcc:	fb 01       	movw	r30, r22
     bce:	18 c0       	rjmp	.+48     	; 0xc00 <joystick_getPosition+0x7e>
	}
	else if (x < x_offset){
     bd0:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <x_offset>
     bd4:	c8 17       	cp	r28, r24
     bd6:	90 f4       	brcc	.+36     	; 0xbfc <joystick_getPosition+0x7a>
		position.x_pos = 100*(x-x_offset)/(x_offset - 0);
     bd8:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <x_offset>
     bdc:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <x_offset>
     be0:	dd 27       	eor	r29, r29
     be2:	c8 1b       	sub	r28, r24
     be4:	d1 09       	sbc	r29, r1
     be6:	54 e6       	ldi	r21, 0x64	; 100
     be8:	5c 9f       	mul	r21, r28
     bea:	c0 01       	movw	r24, r0
     bec:	5d 9f       	mul	r21, r29
     bee:	90 0d       	add	r25, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divmodhi4>
     bf8:	fb 01       	movw	r30, r22
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <joystick_getPosition+0x7e>
	}
	else {
		position.x_pos = 0;
     bfc:	e0 e0       	ldi	r30, 0x00	; 0
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
	}

	if(y > y_offset){
     c00:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <y_offset>
     c04:	84 17       	cp	r24, r20
     c06:	a8 f4       	brcc	.+42     	; 0xc32 <joystick_getPosition+0xb0>
		position.y_pos = 100*(y-y_offset)/(0xFF - y_offset);
     c08:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <y_offset>
     c0c:	40 91 5d 02 	lds	r20, 0x025D	; 0x80025d <y_offset>
     c10:	33 27       	eor	r19, r19
     c12:	28 1b       	sub	r18, r24
     c14:	31 09       	sbc	r19, r1
     c16:	54 e6       	ldi	r21, 0x64	; 100
     c18:	52 9f       	mul	r21, r18
     c1a:	c0 01       	movw	r24, r0
     c1c:	53 9f       	mul	r21, r19
     c1e:	90 0d       	add	r25, r0
     c20:	11 24       	eor	r1, r1
     c22:	6f ef       	ldi	r22, 0xFF	; 255
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	64 1b       	sub	r22, r20
     c28:	71 09       	sbc	r23, r1
     c2a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divmodhi4>
     c2e:	9b 01       	movw	r18, r22
     c30:	18 c0       	rjmp	.+48     	; 0xc62 <joystick_getPosition+0xe0>
	}
	else if (y < y_offset){
     c32:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <y_offset>
     c36:	48 17       	cp	r20, r24
     c38:	90 f4       	brcc	.+36     	; 0xc5e <joystick_getPosition+0xdc>
		position.y_pos = 100*(y-y_offset)/(y_offset - 0);
     c3a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <y_offset>
     c3e:	60 91 5d 02 	lds	r22, 0x025D	; 0x80025d <y_offset>
     c42:	33 27       	eor	r19, r19
     c44:	28 1b       	sub	r18, r24
     c46:	31 09       	sbc	r19, r1
     c48:	44 e6       	ldi	r20, 0x64	; 100
     c4a:	42 9f       	mul	r20, r18
     c4c:	c0 01       	movw	r24, r0
     c4e:	43 9f       	mul	r20, r19
     c50:	90 0d       	add	r25, r0
     c52:	11 24       	eor	r1, r1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divmodhi4>
     c5a:	9b 01       	movw	r18, r22
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <joystick_getPosition+0xe0>
	}
	else {
		position.y_pos = 0;
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	return position;
     c62:	bf 01       	movw	r22, r30
     c64:	c9 01       	movw	r24, r18
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	08 95       	ret

00000c6e <joystick_getDirection>:

joystick_direction joystick_getDirection(void){
	//enums LEFT = 0, RIGHT = 1, DOWN = 2, UP = 3, NEUTRAL = 4
	joystick_position position;

	position = joystick_getPosition();
     c6e:	0e 94 c1 05 	call	0xb82	; 0xb82 <joystick_getPosition>
	
	if(position.x_pos < -50){
     c72:	6e 3c       	cpi	r22, 0xCE	; 206
     c74:	ef ef       	ldi	r30, 0xFF	; 255
     c76:	7e 07       	cpc	r23, r30
     c78:	84 f0       	brlt	.+32     	; 0xc9a <joystick_getDirection+0x2c>
		return LEFT;
	}
	else if(position.x_pos > 50){
     c7a:	63 33       	cpi	r22, 0x33	; 51
     c7c:	71 05       	cpc	r23, r1
     c7e:	7c f4       	brge	.+30     	; 0xc9e <joystick_getDirection+0x30>
		return RIGHT;
	}

	if(position.y_pos < -50){
     c80:	8e 3c       	cpi	r24, 0xCE	; 206
     c82:	2f ef       	ldi	r18, 0xFF	; 255
     c84:	92 07       	cpc	r25, r18
     c86:	6c f0       	brlt	.+26     	; 0xca2 <joystick_getDirection+0x34>
		return DOWN;
	}
	else if(position.y_pos > 50){
     c88:	c3 97       	sbiw	r24, 0x33	; 51
     c8a:	6c f4       	brge	.+26     	; 0xca6 <joystick_getDirection+0x38>
		return UP;
	}
	
	if(position.x_pos <= 50 && position.x_pos >= -50 && position.y_pos <= 50 && position.y_pos >= -50){
     c8c:	6e 5c       	subi	r22, 0xCE	; 206
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	65 36       	cpi	r22, 0x65	; 101
     c92:	71 05       	cpc	r23, r1
     c94:	50 f0       	brcs	.+20     	; 0xcaa <joystick_getDirection+0x3c>
		return NEUTRAL;
	}
	return 0;
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	08 95       	ret
	joystick_position position;

	position = joystick_getPosition();
	
	if(position.x_pos < -50){
		return LEFT;
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	08 95       	ret
	}
	else if(position.x_pos > 50){
		return RIGHT;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	08 95       	ret
	}

	if(position.y_pos < -50){
		return DOWN;
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	08 95       	ret
	}
	else if(position.y_pos > 50){
		return UP;
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	08 95       	ret
	}
	
	if(position.x_pos <= 50 && position.x_pos >= -50 && position.y_pos <= 50 && position.y_pos >= -50){
		return NEUTRAL;
     caa:	84 e0       	ldi	r24, 0x04	; 4
	}
	return 0;
}
     cac:	08 95       	ret

00000cae <joystick_sendPositionButtonCan>:

void joystick_sendPositionButtonCan(joystick_position pos){
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	2b 97       	sbiw	r28, 0x0b	; 11
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	msg.id=1;
     cc2:	21 e0       	ldi	r18, 0x01	; 1
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3a 83       	std	Y+2, r19	; 0x02
     cc8:	29 83       	std	Y+1, r18	; 0x01
	msg.length=3;
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	9b 83       	std	Y+3, r25	; 0x03
	//joy_pos
	msg.data[0] = (char)pos.x_pos;
     cce:	6c 83       	std	Y+4, r22	; 0x04
	msg.data[1] = (char)pos.y_pos;
     cd0:	8d 83       	std	Y+5, r24	; 0x05
	
	//button
	msg.data[2]=(char)(PINB & (1<<0));//leser fra logisk verdi fra PB1
     cd2:	86 b3       	in	r24, 0x16	; 22
     cd4:	81 70       	andi	r24, 0x01	; 1
     cd6:	8e 83       	std	Y+6, r24	; 0x06
	printf("Button value: %d \n\r", msg.data[2]);
     cd8:	1f 92       	push	r1
     cda:	8f 93       	push	r24
     cdc:	80 e8       	ldi	r24, 0x80	; 128
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
     ce4:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
	
	
	can_send_message(&msg);
     ce8:	ce 01       	movw	r24, r28
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <can_send_message>
	//enums LEFT = 0, RIGHT = 1, DOWN = 2, UP = 3, NEUTRAL = 4

     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	2b 96       	adiw	r28, 0x0b	; 11
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <f_2player>:
			}
		break;
	}	
}

void f_2player(){
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	60 97       	sbiw	r28, 0x10	; 16
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
	oled_reset();
     d24:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <oled_reset>
     d28:	0f 2e       	mov	r0, r31
     d2a:	f0 ea       	ldi	r31, 0xA0	; 160
     d2c:	ef 2e       	mov	r14, r31
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	ff 2e       	mov	r15, r31
     d32:	f0 2d       	mov	r31, r0
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     d34:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_page(i);
     d36:	81 2f       	mov	r24, r17
     d38:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_p2]));
     d3c:	f7 01       	movw	r30, r14
     d3e:	65 91       	lpm	r22, Z+
     d40:	74 91       	lpm	r23, Z
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
		oled_center_print(buffer,8);
     d4a:	68 e0       	ldi	r22, 0x08	; 8
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
}

void f_2player(){
	oled_reset();
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     d56:	1f 5f       	subi	r17, 0xFF	; 255
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	e8 0e       	add	r14, r24
     d5c:	f1 1c       	adc	r15, r1
     d5e:	18 30       	cpi	r17, 0x08	; 8
     d60:	51 f7       	brne	.-44     	; 0xd36 <f_2player+0x2c>
		oled_goto_page(i);
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_p2]));
		oled_center_print(buffer,8);
	}
}
     d62:	60 96       	adiw	r28, 0x10	; 16
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	08 95       	ret

00000d7a <f_controller>:

void f_controller(){
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	60 97       	sbiw	r28, 0x10	; 16
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
	oled_reset();
     d94:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <oled_reset>
     d98:	0f 2e       	mov	r0, r31
     d9a:	f0 eb       	ldi	r31, 0xB0	; 176
     d9c:	ef 2e       	mov	r14, r31
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	ff 2e       	mov	r15, r31
     da2:	f0 2d       	mov	r31, r0
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     da4:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_page(i);
     da6:	81 2f       	mov	r24, r17
     da8:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_controller]));
     dac:	f7 01       	movw	r30, r14
     dae:	65 91       	lpm	r22, Z+
     db0:	74 91       	lpm	r23, Z
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
		oled_center_print(buffer,8);
     dba:	68 e0       	ldi	r22, 0x08	; 8
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
}

void f_controller(){
	oled_reset();
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     dc6:	1f 5f       	subi	r17, 0xFF	; 255
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	e8 0e       	add	r14, r24
     dcc:	f1 1c       	adc	r15, r1
     dce:	18 30       	cpi	r17, 0x08	; 8
     dd0:	51 f7       	brne	.-44     	; 0xda6 <f_controller+0x2c>
		oled_goto_page(i);
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_controller]));
		oled_center_print(buffer,8);
	}
		oled_goto_page(header_pages);
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[s_controllerP+header_pages]));
     dd8:	e4 ec       	ldi	r30, 0xC4	; 196
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	65 91       	lpm	r22, Z+
     dde:	74 91       	lpm	r23, Z
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
		oled_center_print(buffer,8);
     de8:	68 e0       	ldi	r22, 0x08	; 8
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	ce 01       	movw	r24, r28
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>

}
     df4:	60 96       	adiw	r28, 0x10	; 16
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	08 95       	ret

00000e0c <f_1player>:
	
	return new_submenu;
}


void f_1player(){
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	6b 97       	sbiw	r28, 0x1b	; 27
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
	oled_reset();
     e20:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <oled_reset>
     e24:	0f 2e       	mov	r0, r31
     e26:	f0 e9       	ldi	r31, 0x90	; 144
     e28:	ef 2e       	mov	r14, r31
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	ff 2e       	mov	r15, r31
     e2e:	f0 2d       	mov	r31, r0
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     e30:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_page(i);
     e32:	81 2f       	mov	r24, r17
     e34:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_p1]));
     e38:	f7 01       	movw	r30, r14
     e3a:	65 91       	lpm	r22, Z+
     e3c:	74 91       	lpm	r23, Z
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
		oled_center_print(buffer,8);	
     e46:	68 e0       	ldi	r22, 0x08	; 8
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	ce 01       	movw	r24, r28
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>


void f_1player(){
	oled_reset();
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     e52:	1f 5f       	subi	r17, 0xFF	; 255
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	e8 0e       	add	r14, r24
     e58:	f1 1c       	adc	r15, r1
     e5a:	18 30       	cpi	r17, 0x08	; 8
     e5c:	51 f7       	brne	.-44     	; 0xe32 <f_1player+0x26>
		oled_goto_page(i);
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_p1]));
		oled_center_print(buffer,8);	
	}
	while(!(PINB & (1<<0))){ //
     e5e:	b0 9b       	sbis	0x16, 0	; 22
     e60:	fe cf       	rjmp	.-4      	; 0xe5e <f_1player+0x52>
	}
		can_message msg;
		msg.id=1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9a 8b       	std	Y+18, r25	; 0x12
     e68:	89 8b       	std	Y+17, r24	; 0x11
		msg.length=3;
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	8b 8b       	std	Y+19, r24	; 0x13
		msg.data[2]=(char)(PINB & (1<<0));
     e6e:	86 b3       	in	r24, 0x16	; 22
     e70:	81 70       	andi	r24, 0x01	; 1
     e72:	8e 8b       	std	Y+22, r24	; 0x16
		can_send_message(&msg);
     e74:	ce 01       	movw	r24, r28
     e76:	41 96       	adiw	r24, 0x11	; 17
     e78:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <can_send_message>
		
		//start timer
	
					printf("JOYSTIadasdasasdT");		
     e7c:	84 e9       	ldi	r24, 0x94	; 148
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
	switch(ctrl){
		case JOYSTICK:

		//starter counter
			while (1){ //stopper n?r snor treffes			
				joystick_sendPositionButtonCan(joystick_getPosition());
     e8c:	0e 94 c1 05 	call	0xb82	; 0xb82 <joystick_getPosition>
     e90:	0e 94 57 06 	call	0xcae	; 0xcae <joystick_sendPositionButtonCan>
     e94:	fb cf       	rjmp	.-10     	; 0xe8c <f_1player+0x80>

00000e96 <f_joystick>:
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[s_controllerP+header_pages]));
		oled_center_print(buffer,8);

}

void f_joystick(){
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	60 97       	sbiw	r28, 0x10	; 16
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
	oled_reset();
     eb0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <oled_reset>
     eb4:	0f 2e       	mov	r0, r31
     eb6:	f0 ed       	ldi	r31, 0xD0	; 208
     eb8:	ef 2e       	mov	r14, r31
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	ff 2e       	mov	r15, r31
     ebe:	f0 2d       	mov	r31, r0
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     ec0:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_page(i);
     ec2:	81 2f       	mov	r24, r17
     ec4:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_joystick]));
     ec8:	f7 01       	movw	r30, r14
     eca:	65 91       	lpm	r22, Z+
     ecc:	74 91       	lpm	r23, Z
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
		oled_center_print(buffer,8);
     ed6:	68 e0       	ldi	r22, 0x08	; 8
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
}

void f_joystick(){
	oled_reset();
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     ee2:	1f 5f       	subi	r17, 0xFF	; 255
     ee4:	22 e0       	ldi	r18, 0x02	; 2
     ee6:	e2 0e       	add	r14, r18
     ee8:	f1 1c       	adc	r15, r1
     eea:	18 30       	cpi	r17, 0x08	; 8
     eec:	51 f7       	brne	.-44     	; 0xec2 <f_joystick+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	93 ed       	ldi	r25, 0xD3	; 211
     ef2:	20 e3       	ldi	r18, 0x30	; 48
     ef4:	81 50       	subi	r24, 0x01	; 1
     ef6:	90 40       	sbci	r25, 0x00	; 0
     ef8:	20 40       	sbci	r18, 0x00	; 0
     efa:	e1 f7       	brne	.-8      	; 0xef4 <f_joystick+0x5e>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <f_joystick+0x68>
     efe:	00 00       	nop
		oled_center_print(buffer,8);
	}
	controller ctrl = JOYSTICK;
	_delay_ms(1000);
	
	curr_menu=main_menu;
     f00:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <main_menu>
     f04:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <main_menu+0x1>
     f08:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <curr_menu+0x1>
     f0c:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <curr_menu>
	pos_child=0;
     f10:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <pos_child+0x1>
     f14:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <pos_child>
	(*curr_menu->function)(main_menu->name);
     f18:	12 96       	adiw	r26, 0x02	; 2
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	13 97       	sbiw	r26, 0x03	; 3
     f20:	1a 96       	adiw	r26, 0x0a	; 10
     f22:	8d 91       	ld	r24, X+
     f24:	9c 91       	ld	r25, X
     f26:	1b 97       	sbiw	r26, 0x0b	; 11
     f28:	09 95       	icall
		
	
}
     f2a:	60 96       	adiw	r28, 0x10	; 16
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	08 95       	ret

00000f42 <f_slider>:
void f_slider(){
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	60 97       	sbiw	r28, 0x10	; 16
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
	oled_reset();
     f5c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <oled_reset>
     f60:	0f 2e       	mov	r0, r31
     f62:	f0 ee       	ldi	r31, 0xE0	; 224
     f64:	ef 2e       	mov	r14, r31
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	ff 2e       	mov	r15, r31
     f6a:	f0 2d       	mov	r31, r0
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     f6c:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_page(i);
     f6e:	81 2f       	mov	r24, r17
     f70:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_slider]));
     f74:	f7 01       	movw	r30, r14
     f76:	65 91       	lpm	r22, Z+
     f78:	74 91       	lpm	r23, Z
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
		oled_center_print(buffer,8);
     f82:	68 e0       	ldi	r22, 0x08	; 8
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
	
}
void f_slider(){
	oled_reset();
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
     f8e:	1f 5f       	subi	r17, 0xFF	; 255
     f90:	22 e0       	ldi	r18, 0x02	; 2
     f92:	e2 0e       	add	r14, r18
     f94:	f1 1c       	adc	r15, r1
     f96:	18 30       	cpi	r17, 0x08	; 8
     f98:	51 f7       	brne	.-44     	; 0xf6e <f_slider+0x2c>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	93 ed       	ldi	r25, 0xD3	; 211
     f9e:	20 e3       	ldi	r18, 0x30	; 48
     fa0:	81 50       	subi	r24, 0x01	; 1
     fa2:	90 40       	sbci	r25, 0x00	; 0
     fa4:	20 40       	sbci	r18, 0x00	; 0
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <f_slider+0x5e>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <f_slider+0x68>
     faa:	00 00       	nop
		oled_center_print(buffer,8);
	}
	controller ctrl = SLIDER;
	_delay_ms(1000);
	
	curr_menu=main_menu;
     fac:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <main_menu>
     fb0:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <main_menu+0x1>
     fb4:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <curr_menu+0x1>
     fb8:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <curr_menu>
	pos_child=0;
     fbc:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <pos_child+0x1>
     fc0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <pos_child>
	(*curr_menu->function)(main_menu->name);
     fc4:	12 96       	adiw	r26, 0x02	; 2
     fc6:	ed 91       	ld	r30, X+
     fc8:	fc 91       	ld	r31, X
     fca:	13 97       	sbiw	r26, 0x03	; 3
     fcc:	1a 96       	adiw	r26, 0x0a	; 10
     fce:	8d 91       	ld	r24, X+
     fd0:	9c 91       	ld	r25, X
     fd2:	1b 97       	sbiw	r26, 0x0b	; 11
     fd4:	09 95       	icall
	
}
     fd6:	60 96       	adiw	r28, 0x10	; 16
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	08 95       	ret

00000fee <f_calibrate>:

void f_calibrate(){
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	60 97       	sbiw	r28, 0x10	; 16
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
	oled_reset();
    1008:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <oled_reset>
    100c:	0f 2e       	mov	r0, r31
    100e:	f0 ef       	ldi	r31, 0xF0	; 240
    1010:	ef 2e       	mov	r14, r31
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	ff 2e       	mov	r15, r31
    1016:	f0 2d       	mov	r31, r0
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
    1018:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_page(i);
    101a:	81 2f       	mov	r24, r17
    101c:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i+s_calibrate]));
    1020:	f7 01       	movw	r30, r14
    1022:	65 91       	lpm	r22, Z+
    1024:	74 91       	lpm	r23, Z
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
		oled_center_print(buffer,8);
    102e:	68 e0       	ldi	r22, 0x08	; 8
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	ce 01       	movw	r24, r28
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
}

void f_calibrate(){
	oled_reset();
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
    103a:	1f 5f       	subi	r17, 0xFF	; 255
    103c:	22 e0       	ldi	r18, 0x02	; 2
    103e:	e2 0e       	add	r14, r18
    1040:	f1 1c       	adc	r15, r1
    1042:	18 30       	cpi	r17, 0x08	; 8
    1044:	51 f7       	brne	.-44     	; 0x101a <f_calibrate+0x2c>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	93 ed       	ldi	r25, 0xD3	; 211
    104a:	20 e3       	ldi	r18, 0x30	; 48
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	90 40       	sbci	r25, 0x00	; 0
    1050:	20 40       	sbci	r18, 0x00	; 0
    1052:	e1 f7       	brne	.-8      	; 0x104c <f_calibrate+0x5e>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <f_calibrate+0x68>
    1056:	00 00       	nop
	
	//funskjon her ||||||||||||||||||||||||||||
	//send over canbuss til node 2 at det skal bli kalibrert n?
	_delay_ms(1000); //juster denne opp til ?s lang tid calibreringa tar
		
	curr_menu=main_menu;
    1058:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <main_menu>
    105c:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <main_menu+0x1>
    1060:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <curr_menu+0x1>
    1064:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <curr_menu>
	pos_child=0;
    1068:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <pos_child+0x1>
    106c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <pos_child>
	(*curr_menu->function)(main_menu->name);
    1070:	12 96       	adiw	r26, 0x02	; 2
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	13 97       	sbiw	r26, 0x03	; 3
    1078:	1a 96       	adiw	r26, 0x0a	; 10
    107a:	8d 91       	ld	r24, X+
    107c:	9c 91       	ld	r25, X
    107e:	1b 97       	sbiw	r26, 0x0b	; 11
    1080:	09 95       	icall
	
	
}
    1082:	60 96       	adiw	r28, 0x10	; 16
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	08 95       	ret

0000109a <Menu_new_submenu>:
	
	curr_menu = main_menu;
	
}

menu_item* Menu_new_submenu(menu_item* self, char* name, void (*function)(char*), int oledOffset){
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	8c 01       	movw	r16, r24
    10b0:	7b 01       	movw	r14, r22
    10b2:	5a 01       	movw	r10, r20
    10b4:	69 01       	movw	r12, r18
	menu_item* new_submenu = malloc(sizeof(menu_item));
    10b6:	8e e0       	ldi	r24, 0x0E	; 14
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <malloc>
    10be:	ec 01       	movw	r28, r24

	new_submenu->parent=self;
    10c0:	19 83       	std	Y+1, r17	; 0x01
    10c2:	08 83       	st	Y, r16
	new_submenu->children=NULL;
    10c4:	1d 82       	std	Y+5, r1	; 0x05
    10c6:	1c 82       	std	Y+4, r1	; 0x04
	new_submenu->numOfChildren=0;
    10c8:	1f 82       	std	Y+7, r1	; 0x07
    10ca:	1e 82       	std	Y+6, r1	; 0x06
	new_submenu->name=name;
    10cc:	fb 86       	std	Y+11, r15	; 0x0b
    10ce:	ea 86       	std	Y+10, r14	; 0x0a
	new_submenu->nameArrow=oled_arrow(name);
    10d0:	c7 01       	movw	r24, r14
    10d2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <oled_arrow>
    10d6:	9d 87       	std	Y+13, r25	; 0x0d
    10d8:	8c 87       	std	Y+12, r24	; 0x0c
	new_submenu->function = function;
    10da:	bb 82       	std	Y+3, r11	; 0x03
    10dc:	aa 82       	std	Y+2, r10	; 0x02
	new_submenu->oledOffset=oledOffset;
    10de:	d9 86       	std	Y+9, r13	; 0x09
    10e0:	c8 86       	std	Y+8, r12	; 0x08
		
	self->children=realloc(self->children, (self->numOfChildren+1)*sizeof(menu_item*));
    10e2:	f8 01       	movw	r30, r16
    10e4:	66 81       	ldd	r22, Z+6	; 0x06
    10e6:	77 81       	ldd	r23, Z+7	; 0x07
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	66 0f       	add	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	84 81       	ldd	r24, Z+4	; 0x04
    10f2:	95 81       	ldd	r25, Z+5	; 0x05
    10f4:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <realloc>
    10f8:	f8 01       	movw	r30, r16
    10fa:	95 83       	std	Z+5, r25	; 0x05
    10fc:	84 83       	std	Z+4, r24	; 0x04

	self->children[self->numOfChildren]=new_submenu;
    10fe:	26 81       	ldd	r18, Z+6	; 0x06
    1100:	37 81       	ldd	r19, Z+7	; 0x07
    1102:	a9 01       	movw	r20, r18
    1104:	44 0f       	add	r20, r20
    1106:	55 1f       	adc	r21, r21
    1108:	fc 01       	movw	r30, r24
    110a:	e4 0f       	add	r30, r20
    110c:	f5 1f       	adc	r31, r21
    110e:	d1 83       	std	Z+1, r29	; 0x01
    1110:	c0 83       	st	Z, r28
	
	self->numOfChildren++;
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	f8 01       	movw	r30, r16
    1118:	37 83       	std	Z+7, r19	; 0x07
    111a:	26 83       	std	Z+6, r18	; 0x06
	
	return new_submenu;
}
    111c:	ce 01       	movw	r24, r28
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	bf 90       	pop	r11
    1130:	af 90       	pop	r10
    1132:	08 95       	ret

00001134 <menu_init>:
	struct menu_item* children[8];
	int numOfChildren=0;
	char name[];
} menu_item;
*/
void menu_init(){
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	60 97       	sbiw	r28, 0x10	; 16
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
	
	menu_item* main_menu = malloc(sizeof(menu_item));
    1152:	8e e0       	ldi	r24, 0x0E	; 14
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <malloc>
    115a:	6c 01       	movw	r12, r24
	
	main_menu->name = "Main Menu";
    115c:	86 ea       	ldi	r24, 0xA6	; 166
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	f6 01       	movw	r30, r12
    1162:	93 87       	std	Z+11, r25	; 0x0b
    1164:	82 87       	std	Z+10, r24	; 0x0a
	main_menu->nameArrow= NULL;
    1166:	15 86       	std	Z+13, r1	; 0x0d
    1168:	14 86       	std	Z+12, r1	; 0x0c
	main_menu->numOfChildren = 0;
    116a:	17 82       	std	Z+7, r1	; 0x07
    116c:	16 82       	std	Z+6, r1	; 0x06
	main_menu->parent = NULL;
    116e:	11 82       	std	Z+1, r1	; 0x01
    1170:	10 82       	st	Z, r1
	main_menu->function = NULL;
    1172:	13 82       	std	Z+3, r1	; 0x03
    1174:	12 82       	std	Z+2, r1	; 0x02
	main_menu->oledOffset=s_main;
    1176:	11 86       	std	Z+9, r1	; 0x09
    1178:	10 86       	std	Z+8, r1	; 0x08
	
	
	Menu_new_submenu(main_menu, "1PLAYER", &f_1player, s_p1);
    117a:	20 e1       	ldi	r18, 0x10	; 16
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	46 e0       	ldi	r20, 0x06	; 6
    1180:	57 e0       	ldi	r21, 0x07	; 7
    1182:	60 eb       	ldi	r22, 0xB0	; 176
    1184:	71 e0       	ldi	r23, 0x01	; 1
    1186:	c6 01       	movw	r24, r12
    1188:	0e 94 4d 08 	call	0x109a	; 0x109a <Menu_new_submenu>
	Menu_new_submenu(main_menu, "2PLAYER", &f_2player, s_p2);
    118c:	28 e1       	ldi	r18, 0x18	; 24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	45 e8       	ldi	r20, 0x85	; 133
    1192:	56 e0       	ldi	r21, 0x06	; 6
    1194:	68 eb       	ldi	r22, 0xB8	; 184
    1196:	71 e0       	ldi	r23, 0x01	; 1
    1198:	c6 01       	movw	r24, r12
    119a:	0e 94 4d 08 	call	0x109a	; 0x109a <Menu_new_submenu>
	menu_item* controller_menu=Menu_new_submenu(main_menu, "CONTROLLER", &f_controller,s_controller);
    119e:	20 e2       	ldi	r18, 0x20	; 32
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4d eb       	ldi	r20, 0xBD	; 189
    11a4:	56 e0       	ldi	r21, 0x06	; 6
    11a6:	60 ec       	ldi	r22, 0xC0	; 192
    11a8:	71 e0       	ldi	r23, 0x01	; 1
    11aa:	c6 01       	movw	r24, r12
    11ac:	0e 94 4d 08 	call	0x109a	; 0x109a <Menu_new_submenu>
    11b0:	7c 01       	movw	r14, r24
	Menu_new_submenu(controller_menu, "JOYSTICK", &f_joystick,s_joystick);
    11b2:	20 e3       	ldi	r18, 0x30	; 48
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	4b e4       	ldi	r20, 0x4B	; 75
    11b8:	57 e0       	ldi	r21, 0x07	; 7
    11ba:	6b ec       	ldi	r22, 0xCB	; 203
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	0e 94 4d 08 	call	0x109a	; 0x109a <Menu_new_submenu>
	Menu_new_submenu(controller_menu, "SLIDER", &f_slider,s_slider);
    11c2:	28 e3       	ldi	r18, 0x38	; 56
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	41 ea       	ldi	r20, 0xA1	; 161
    11c8:	57 e0       	ldi	r21, 0x07	; 7
    11ca:	64 ed       	ldi	r22, 0xD4	; 212
    11cc:	71 e0       	ldi	r23, 0x01	; 1
    11ce:	c7 01       	movw	r24, r14
    11d0:	0e 94 4d 08 	call	0x109a	; 0x109a <Menu_new_submenu>
	Menu_new_submenu(main_menu, "CALIBRATE", &f_calibrate,s_calibrate);
    11d4:	20 e4       	ldi	r18, 0x40	; 64
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	47 ef       	ldi	r20, 0xF7	; 247
    11da:	57 e0       	ldi	r21, 0x07	; 7
    11dc:	6b ed       	ldi	r22, 0xDB	; 219
    11de:	71 e0       	ldi	r23, 0x01	; 1
    11e0:	c6 01       	movw	r24, r12
    11e2:	0e 94 4d 08 	call	0x109a	; 0x109a <Menu_new_submenu>
	

	oled_reset();
    11e6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <oled_reset>
    11ea:	0f 2e       	mov	r0, r31
    11ec:	f0 e7       	ldi	r31, 0x70	; 112
    11ee:	ef 2e       	mov	r14, r31
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	ff 2e       	mov	r15, r31
    11f4:	f0 2d       	mov	r31, r0
	char buffer[16];
	for(unsigned char i=0; i<6; i++){
    11f6:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_page(i);
    11f8:	81 2f       	mov	r24, r17
    11fa:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i]));
    11fe:	f7 01       	movw	r30, r14
    1200:	65 91       	lpm	r22, Z+
    1202:	74 91       	lpm	r23, Z
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
		oled_center_print(buffer,8);
    120c:	68 e0       	ldi	r22, 0x08	; 8
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	ce 01       	movw	r24, r28
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
	Menu_new_submenu(main_menu, "CALIBRATE", &f_calibrate,s_calibrate);
	

	oled_reset();
	char buffer[16];
	for(unsigned char i=0; i<6; i++){
    1218:	1f 5f       	subi	r17, 0xFF	; 255
    121a:	f2 e0       	ldi	r31, 0x02	; 2
    121c:	ef 0e       	add	r14, r31
    121e:	f1 1c       	adc	r15, r1
    1220:	16 30       	cpi	r17, 0x06	; 6
    1222:	51 f7       	brne	.-44     	; 0x11f8 <menu_init+0xc4>
		oled_goto_page(i);
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i]));
		oled_center_print(buffer,8);
	}
	oled_goto_page(header_pages);
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
	strcpy_P(buffer,(PGM_P)pgm_read_word(&table[s_mainP+2]));
    122a:	e4 e8       	ldi	r30, 0x84	; 132
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	65 91       	lpm	r22, Z+
    1230:	74 91       	lpm	r23, Z
    1232:	ce 01       	movw	r24, r28
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
	oled_center_print(buffer,8);
    123a:	68 e0       	ldi	r22, 0x08	; 8
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	ce 01       	movw	r24, r28
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
	
	curr_menu = main_menu;
    1246:	d0 92 54 02 	sts	0x0254, r13	; 0x800254 <curr_menu+0x1>
    124a:	c0 92 53 02 	sts	0x0253, r12	; 0x800253 <curr_menu>
	
}
    124e:	60 96       	adiw	r28, 0x10	; 16
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	08 95       	ret

0000126a <navigate>:
	
}



void navigate(){
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	60 97       	sbiw	r28, 0x10	; 16
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
	
if(joystick_getDirection()!=NEUTRAL){
    1282:	0e 94 37 06 	call	0xc6e	; 0xc6e <joystick_getDirection>
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	09 f4       	brne	.+2      	; 0x128c <navigate+0x22>
    128a:	da c0       	rjmp	.+436    	; 0x1440 <navigate+0x1d6>
    128c:	2f ef       	ldi	r18, 0xFF	; 255
    128e:	87 ee       	ldi	r24, 0xE7	; 231
    1290:	93 e0       	ldi	r25, 0x03	; 3
    1292:	21 50       	subi	r18, 0x01	; 1
    1294:	80 40       	sbci	r24, 0x00	; 0
    1296:	90 40       	sbci	r25, 0x00	; 0
    1298:	e1 f7       	brne	.-8      	; 0x1292 <navigate+0x28>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <navigate+0x32>
    129c:	00 00       	nop
			_delay_ms(80);
		
	switch (joystick_getDirection()){
    129e:	0e 94 37 06 	call	0xc6e	; 0xc6e <joystick_getDirection>
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <navigate+0x3e>
    12a6:	64 c0       	rjmp	.+200    	; 0x1370 <navigate+0x106>
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	09 f0       	breq	.+2      	; 0x12ae <navigate+0x44>
    12ac:	c9 c0       	rjmp	.+402    	; 0x1440 <navigate+0x1d6>
		
		case UP:
		//_delay_ms(10);
		if(pos_child>0){
    12ae:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos_child>
    12b2:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pos_child+0x1>
    12b6:	18 16       	cp	r1, r24
    12b8:	19 06       	cpc	r1, r25
    12ba:	0c f0       	brlt	.+2      	; 0x12be <navigate+0x54>
    12bc:	c1 c0       	rjmp	.+386    	; 0x1440 <navigate+0x1d6>
			oled_goto_page(pos_child+header_pages);
    12be:	8e 5f       	subi	r24, 0xFE	; 254
    12c0:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
			oled_clear_page(pos_child+header_pages);
    12c4:	05 e5       	ldi	r16, 0x55	; 85
    12c6:	12 e0       	ldi	r17, 0x02	; 2
    12c8:	f8 01       	movw	r30, r16
    12ca:	80 81       	ld	r24, Z
    12cc:	8e 5f       	subi	r24, 0xFE	; 254
    12ce:	0e 94 b4 0a 	call	0x1568	; 0x1568 <oled_clear_page>
			//oled_center_print(curr_menu->children[pos_child]->name,fontsize);
			char buffer[16];
			strcpy_P(buffer,(PGM_P)pgm_read_word(&table[pos_child+(curr_menu->oledOffset)+header_pages]));
    12d2:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <curr_menu>
    12d6:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <curr_menu+0x1>
    12da:	00 84       	ldd	r0, Z+8	; 0x08
    12dc:	f1 85       	ldd	r31, Z+9	; 0x09
    12de:	e0 2d       	mov	r30, r0
    12e0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos_child>
    12e4:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pos_child+0x1>
    12e8:	e8 0f       	add	r30, r24
    12ea:	f9 1f       	adc	r31, r25
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	ec 58       	subi	r30, 0x8C	; 140
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	65 91       	lpm	r22, Z+
    12f6:	74 91       	lpm	r23, Z
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
			oled_center_print(buffer,8);
    1300:	68 e0       	ldi	r22, 0x08	; 8
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
			
			
			oled_goto_page(pos_child+header_pages-1);
    130c:	f8 01       	movw	r30, r16
    130e:	80 81       	ld	r24, Z
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
			oled_clear_page(pos_child+header_pages-1);
    1316:	f8 01       	movw	r30, r16
    1318:	80 81       	ld	r24, Z
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <oled_clear_page>
			//oled_center_print(curr_menu->children[pos_child-1]->nameArrow,fontsize);
			strcpy_P(buffer,(PGM_P)pgm_read_word(&table[pos_child-1+(curr_menu->oledOffset)+s_page+header_pages])); //s_page to get to arrow page
    1320:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <pos_child>
    1324:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <pos_child+0x1>
    1328:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <curr_menu>
    132c:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <curr_menu+0x1>
    1330:	18 96       	adiw	r26, 0x08	; 8
    1332:	8d 91       	ld	r24, X+
    1334:	9c 91       	ld	r25, X
    1336:	19 97       	sbiw	r26, 0x09	; 9
    1338:	e8 0f       	add	r30, r24
    133a:	f9 1f       	adc	r31, r25
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	ee 57       	subi	r30, 0x7E	; 126
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	65 91       	lpm	r22, Z+
    1346:	74 91       	lpm	r23, Z
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
			oled_center_print(buffer,8);
    1350:	68 e0       	ldi	r22, 0x08	; 8
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	ce 01       	movw	r24, r28
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
			
			
			pos_child -= 1;
    135c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos_child>
    1360:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pos_child+0x1>
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <pos_child+0x1>
    136a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos_child>
    136e:	68 c0       	rjmp	.+208    	; 0x1440 <navigate+0x1d6>
		}
		break;
		case DOWN:
		//_delay_ms(10);
		if(pos_child < curr_menu->numOfChildren-1){
    1370:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos_child>
    1374:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pos_child+0x1>
    1378:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <curr_menu>
    137c:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <curr_menu+0x1>
    1380:	26 81       	ldd	r18, Z+6	; 0x06
    1382:	37 81       	ldd	r19, Z+7	; 0x07
    1384:	21 50       	subi	r18, 0x01	; 1
    1386:	31 09       	sbc	r19, r1
    1388:	82 17       	cp	r24, r18
    138a:	93 07       	cpc	r25, r19
    138c:	0c f0       	brlt	.+2      	; 0x1390 <navigate+0x126>
    138e:	58 c0       	rjmp	.+176    	; 0x1440 <navigate+0x1d6>
			oled_goto_page(pos_child+header_pages);
    1390:	8e 5f       	subi	r24, 0xFE	; 254
    1392:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
			oled_clear_page(pos_child+header_pages);
    1396:	05 e5       	ldi	r16, 0x55	; 85
    1398:	12 e0       	ldi	r17, 0x02	; 2
    139a:	f8 01       	movw	r30, r16
    139c:	80 81       	ld	r24, Z
    139e:	8e 5f       	subi	r24, 0xFE	; 254
    13a0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <oled_clear_page>
			//oled_center_print(curr_menu->children[pos_child]->name,fontsize);
			char buffer[16];
			strcpy_P(buffer,(PGM_P)pgm_read_word(&table[pos_child+(curr_menu->oledOffset)+header_pages]));
    13a4:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <curr_menu>
    13a8:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <curr_menu+0x1>
    13ac:	00 84       	ldd	r0, Z+8	; 0x08
    13ae:	f1 85       	ldd	r31, Z+9	; 0x09
    13b0:	e0 2d       	mov	r30, r0
    13b2:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos_child>
    13b6:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pos_child+0x1>
    13ba:	e8 0f       	add	r30, r24
    13bc:	f9 1f       	adc	r31, r25
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ec 58       	subi	r30, 0x8C	; 140
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	65 91       	lpm	r22, Z+
    13c8:	74 91       	lpm	r23, Z
    13ca:	ce 01       	movw	r24, r28
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
			oled_center_print(buffer,8);
    13d2:	68 e0       	ldi	r22, 0x08	; 8
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	ce 01       	movw	r24, r28
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
			
			oled_goto_page(pos_child+header_pages+1);
    13de:	f8 01       	movw	r30, r16
    13e0:	80 81       	ld	r24, Z
    13e2:	8d 5f       	subi	r24, 0xFD	; 253
    13e4:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
			oled_clear_page(pos_child+header_pages+1);
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 81       	ld	r24, Z
    13ec:	8d 5f       	subi	r24, 0xFD	; 253
    13ee:	0e 94 b4 0a 	call	0x1568	; 0x1568 <oled_clear_page>
			//oled_center_print(curr_menu->children[pos_child+1]->nameArrow,fontsize);
			strcpy_P(buffer,(PGM_P)pgm_read_word(&table[pos_child+1+(curr_menu->oledOffset)+s_page+header_pages])); //s_page to get to arrow page
    13f2:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <pos_child>
    13f6:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <pos_child+0x1>
    13fa:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <curr_menu>
    13fe:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <curr_menu+0x1>
    1402:	18 96       	adiw	r26, 0x08	; 8
    1404:	8d 91       	ld	r24, X+
    1406:	9c 91       	ld	r25, X
    1408:	19 97       	sbiw	r26, 0x09	; 9
    140a:	e8 0f       	add	r30, r24
    140c:	f9 1f       	adc	r31, r25
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	ea 57       	subi	r30, 0x7A	; 122
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	65 91       	lpm	r22, Z+
    1418:	74 91       	lpm	r23, Z
    141a:	ce 01       	movw	r24, r28
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	0e 94 00 10 	call	0x2000	; 0x2000 <strcpy_P>
			oled_center_print(buffer,8);
    1422:	68 e0       	ldi	r22, 0x08	; 8
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	ce 01       	movw	r24, r28
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	0e 94 af 0b 	call	0x175e	; 0x175e <oled_center_print>
			pos_child += 1;
    142e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pos_child>
    1432:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pos_child+0x1>
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <pos_child+0x1>
    143c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pos_child>
		//
		
		break;*/
			}
}
	if (!(PINB & (1<<PB2))){
    1440:	b2 99       	sbic	0x16, 2	; 22
    1442:	34 c0       	rjmp	.+104    	; 0x14ac <navigate+0x242>
		if(curr_menu->children!= NULL){
    1444:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <curr_menu>
    1448:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <curr_menu+0x1>
    144c:	84 81       	ldd	r24, Z+4	; 0x04
    144e:	95 81       	ldd	r25, Z+5	; 0x05
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	d9 f0       	breq	.+54     	; 0x148a <navigate+0x220>
			curr_menu=curr_menu->children[pos_child];
    1454:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <pos_child>
    1458:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <pos_child+0x1>
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	e8 0f       	add	r30, r24
    1462:	f9 1f       	adc	r31, r25
    1464:	a0 81       	ld	r26, Z
    1466:	b1 81       	ldd	r27, Z+1	; 0x01
    1468:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <curr_menu+0x1>
    146c:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <curr_menu>
			pos_child=0;
    1470:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <pos_child+0x1>
    1474:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <pos_child>
			(*curr_menu->function)(curr_menu->name);
    1478:	12 96       	adiw	r26, 0x02	; 2
    147a:	ed 91       	ld	r30, X+
    147c:	fc 91       	ld	r31, X
    147e:	13 97       	sbiw	r26, 0x03	; 3
    1480:	1a 96       	adiw	r26, 0x0a	; 10
    1482:	8d 91       	ld	r24, X+
    1484:	9c 91       	ld	r25, X
    1486:	1b 97       	sbiw	r26, 0x0b	; 11
    1488:	09 95       	icall
    148a:	ff ef       	ldi	r31, 0xFF	; 255
    148c:	23 ec       	ldi	r18, 0xC3	; 195
    148e:	89 e0       	ldi	r24, 0x09	; 9
    1490:	f1 50       	subi	r31, 0x01	; 1
    1492:	20 40       	sbci	r18, 0x00	; 0
    1494:	80 40       	sbci	r24, 0x00	; 0
    1496:	e1 f7       	brne	.-8      	; 0x1490 <navigate+0x226>
    1498:	00 c0       	rjmp	.+0      	; 0x149a <navigate+0x230>
    149a:	00 00       	nop
		}
		_delay_ms(200);
		printf("button pressed");
    149c:	85 ee       	ldi	r24, 0xE5	; 229
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	9f 93       	push	r25
    14a2:	8f 93       	push	r24
    14a4:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
	}
		
}
    14ac:	60 96       	adiw	r28, 0x10	; 16
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	08 95       	ret

000014c2 <oled_mode>:
	}
	oled_goto_pos(4,0);
	for (int j=0; j<1024; j++){
		ext_oled_data[j] = 0xff;
	}
	oled_mode(PAGE_MODE);
    14c2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    14c6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    14ca:	90 e2       	ldi	r25, 0x20	; 32
    14cc:	90 83       	st	Z, r25
    14ce:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    14d2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    14d6:	80 83       	st	Z, r24
    14d8:	08 95       	ret

000014da <oled_goto_page>:
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	48 f0       	brcs	.+18     	; 0x14f0 <oled_goto_page+0x16>
    14de:	84 ef       	ldi	r24, 0xF4	; 244
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	9f 93       	push	r25
    14e4:	8f 93       	push	r24
    14e6:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	08 95       	ret
    14f0:	90 eb       	ldi	r25, 0xB0	; 176
    14f2:	98 0f       	add	r25, r24
    14f4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    14f8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    14fc:	90 83       	st	Z, r25
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <oled_position+0x1>
    1504:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <oled_position>
    1508:	08 95       	ret

0000150a <oled_goto_col>:
    150a:	88 23       	and	r24, r24
    150c:	4c f4       	brge	.+18     	; 0x1520 <oled_goto_col+0x16>
    150e:	84 ef       	ldi	r24, 0xF4	; 244
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	9f 93       	push	r25
    1514:	8f 93       	push	r24
    1516:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	08 95       	ret
    1520:	28 2f       	mov	r18, r24
    1522:	2f 70       	andi	r18, 0x0F	; 15
    1524:	98 2f       	mov	r25, r24
    1526:	92 95       	swap	r25
    1528:	9f 70       	andi	r25, 0x0F	; 15
    152a:	90 5f       	subi	r25, 0xF0	; 240
    152c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1530:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1534:	90 83       	st	Z, r25
    1536:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    153a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    153e:	20 83       	st	Z, r18
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <oled_position+0x3>
    1546:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <oled_position+0x2>
    154a:	08 95       	ret

0000154c <oled_goto_pos>:
    154c:	cf 93       	push	r28
    154e:	c6 2f       	mov	r28, r22
    1550:	0e 94 6d 0a 	call	0x14da	; 0x14da <oled_goto_page>
    1554:	8c 2f       	mov	r24, r28
    1556:	0e 94 85 0a 	call	0x150a	; 0x150a <oled_goto_col>
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <oled_home>:
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	0e 94 a6 0a 	call	0x154c	; 0x154c <oled_goto_pos>
    1566:	08 95       	ret

00001568 <oled_clear_page>:
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	0e 94 a6 0a 	call	0x154c	; 0x154c <oled_goto_pos>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    1576:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    157a:	e8 0f       	add	r30, r24
    157c:	f9 1f       	adc	r31, r25
    157e:	10 82       	st	Z, r1
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	80 38       	cpi	r24, 0x80	; 128
    1584:	91 05       	cpc	r25, r1
    1586:	a9 f7       	brne	.-22     	; 0x1572 <oled_clear_page+0xa>
    1588:	08 95       	ret

0000158a <oled_clear_screen>:
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	0e 94 a6 0a 	call	0x154c	; 0x154c <oled_goto_pos>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <oled_mode>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    15a0:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    15a4:	e8 0f       	add	r30, r24
    15a6:	f9 1f       	adc	r31, r25
    15a8:	10 82       	st	Z, r1
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	81 15       	cp	r24, r1
    15ae:	24 e0       	ldi	r18, 0x04	; 4
    15b0:	92 07       	cpc	r25, r18
    15b2:	a1 f7       	brne	.-24     	; 0x159c <oled_clear_screen+0x12>
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	84 e0       	ldi	r24, 0x04	; 4
    15b8:	0e 94 a6 0a 	call	0x154c	; 0x154c <oled_goto_pos>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    15c4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    15c8:	e8 0f       	add	r30, r24
    15ca:	f9 1f       	adc	r31, r25
    15cc:	10 82       	st	Z, r1
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	81 15       	cp	r24, r1
    15d2:	24 e0       	ldi	r18, 0x04	; 4
    15d4:	92 07       	cpc	r25, r18
    15d6:	a1 f7       	brne	.-24     	; 0x15c0 <oled_clear_screen+0x36>
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <oled_mode>
    15de:	08 95       	ret

000015e0 <oled_reset>:
    15e0:	0e 94 af 0a 	call	0x155e	; 0x155e <oled_home>
    15e4:	0e 94 c5 0a 	call	0x158a	; 0x158a <oled_clear_screen>
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <oled_mode>
    15ee:	08 95       	ret

000015f0 <oled_write_char>:
}


void oled_write_char(char c, int fs){
	c=c-32;
    15f0:	80 52       	subi	r24, 0x20	; 32
	
	switch(fs){
    15f2:	66 30       	cpi	r22, 0x06	; 6
    15f4:	71 05       	cpc	r23, r1
    15f6:	09 f4       	brne	.+2      	; 0x15fa <oled_write_char+0xa>
    15f8:	3b c0       	rjmp	.+118    	; 0x1670 <oled_write_char+0x80>
    15fa:	68 30       	cpi	r22, 0x08	; 8
    15fc:	71 05       	cpc	r23, r1
    15fe:	29 f0       	breq	.+10     	; 0x160a <oled_write_char+0x1a>
    1600:	64 30       	cpi	r22, 0x04	; 4
    1602:	71 05       	cpc	r23, r1
    1604:	09 f0       	breq	.+2      	; 0x1608 <oled_write_char+0x18>
    1606:	80 c0       	rjmp	.+256    	; 0x1708 <oled_write_char+0x118>
    1608:	5b c0       	rjmp	.+182    	; 0x16c0 <oled_write_char+0xd0>
		case 8 :
		for(int i=0; i<fontsize;i++){
    160a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <fontsize>
    160e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <fontsize+0x1>
    1612:	12 16       	cp	r1, r18
    1614:	13 06       	cpc	r1, r19
    1616:	0c f0       	brlt	.+2      	; 0x161a <oled_write_char+0x2a>
    1618:	77 c0       	rjmp	.+238    	; 0x1708 <oled_write_char+0x118>
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
			oled_wrd(pgm_read_word(&font8[c][i]));
			oled_position.coloumn++;
    162c:	af e5       	ldi	r26, 0x5F	; 95
    162e:	b2 e0       	ldi	r27, 0x02	; 2
	c=c-32;
	
	switch(fs){
		case 8 :
		for(int i=0; i<fontsize;i++){
			oled_wrd(pgm_read_word(&font8[c][i]));
    1630:	f9 01       	movw	r30, r18
    1632:	e8 0f       	add	r30, r24
    1634:	f9 1f       	adc	r31, r25
    1636:	eb 50       	subi	r30, 0x0B	; 11
    1638:	fa 4f       	sbci	r31, 0xFA	; 250
    163a:	45 91       	lpm	r20, Z+
    163c:	54 91       	lpm	r21, Z
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
}
//oled write data
void oled_wrd(uint8_t data){
	ext_oled_data[0] = data;
    163e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    1642:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    1646:	40 83       	st	Z, r20
	
	switch(fs){
		case 8 :
		for(int i=0; i<fontsize;i++){
			oled_wrd(pgm_read_word(&font8[c][i]));
			oled_position.coloumn++;
    1648:	12 96       	adiw	r26, 0x02	; 2
    164a:	4d 91       	ld	r20, X+
    164c:	5c 91       	ld	r21, X
    164e:	13 97       	sbiw	r26, 0x03	; 3
    1650:	4f 5f       	subi	r20, 0xFF	; 255
    1652:	5f 4f       	sbci	r21, 0xFF	; 255
    1654:	13 96       	adiw	r26, 0x03	; 3
    1656:	5c 93       	st	X, r21
    1658:	4e 93       	st	-X, r20
    165a:	12 97       	sbiw	r26, 0x02	; 2
void oled_write_char(char c, int fs){
	c=c-32;
	
	switch(fs){
		case 8 :
		for(int i=0; i<fontsize;i++){
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	3f 4f       	sbci	r19, 0xFF	; 255
    1660:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <fontsize>
    1664:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <fontsize+0x1>
    1668:	24 17       	cp	r18, r20
    166a:	35 07       	cpc	r19, r21
    166c:	0c f3       	brlt	.-62     	; 0x1630 <oled_write_char+0x40>
    166e:	08 95       	ret
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9c 01       	movw	r18, r24
    1674:	22 0f       	add	r18, r18
    1676:	33 1f       	adc	r19, r19
    1678:	82 0f       	add	r24, r18
    167a:	93 1f       	adc	r25, r19
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25


void oled_write_char(char c, int fs){
	c=c-32;
	
	switch(fs){
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
		case 6 :
		for(int i=0; i<6;i++){
			oled_wrd(pgm_read_word(&font6[c][i]));
			oled_position.coloumn++;
    1684:	af e5       	ldi	r26, 0x5F	; 95
    1686:	b2 e0       	ldi	r27, 0x02	; 2
			oled_position.coloumn++;
		}
		break;
		case 6 :
		for(int i=0; i<6;i++){
			oled_wrd(pgm_read_word(&font6[c][i]));
    1688:	f9 01       	movw	r30, r18
    168a:	e8 0f       	add	r30, r24
    168c:	f9 1f       	adc	r31, r25
    168e:	e5 54       	subi	r30, 0x45	; 69
    1690:	fc 4f       	sbci	r31, 0xFC	; 252
    1692:	45 91       	lpm	r20, Z+
    1694:	54 91       	lpm	r21, Z
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
}
//oled write data
void oled_wrd(uint8_t data){
	ext_oled_data[0] = data;
    1696:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    169a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    169e:	40 83       	st	Z, r20
		}
		break;
		case 6 :
		for(int i=0; i<6;i++){
			oled_wrd(pgm_read_word(&font6[c][i]));
			oled_position.coloumn++;
    16a0:	12 96       	adiw	r26, 0x02	; 2
    16a2:	4d 91       	ld	r20, X+
    16a4:	5c 91       	ld	r21, X
    16a6:	13 97       	sbiw	r26, 0x03	; 3
    16a8:	4f 5f       	subi	r20, 0xFF	; 255
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	13 96       	adiw	r26, 0x03	; 3
    16ae:	5c 93       	st	X, r21
    16b0:	4e 93       	st	-X, r20
    16b2:	12 97       	sbiw	r26, 0x02	; 2
			oled_wrd(pgm_read_word(&font8[c][i]));
			oled_position.coloumn++;
		}
		break;
		case 6 :
		for(int i=0; i<6;i++){
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	26 30       	cpi	r18, 0x06	; 6
    16ba:	31 05       	cpc	r19, r1
    16bc:	29 f7       	brne	.-54     	; 0x1688 <oled_write_char+0x98>
    16be:	08 95       	ret
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25


void oled_write_char(char c, int fs){
	c=c-32;
	
	switch(fs){
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
		}
		break;
		case 4 :
		for(int i=0; i<4;i++){
			oled_wrd(pgm_read_word(&font4[c][i]));
			oled_position.coloumn++;
    16ce:	af e5       	ldi	r26, 0x5F	; 95
    16d0:	b2 e0       	ldi	r27, 0x02	; 2
			oled_position.coloumn++;
		}
		break;
		case 4 :
		for(int i=0; i<4;i++){
			oled_wrd(pgm_read_word(&font4[c][i]));
    16d2:	f9 01       	movw	r30, r18
    16d4:	e8 0f       	add	r30, r24
    16d6:	f9 1f       	adc	r31, r25
    16d8:	e1 5c       	subi	r30, 0xC1	; 193
    16da:	fd 4f       	sbci	r31, 0xFD	; 253
    16dc:	45 91       	lpm	r20, Z+
    16de:	54 91       	lpm	r21, Z
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
}
//oled write data
void oled_wrd(uint8_t data){
	ext_oled_data[0] = data;
    16e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    16e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    16e8:	40 83       	st	Z, r20
		}
		break;
		case 4 :
		for(int i=0; i<4;i++){
			oled_wrd(pgm_read_word(&font4[c][i]));
			oled_position.coloumn++;
    16ea:	12 96       	adiw	r26, 0x02	; 2
    16ec:	4d 91       	ld	r20, X+
    16ee:	5c 91       	ld	r21, X
    16f0:	13 97       	sbiw	r26, 0x03	; 3
    16f2:	4f 5f       	subi	r20, 0xFF	; 255
    16f4:	5f 4f       	sbci	r21, 0xFF	; 255
    16f6:	13 96       	adiw	r26, 0x03	; 3
    16f8:	5c 93       	st	X, r21
    16fa:	4e 93       	st	-X, r20
    16fc:	12 97       	sbiw	r26, 0x02	; 2
			oled_wrd(pgm_read_word(&font6[c][i]));
			oled_position.coloumn++;
		}
		break;
		case 4 :
		for(int i=0; i<4;i++){
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	24 30       	cpi	r18, 0x04	; 4
    1704:	31 05       	cpc	r19, r1
    1706:	29 f7       	brne	.-54     	; 0x16d2 <oled_write_char+0xe2>
    1708:	08 95       	ret

0000170a <oled_print>:
	
}



void oled_print(char* word, int fs){
    170a:	cf 92       	push	r12
    170c:	df 92       	push	r13
    170e:	ef 92       	push	r14
    1710:	ff 92       	push	r15
    1712:	0f 93       	push	r16
    1714:	1f 93       	push	r17
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	ec 01       	movw	r28, r24
    171c:	7b 01       	movw	r14, r22
    171e:	8c 01       	movw	r16, r24
	for( int i = 0; i < strlen(word); i++){
    1720:	c1 2c       	mov	r12, r1
    1722:	d1 2c       	mov	r13, r1
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <oled_print+0x2e>
		oled_write_char(word[i], fs);
    1726:	b7 01       	movw	r22, r14
    1728:	f8 01       	movw	r30, r16
    172a:	81 91       	ld	r24, Z+
    172c:	8f 01       	movw	r16, r30
    172e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <oled_write_char>
}



void oled_print(char* word, int fs){
	for( int i = 0; i < strlen(word); i++){
    1732:	ff ef       	ldi	r31, 0xFF	; 255
    1734:	cf 1a       	sub	r12, r31
    1736:	df 0a       	sbc	r13, r31
    1738:	fe 01       	movw	r30, r28
    173a:	01 90       	ld	r0, Z+
    173c:	00 20       	and	r0, r0
    173e:	e9 f7       	brne	.-6      	; 0x173a <oled_print+0x30>
    1740:	31 97       	sbiw	r30, 0x01	; 1
    1742:	ec 1b       	sub	r30, r28
    1744:	fd 0b       	sbc	r31, r29
    1746:	ce 16       	cp	r12, r30
    1748:	df 06       	cpc	r13, r31
    174a:	68 f3       	brcs	.-38     	; 0x1726 <oled_print+0x1c>
		oled_write_char(word[i], fs);
	}
}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	08 95       	ret

0000175e <oled_center_print>:

void oled_center_print(char* word, int fs){
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	ec 01       	movw	r28, r24
    1768:	8b 01       	movw	r16, r22
	oled_goto_col(63-(strlen(word)*fs/2));
    176a:	fc 01       	movw	r30, r24
    176c:	01 90       	ld	r0, Z+
    176e:	00 20       	and	r0, r0
    1770:	e9 f7       	brne	.-6      	; 0x176c <oled_center_print+0xe>
    1772:	31 97       	sbiw	r30, 0x01	; 1
    1774:	e8 1b       	sub	r30, r24
    1776:	f9 0b       	sbc	r31, r25
    1778:	6e 9f       	mul	r22, r30
    177a:	90 01       	movw	r18, r0
    177c:	6f 9f       	mul	r22, r31
    177e:	30 0d       	add	r19, r0
    1780:	7e 9f       	mul	r23, r30
    1782:	30 0d       	add	r19, r0
    1784:	11 24       	eor	r1, r1
    1786:	36 95       	lsr	r19
    1788:	27 95       	ror	r18
    178a:	8f e3       	ldi	r24, 0x3F	; 63
    178c:	82 1b       	sub	r24, r18
    178e:	0e 94 85 0a 	call	0x150a	; 0x150a <oled_goto_col>
	oled_print(word, fs);
    1792:	b8 01       	movw	r22, r16
    1794:	ce 01       	movw	r24, r28
    1796:	0e 94 85 0b 	call	0x170a	; 0x170a <oled_print>
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <oled_arrow>:

char* oled_arrow(char* name){
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	8c 01       	movw	r16, r24
	char* str = malloc(sizeof(char)*20);
    17ae:	84 e1       	ldi	r24, 0x14	; 20
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <malloc>
    17b6:	ec 01       	movw	r28, r24
	strcpy(str,">");
    17b8:	8e e3       	ldi	r24, 0x3E	; 62
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	99 83       	std	Y+1, r25	; 0x01
    17be:	88 83       	st	Y, r24
	strcat(str,name);
    17c0:	b8 01       	movw	r22, r16
    17c2:	ce 01       	movw	r24, r28
    17c4:	0e 94 10 10 	call	0x2020	; 0x2020 <strcat>
	strcat(str,"<");
    17c8:	fe 01       	movw	r30, r28
    17ca:	01 90       	ld	r0, Z+
    17cc:	00 20       	and	r0, r0
    17ce:	e9 f7       	brne	.-6      	; 0x17ca <oled_arrow+0x26>
    17d0:	31 97       	sbiw	r30, 0x01	; 1
    17d2:	8c e3       	ldi	r24, 0x3C	; 60
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
	return str;
}
    17da:	ce 01       	movw	r24, r28
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	08 95       	ret

000017e6 <oled_init>:
int fontsize = 8;


//oled write command
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
    17e6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    17ea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    17ee:	8e ea       	ldi	r24, 0xAE	; 174
    17f0:	80 83       	st	Z, r24
    17f2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    17f6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    17fa:	81 ea       	ldi	r24, 0xA1	; 161
    17fc:	80 83       	st	Z, r24
    17fe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1802:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1806:	8a ed       	ldi	r24, 0xDA	; 218
    1808:	80 83       	st	Z, r24
    180a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    180e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1812:	82 e1       	ldi	r24, 0x12	; 18
    1814:	80 83       	st	Z, r24
    1816:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    181a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	80 83       	st	Z, r24
    1822:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1826:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    182a:	88 ea       	ldi	r24, 0xA8	; 168
    182c:	80 83       	st	Z, r24
    182e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1832:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1836:	8f e3       	ldi	r24, 0x3F	; 63
    1838:	80 83       	st	Z, r24
    183a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    183e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1842:	85 ed       	ldi	r24, 0xD5	; 213
    1844:	80 83       	st	Z, r24
    1846:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    184a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    184e:	80 e8       	ldi	r24, 0x80	; 128
    1850:	80 83       	st	Z, r24
    1852:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1856:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    185a:	81 e8       	ldi	r24, 0x81	; 129
    185c:	80 83       	st	Z, r24
    185e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1862:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1866:	80 e5       	ldi	r24, 0x50	; 80
    1868:	80 83       	st	Z, r24
    186a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    186e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1872:	89 ed       	ldi	r24, 0xD9	; 217
    1874:	80 83       	st	Z, r24
    1876:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    187a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    187e:	81 e2       	ldi	r24, 0x21	; 33
    1880:	80 83       	st	Z, r24
    1882:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1886:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	80 83       	st	Z, r24
    188e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1892:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	80 83       	st	Z, r24
    189a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    189e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    18a2:	8b ed       	ldi	r24, 0xDB	; 219
    18a4:	80 83       	st	Z, r24
    18a6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    18aa:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    18ae:	80 e3       	ldi	r24, 0x30	; 48
    18b0:	80 83       	st	Z, r24
    18b2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    18b6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    18ba:	8d ea       	ldi	r24, 0xAD	; 173
    18bc:	80 83       	st	Z, r24
    18be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    18c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    18c6:	10 82       	st	Z, r1
    18c8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    18cc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    18d0:	84 ea       	ldi	r24, 0xA4	; 164
    18d2:	80 83       	st	Z, r24
    18d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    18d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    18dc:	86 ea       	ldi	r24, 0xA6	; 166
    18de:	80 83       	st	Z, r24
    18e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    18e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    18e8:	8f ea       	ldi	r24, 0xAF	; 175
    18ea:	80 83       	st	Z, r24
	oled_wrc(0xad);        //master configuration
	oled_wrc(0x00);
	oled_wrc(0xa4);        //out follows RAM content
	oled_wrc(0xa6);        //set normal display
	oled_wrc(0xaf);        // display on
	oled_clear_screen();
    18ec:	0e 94 c5 0a 	call	0x158a	; 0x158a <oled_clear_screen>
	oled_goto_pos(0,0);
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	0e 94 a6 0a 	call	0x154c	; 0x154c <oled_goto_pos>
    18f8:	08 95       	ret

000018fa <spi_init>:
#include <stdint.h>


void spi_init(void){
	/* Set MOSI, SCK , Slave select output, all others become input*/
	DDRB = (1<<DDB5)|(1<<DDB7)|(1<<DDB4);
    18fa:	80 eb       	ldi	r24, 0xB0	; 176
    18fc:	87 bb       	out	0x17, r24	; 23
	
	//vet ikke hvorfor denne mp?tte v?re output, men f?r excercise 5 til ? funke. blir masse loopingom ikke.
	DDRD |= (1<<PD2);
    18fe:	8a 9a       	sbi	0x11, 2	; 17

	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1900:	81 e5       	ldi	r24, 0x51	; 81
    1902:	8d b9       	out	0x0d, r24	; 13
	
	//Set slave select
	PORTB |= 1<<PB4;
    1904:	c4 9a       	sbi	0x18, 4	; 24
	
	//button pull up
	PORTB |= 1<<PB2;
    1906:	c2 9a       	sbi	0x18, 2	; 24
    1908:	08 95       	ret

0000190a <spi_send>:
	
}

void spi_send(uint8_t cData){
	/* Start transmission */
	SPDR = cData;
    190a:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
    190c:	77 9b       	sbis	0x0e, 7	; 14
    190e:	fe cf       	rjmp	.-4      	; 0x190c <spi_send+0x2>
}
    1910:	08 95       	ret

00001912 <spi_read>:
uint8_t spi_read(){
	
	char dummyByte = 0x45; //0b01000101
	
	/* Start transmission of dummy byte such that Output from slave arrives at SPDR*/
	SPDR = dummyByte;
    1912:	85 e4       	ldi	r24, 0x45	; 69
    1914:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
    1916:	77 9b       	sbis	0x0e, 7	; 14
    1918:	fe cf       	rjmp	.-4      	; 0x1916 <spi_read+0x4>
	
	/*Return data register*/
	return SPDR;
    191a:	8f b1       	in	r24, 0x0f	; 15
    191c:	08 95       	ret

0000191e <timer_init>:
static int seconds = 0;
static int mseconds = 0;

void timer_init(void){
	//TCCR0 |= (1<< CS00); //Clock with no prescaling 4.9 MHz? Change to get higher period.
	TCCR0 |= (1<<CS02);
    191e:	83 b7       	in	r24, 0x33	; 51
    1920:	84 60       	ori	r24, 0x04	; 4
    1922:	83 bf       	out	0x33, r24	; 51
	
	
	TCCR0 |= (1<<WGM01); //Set mode to 'Clear Timer on Compare'
    1924:	83 b7       	in	r24, 0x33	; 51
    1926:	88 60       	ori	r24, 0x08	; 8
    1928:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<WGM00);
    192a:	83 b7       	in	r24, 0x33	; 51
    192c:	8f 7b       	andi	r24, 0xBF	; 191
    192e:	83 bf       	out	0x33, r24	; 51
	
	int8_t counterVal = 192; //set the number that counter stops and creates interrupt at.
	OCR0 |= counterVal;
    1930:	81 b7       	in	r24, 0x31	; 49
    1932:	80 6c       	ori	r24, 0xC0	; 192
    1934:	81 bf       	out	0x31, r24	; 49

	TIMSK |= (1<< OCIE0); //Enable interrupt by Ouput Compare
    1936:	89 b7       	in	r24, 0x39	; 57
    1938:	81 60       	ori	r24, 0x01	; 1
    193a:	89 bf       	out	0x39, r24	; 57
	sei(); //Enable global interrupts
    193c:	78 94       	sei
    193e:	08 95       	ret

00001940 <__vector_16>:
}

ISR(TIMER0_COMP_vect){
    1940:	1f 92       	push	r1
    1942:	0f 92       	push	r0
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	0f 92       	push	r0
    1948:	11 24       	eor	r1, r1
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
	
	
	counter++;
    1962:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <counter>
    1966:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <counter+0x1>
    196a:	2f 5f       	subi	r18, 0xFF	; 255
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <counter+0x1>
    1972:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <counter>
	if(counter%10 == 0){
    1976:	c9 01       	movw	r24, r18
    1978:	6a e0       	ldi	r22, 0x0A	; 10
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divmodhi4>
    1980:	89 2b       	or	r24, r25
    1982:	a9 f5       	brne	.+106    	; 0x19ee <__vector_16+0xae>
		mseconds++;
    1984:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <mseconds>
    1988:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <mseconds+0x1>
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <mseconds+0x1>
    1992:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mseconds>
		
		if(counter%100 == 0){
    1996:	c9 01       	movw	r24, r18
    1998:	64 e6       	ldi	r22, 0x64	; 100
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divmodhi4>
    19a0:	89 2b       	or	r24, r25
    19a2:	69 f4       	brne	.+26     	; 0x19be <__vector_16+0x7e>
			seconds++;
    19a4:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <seconds>
    19a8:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <seconds+0x1>
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <seconds+0x1>
    19b2:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <seconds>
			mseconds = 0;
    19b6:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <mseconds+0x1>
    19ba:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <mseconds>
		}
		printf("Time: %d,%d \n\r", seconds, mseconds);
    19be:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <mseconds+0x1>
    19c2:	8f 93       	push	r24
    19c4:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <mseconds>
    19c8:	8f 93       	push	r24
    19ca:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <seconds+0x1>
    19ce:	8f 93       	push	r24
    19d0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <seconds>
    19d4:	8f 93       	push	r24
    19d6:	85 e1       	ldi	r24, 0x15	; 21
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	9f 93       	push	r25
    19dc:	8f 93       	push	r24
    19de:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
	}
	
	//LEgg til start og stopp "Knapp"
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	0f 90       	pop	r0
    1a0c:	1f 90       	pop	r1
    1a0e:	18 95       	reti

00001a10 <USART_Init>:
    1a10:	90 bd       	out	0x20, r25	; 32
    1a12:	89 b9       	out	0x09, r24	; 9
    1a14:	88 e1       	ldi	r24, 0x18	; 24
    1a16:	8a b9       	out	0x0a, r24	; 10
    1a18:	8e e8       	ldi	r24, 0x8E	; 142
    1a1a:	80 bd       	out	0x20, r24	; 32
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	89 e1       	ldi	r24, 0x19	; 25
    1a22:	9d e0       	ldi	r25, 0x0D	; 13
    1a24:	0e 94 1b 10 	call	0x2036	; 0x2036 <fdevopen>
    1a28:	08 95       	ret

00001a2a <USART_Transmit>:
    1a2a:	5d 9b       	sbis	0x0b, 5	; 11
    1a2c:	fe cf       	rjmp	.-4      	; 0x1a2a <USART_Transmit>
    1a2e:	8c b9       	out	0x0c, r24	; 12
    1a30:	08 95       	ret

00001a32 <USART_PUTCHAR>:
    1a32:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <USART_Transmit>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	08 95       	ret

00001a3c <xmem_init>:
    1a3c:	85 b7       	in	r24, 0x35	; 53
    1a3e:	80 68       	ori	r24, 0x80	; 128
    1a40:	85 bf       	out	0x35, r24	; 53
    1a42:	80 b7       	in	r24, 0x30	; 48
    1a44:	80 62       	ori	r24, 0x20	; 32
    1a46:	80 bf       	out	0x30, r24	; 48
    1a48:	08 95       	ret

00001a4a <xmem_write>:
    1a4a:	fb 01       	movw	r30, r22
    1a4c:	f0 5f       	subi	r31, 0xF0	; 240
    1a4e:	80 83       	st	Z, r24
    1a50:	08 95       	ret

00001a52 <xmem_read>:
    1a52:	90 5f       	subi	r25, 0xF0	; 240
    1a54:	fc 01       	movw	r30, r24
    1a56:	80 81       	ld	r24, Z
    1a58:	08 95       	ret

00001a5a <mcp_read>:
	uint8_t status = spi_read();
	
	PORTB |= (1<<PB4);
	
	return status;
}
    1a5a:	cf 93       	push	r28
    1a5c:	c8 2f       	mov	r28, r24
    1a5e:	c4 98       	cbi	0x18, 4	; 24
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
    1a66:	8c 2f       	mov	r24, r28
    1a68:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
    1a6c:	0e 94 89 0c 	call	0x1912	; 0x1912 <spi_read>
    1a70:	c4 9a       	sbi	0x18, 4	; 24
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <mcp_write>:
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	d8 2f       	mov	r29, r24
    1a7c:	c6 2f       	mov	r28, r22
    1a7e:	c4 98       	cbi	0x18, 4	; 24
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
    1a86:	8d 2f       	mov	r24, r29
    1a88:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
    1a8c:	8c 2f       	mov	r24, r28
    1a8e:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
    1a92:	c4 9a       	sbi	0x18, 4	; 24
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	08 95       	ret

00001a9a <mcp_req_to_send>:
    1a9a:	c4 98       	cbi	0x18, 4	; 24
    1a9c:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
    1aa0:	c4 9a       	sbi	0x18, 4	; 24
    1aa2:	08 95       	ret

00001aa4 <mcp_bit_modify>:

//Setting or clearing individual bits in specific status and control registers. Not all registers are modifiable, see pg. 63.
//Mask determines which bits are allowed to change.
//Data determines what value the modified bits in the register will change to.
void mcp_bit_modify(uint8_t addr, uint8_t mask, uint8_t data){
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	18 2f       	mov	r17, r24
    1aac:	d6 2f       	mov	r29, r22
    1aae:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);
    1ab0:	c4 98       	cbi	0x18, 4	; 24
	//0x05 0b00000101
	//0x0f 0b00001111;
	//0xe0 0b11100000;
	//0x80 0b10000000;
	
	spi_send(MCP_BITMOD);	//0x05 0b00000101
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
    1ab4:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
	spi_send(addr);			
    1ab8:	81 2f       	mov	r24, r17
    1aba:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
	spi_send(mask);			
    1abe:	8d 2f       	mov	r24, r29
    1ac0:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
	spi_send(data);
    1ac4:	8c 2f       	mov	r24, r28
    1ac6:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
	
	PORTB |= (1<<PB4);
    1aca:	c4 9a       	sbi	0x18, 4	; 24
	
}
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	08 95       	ret

00001ad4 <mcp_reset>:

//Re-initialize the internal registers of the MCP2515
void mcp_reset(void){
	
	PORTB &= ~(1<<PB4);
    1ad4:	c4 98       	cbi	0x18, 4	; 24
	
	spi_send(MCP_RESET); //0xC0		0b1100 0000
    1ad6:	80 ec       	ldi	r24, 0xC0	; 192
    1ad8:	0e 94 85 0c 	call	0x190a	; 0x190a <spi_send>
	
	PORTB |= (1<<PB4);
    1adc:	c4 9a       	sbi	0x18, 4	; 24
    1ade:	8f e3       	ldi	r24, 0x3F	; 63
    1ae0:	9c e9       	ldi	r25, 0x9C	; 156
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <mcp_reset+0xe>
    1ae6:	00 c0       	rjmp	.+0      	; 0x1ae8 <mcp_reset+0x14>
    1ae8:	00 00       	nop
    1aea:	08 95       	ret

00001aec <mcp_init>:
}

void mcp_init(){
	
	uint8_t value;
	spi_init();
    1aec:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <spi_init>
	mcp_reset();
    1af0:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <mcp_reset>
    1af4:	8f e3       	ldi	r24, 0x3F	; 63
    1af6:	9f e1       	ldi	r25, 0x1F	; 31
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <mcp_init+0xc>
    1afc:	00 c0       	rjmp	.+0      	; 0x1afe <mcp_init+0x12>
    1afe:	00 00       	nop
	_delay_ms(2); //controller needs some time to do internal initialization.
	
	

	value = mcp_read(MCP_CANSTAT);
    1b00:	8e e0       	ldi	r24, 0x0E	; 14
    1b02:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <mcp_read>
	
 	if ((value & MODE_MASK) != MODE_CONFIG){
    1b06:	98 2f       	mov	r25, r24
    1b08:	90 7e       	andi	r25, 0xE0	; 224
    1b0a:	90 38       	cpi	r25, 0x80	; 128
    1b0c:	61 f0       	breq	.+24     	; 0x1b26 <mcp_init+0x3a>
 		printf("Not in config mode after reset! value: %x \n\r", value);
    1b0e:	1f 92       	push	r1
    1b10:	8f 93       	push	r24
    1b12:	84 e2       	ldi	r24, 0x24	; 36
    1b14:	92 e0       	ldi	r25, 0x02	; 2
    1b16:	9f 93       	push	r25
    1b18:	8f 93       	push	r24
    1b1a:	0e 94 66 10 	call	0x20cc	; 0x20cc <printf>
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	08 95       	ret

00001b28 <main>:
#define MYUBRR FOSC/16/BAUD-1 //UART Baud Rate Register


int main(void){
	
	USART_Init(MYUBRR);
    1b28:	8f e1       	ldi	r24, 0x1F	; 31
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <USART_Init>
	xmem_init();
    1b30:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <xmem_init>
	oled_init();
    1b34:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <oled_init>
	menu_init();
    1b38:	0e 94 9a 08 	call	0x1134	; 0x1134 <menu_init>
	adc_init();
    1b3c:	0e 94 ad 04 	call	0x95a	; 0x95a <adc_init>
	joystick_calibrate();
    1b40:	0e 94 71 05 	call	0xae2	; 0xae2 <joystick_calibrate>
	can_init();
    1b44:	0e 94 c9 04 	call	0x992	; 0x992 <can_init>
	timer_init();
    1b48:	0e 94 8f 0c 	call	0x191e	; 0x191e <timer_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b4c:	85 e0       	ldi	r24, 0x05	; 5
    1b4e:	8a 95       	dec	r24
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <main+0x26>
    1b52:	00 00       	nop
	
	while(1){
		_delay_us(1);
		navigate();
    1b54:	0e 94 35 09 	call	0x126a	; 0x126a <navigate>
    1b58:	f9 cf       	rjmp	.-14     	; 0x1b4c <main+0x24>

00001b5a <util_sort>:
	t=*p;
	*p=*q;
	*q=t;
}

void util_sort(int a[],int n) {
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
	int i,j,temp;

	for(i = 0;i < n-1;i++) {
    1b5e:	eb 01       	movw	r28, r22
    1b60:	21 97       	sbiw	r28, 0x01	; 1
    1b62:	1c 16       	cp	r1, r28
    1b64:	1d 06       	cpc	r1, r29
    1b66:	14 f5       	brge	.+68     	; 0x1bac <util_sort+0x52>
    1b68:	61 50       	subi	r22, 0x01	; 1
    1b6a:	70 48       	sbci	r23, 0x80	; 128
    1b6c:	66 0f       	add	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	68 0f       	add	r22, r24
    1b72:	79 1f       	adc	r23, r25
    1b74:	17 c0       	rjmp	.+46     	; 0x1ba4 <util_sort+0x4a>
		for(j = 0;j < n-i-1;j++) {
    1b76:	fc 01       	movw	r30, r24
			if(a[j] > a[j+1])
    1b78:	21 91       	ld	r18, Z+
    1b7a:	31 91       	ld	r19, Z+
    1b7c:	40 81       	ld	r20, Z
    1b7e:	51 81       	ldd	r21, Z+1	; 0x01
    1b80:	42 17       	cp	r20, r18
    1b82:	53 07       	cpc	r21, r19
    1b84:	34 f4       	brge	.+12     	; 0x1b92 <util_sort+0x38>
#include "util.h"

void util_swap(int *p,int *q) {
	int t;
	t=*p;
	*p=*q;
    1b86:	df 01       	movw	r26, r30
    1b88:	12 97       	sbiw	r26, 0x02	; 2
    1b8a:	4d 93       	st	X+, r20
    1b8c:	5c 93       	st	X, r21
	*q=t;
    1b8e:	31 83       	std	Z+1, r19	; 0x01
    1b90:	20 83       	st	Z, r18

void util_sort(int a[],int n) {
	int i,j,temp;

	for(i = 0;i < n-1;i++) {
		for(j = 0;j < n-i-1;j++) {
    1b92:	e6 17       	cp	r30, r22
    1b94:	f7 07       	cpc	r31, r23
    1b96:	81 f7       	brne	.-32     	; 0x1b78 <util_sort+0x1e>
    1b98:	21 97       	sbiw	r28, 0x01	; 1
    1b9a:	62 50       	subi	r22, 0x02	; 2
    1b9c:	71 09       	sbc	r23, r1
}

void util_sort(int a[],int n) {
	int i,j,temp;

	for(i = 0;i < n-1;i++) {
    1b9e:	68 17       	cp	r22, r24
    1ba0:	79 07       	cpc	r23, r25
    1ba2:	21 f0       	breq	.+8      	; 0x1bac <util_sort+0x52>
		for(j = 0;j < n-i-1;j++) {
    1ba4:	1c 16       	cp	r1, r28
    1ba6:	1d 06       	cpc	r1, r29
    1ba8:	34 f3       	brlt	.-52     	; 0x1b76 <util_sort+0x1c>
    1baa:	f6 cf       	rjmp	.-20     	; 0x1b98 <util_sort+0x3e>
			if(a[j] > a[j+1])
			util_swap(&a[j],&a[j+1]);
		}
	}
}
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <util_median>:
int util_median(int a[], int n){
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	8c 01       	movw	r16, r24
    1bbc:	eb 01       	movw	r28, r22
	util_sort(a,n);
    1bbe:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <util_sort>
	n=((n+1)/2)-1;
    1bc2:	21 96       	adiw	r28, 0x01	; 1
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	0a f4       	brpl	.+2      	; 0x1bca <util_median+0x18>
    1bc8:	01 96       	adiw	r24, 0x01	; 1
	return a[n];
    1bca:	fc 01       	movw	r30, r24
    1bcc:	ee 7f       	andi	r30, 0xFE	; 254
    1bce:	32 97       	sbiw	r30, 0x02	; 2
    1bd0:	e0 0f       	add	r30, r16
    1bd2:	f1 1f       	adc	r31, r17
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <__divmodhi4>:
    1be2:	97 fb       	bst	r25, 7
    1be4:	07 2e       	mov	r0, r23
    1be6:	16 f4       	brtc	.+4      	; 0x1bec <__divmodhi4+0xa>
    1be8:	00 94       	com	r0
    1bea:	07 d0       	rcall	.+14     	; 0x1bfa <__divmodhi4_neg1>
    1bec:	77 fd       	sbrc	r23, 7
    1bee:	09 d0       	rcall	.+18     	; 0x1c02 <__divmodhi4_neg2>
    1bf0:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__udivmodhi4>
    1bf4:	07 fc       	sbrc	r0, 7
    1bf6:	05 d0       	rcall	.+10     	; 0x1c02 <__divmodhi4_neg2>
    1bf8:	3e f4       	brtc	.+14     	; 0x1c08 <__divmodhi4_exit>

00001bfa <__divmodhi4_neg1>:
    1bfa:	90 95       	com	r25
    1bfc:	81 95       	neg	r24
    1bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1c00:	08 95       	ret

00001c02 <__divmodhi4_neg2>:
    1c02:	70 95       	com	r23
    1c04:	61 95       	neg	r22
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255

00001c08 <__divmodhi4_exit>:
    1c08:	08 95       	ret

00001c0a <__udivmodhi4>:
    1c0a:	aa 1b       	sub	r26, r26
    1c0c:	bb 1b       	sub	r27, r27
    1c0e:	51 e1       	ldi	r21, 0x11	; 17
    1c10:	07 c0       	rjmp	.+14     	; 0x1c20 <__udivmodhi4_ep>

00001c12 <__udivmodhi4_loop>:
    1c12:	aa 1f       	adc	r26, r26
    1c14:	bb 1f       	adc	r27, r27
    1c16:	a6 17       	cp	r26, r22
    1c18:	b7 07       	cpc	r27, r23
    1c1a:	10 f0       	brcs	.+4      	; 0x1c20 <__udivmodhi4_ep>
    1c1c:	a6 1b       	sub	r26, r22
    1c1e:	b7 0b       	sbc	r27, r23

00001c20 <__udivmodhi4_ep>:
    1c20:	88 1f       	adc	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	5a 95       	dec	r21
    1c26:	a9 f7       	brne	.-22     	; 0x1c12 <__udivmodhi4_loop>
    1c28:	80 95       	com	r24
    1c2a:	90 95       	com	r25
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	08 95       	ret

00001c32 <malloc>:
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	10 f4       	brcc	.+4      	; 0x1c44 <malloc+0x12>
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <__flp>
    1c48:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <__flp+0x1>
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	a0 e0       	ldi	r26, 0x00	; 0
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	30 97       	sbiw	r30, 0x00	; 0
    1c56:	19 f1       	breq	.+70     	; 0x1c9e <malloc+0x6c>
    1c58:	40 81       	ld	r20, Z
    1c5a:	51 81       	ldd	r21, Z+1	; 0x01
    1c5c:	02 81       	ldd	r16, Z+2	; 0x02
    1c5e:	13 81       	ldd	r17, Z+3	; 0x03
    1c60:	48 17       	cp	r20, r24
    1c62:	59 07       	cpc	r21, r25
    1c64:	c8 f0       	brcs	.+50     	; 0x1c98 <malloc+0x66>
    1c66:	84 17       	cp	r24, r20
    1c68:	95 07       	cpc	r25, r21
    1c6a:	69 f4       	brne	.+26     	; 0x1c86 <malloc+0x54>
    1c6c:	10 97       	sbiw	r26, 0x00	; 0
    1c6e:	31 f0       	breq	.+12     	; 0x1c7c <malloc+0x4a>
    1c70:	12 96       	adiw	r26, 0x02	; 2
    1c72:	0c 93       	st	X, r16
    1c74:	12 97       	sbiw	r26, 0x02	; 2
    1c76:	13 96       	adiw	r26, 0x03	; 3
    1c78:	1c 93       	st	X, r17
    1c7a:	27 c0       	rjmp	.+78     	; 0x1cca <malloc+0x98>
    1c7c:	00 93 67 02 	sts	0x0267, r16	; 0x800267 <__flp>
    1c80:	10 93 68 02 	sts	0x0268, r17	; 0x800268 <__flp+0x1>
    1c84:	22 c0       	rjmp	.+68     	; 0x1cca <malloc+0x98>
    1c86:	21 15       	cp	r18, r1
    1c88:	31 05       	cpc	r19, r1
    1c8a:	19 f0       	breq	.+6      	; 0x1c92 <malloc+0x60>
    1c8c:	42 17       	cp	r20, r18
    1c8e:	53 07       	cpc	r21, r19
    1c90:	18 f4       	brcc	.+6      	; 0x1c98 <malloc+0x66>
    1c92:	9a 01       	movw	r18, r20
    1c94:	bd 01       	movw	r22, r26
    1c96:	ef 01       	movw	r28, r30
    1c98:	df 01       	movw	r26, r30
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	db cf       	rjmp	.-74     	; 0x1c54 <malloc+0x22>
    1c9e:	21 15       	cp	r18, r1
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	f9 f0       	breq	.+62     	; 0x1ce2 <malloc+0xb0>
    1ca4:	28 1b       	sub	r18, r24
    1ca6:	39 0b       	sbc	r19, r25
    1ca8:	24 30       	cpi	r18, 0x04	; 4
    1caa:	31 05       	cpc	r19, r1
    1cac:	80 f4       	brcc	.+32     	; 0x1cce <malloc+0x9c>
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	61 15       	cp	r22, r1
    1cb4:	71 05       	cpc	r23, r1
    1cb6:	21 f0       	breq	.+8      	; 0x1cc0 <malloc+0x8e>
    1cb8:	fb 01       	movw	r30, r22
    1cba:	93 83       	std	Z+3, r25	; 0x03
    1cbc:	82 83       	std	Z+2, r24	; 0x02
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <malloc+0x96>
    1cc0:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <__flp+0x1>
    1cc4:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <__flp>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	32 96       	adiw	r30, 0x02	; 2
    1ccc:	44 c0       	rjmp	.+136    	; 0x1d56 <malloc+0x124>
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e2 0f       	add	r30, r18
    1cd2:	f3 1f       	adc	r31, r19
    1cd4:	81 93       	st	Z+, r24
    1cd6:	91 93       	st	Z+, r25
    1cd8:	22 50       	subi	r18, 0x02	; 2
    1cda:	31 09       	sbc	r19, r1
    1cdc:	39 83       	std	Y+1, r19	; 0x01
    1cde:	28 83       	st	Y, r18
    1ce0:	3a c0       	rjmp	.+116    	; 0x1d56 <malloc+0x124>
    1ce2:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <__brkval>
    1ce6:	30 91 66 02 	lds	r19, 0x0266	; 0x800266 <__brkval+0x1>
    1cea:	23 2b       	or	r18, r19
    1cec:	41 f4       	brne	.+16     	; 0x1cfe <malloc+0xcc>
    1cee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1cf2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1cf6:	30 93 66 02 	sts	0x0266, r19	; 0x800266 <__brkval+0x1>
    1cfa:	20 93 65 02 	sts	0x0265, r18	; 0x800265 <__brkval>
    1cfe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1d02:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1d06:	21 15       	cp	r18, r1
    1d08:	31 05       	cpc	r19, r1
    1d0a:	41 f4       	brne	.+16     	; 0x1d1c <malloc+0xea>
    1d0c:	2d b7       	in	r18, 0x3d	; 61
    1d0e:	3e b7       	in	r19, 0x3e	; 62
    1d10:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1d14:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1d18:	24 1b       	sub	r18, r20
    1d1a:	35 0b       	sbc	r19, r21
    1d1c:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <__brkval>
    1d20:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <__brkval+0x1>
    1d24:	e2 17       	cp	r30, r18
    1d26:	f3 07       	cpc	r31, r19
    1d28:	a0 f4       	brcc	.+40     	; 0x1d52 <malloc+0x120>
    1d2a:	2e 1b       	sub	r18, r30
    1d2c:	3f 0b       	sbc	r19, r31
    1d2e:	28 17       	cp	r18, r24
    1d30:	39 07       	cpc	r19, r25
    1d32:	78 f0       	brcs	.+30     	; 0x1d52 <malloc+0x120>
    1d34:	ac 01       	movw	r20, r24
    1d36:	4e 5f       	subi	r20, 0xFE	; 254
    1d38:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3a:	24 17       	cp	r18, r20
    1d3c:	35 07       	cpc	r19, r21
    1d3e:	48 f0       	brcs	.+18     	; 0x1d52 <malloc+0x120>
    1d40:	4e 0f       	add	r20, r30
    1d42:	5f 1f       	adc	r21, r31
    1d44:	50 93 66 02 	sts	0x0266, r21	; 0x800266 <__brkval+0x1>
    1d48:	40 93 65 02 	sts	0x0265, r20	; 0x800265 <__brkval>
    1d4c:	81 93       	st	Z+, r24
    1d4e:	91 93       	st	Z+, r25
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <malloc+0x124>
    1d52:	e0 e0       	ldi	r30, 0x00	; 0
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	cf 01       	movw	r24, r30
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	08 95       	ret

00001d62 <free>:
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <free+0xa>
    1d6a:	81 c0       	rjmp	.+258    	; 0x1e6e <free+0x10c>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	32 97       	sbiw	r30, 0x02	; 2
    1d70:	13 82       	std	Z+3, r1	; 0x03
    1d72:	12 82       	std	Z+2, r1	; 0x02
    1d74:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <__flp>
    1d78:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <__flp+0x1>
    1d7c:	10 97       	sbiw	r26, 0x00	; 0
    1d7e:	81 f4       	brne	.+32     	; 0x1da0 <free+0x3e>
    1d80:	20 81       	ld	r18, Z
    1d82:	31 81       	ldd	r19, Z+1	; 0x01
    1d84:	82 0f       	add	r24, r18
    1d86:	93 1f       	adc	r25, r19
    1d88:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <__brkval>
    1d8c:	30 91 66 02 	lds	r19, 0x0266	; 0x800266 <__brkval+0x1>
    1d90:	28 17       	cp	r18, r24
    1d92:	39 07       	cpc	r19, r25
    1d94:	51 f5       	brne	.+84     	; 0x1dea <free+0x88>
    1d96:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__brkval+0x1>
    1d9a:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__brkval>
    1d9e:	67 c0       	rjmp	.+206    	; 0x1e6e <free+0x10c>
    1da0:	ed 01       	movw	r28, r26
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	ce 17       	cp	r28, r30
    1da8:	df 07       	cpc	r29, r31
    1daa:	40 f4       	brcc	.+16     	; 0x1dbc <free+0x5a>
    1dac:	4a 81       	ldd	r20, Y+2	; 0x02
    1dae:	5b 81       	ldd	r21, Y+3	; 0x03
    1db0:	9e 01       	movw	r18, r28
    1db2:	41 15       	cp	r20, r1
    1db4:	51 05       	cpc	r21, r1
    1db6:	f1 f0       	breq	.+60     	; 0x1df4 <free+0x92>
    1db8:	ea 01       	movw	r28, r20
    1dba:	f5 cf       	rjmp	.-22     	; 0x1da6 <free+0x44>
    1dbc:	d3 83       	std	Z+3, r29	; 0x03
    1dbe:	c2 83       	std	Z+2, r28	; 0x02
    1dc0:	40 81       	ld	r20, Z
    1dc2:	51 81       	ldd	r21, Z+1	; 0x01
    1dc4:	84 0f       	add	r24, r20
    1dc6:	95 1f       	adc	r25, r21
    1dc8:	c8 17       	cp	r28, r24
    1dca:	d9 07       	cpc	r29, r25
    1dcc:	59 f4       	brne	.+22     	; 0x1de4 <free+0x82>
    1dce:	88 81       	ld	r24, Y
    1dd0:	99 81       	ldd	r25, Y+1	; 0x01
    1dd2:	84 0f       	add	r24, r20
    1dd4:	95 1f       	adc	r25, r21
    1dd6:	02 96       	adiw	r24, 0x02	; 2
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	93 83       	std	Z+3, r25	; 0x03
    1de2:	82 83       	std	Z+2, r24	; 0x02
    1de4:	21 15       	cp	r18, r1
    1de6:	31 05       	cpc	r19, r1
    1de8:	29 f4       	brne	.+10     	; 0x1df4 <free+0x92>
    1dea:	f0 93 68 02 	sts	0x0268, r31	; 0x800268 <__flp+0x1>
    1dee:	e0 93 67 02 	sts	0x0267, r30	; 0x800267 <__flp>
    1df2:	3d c0       	rjmp	.+122    	; 0x1e6e <free+0x10c>
    1df4:	e9 01       	movw	r28, r18
    1df6:	fb 83       	std	Y+3, r31	; 0x03
    1df8:	ea 83       	std	Y+2, r30	; 0x02
    1dfa:	49 91       	ld	r20, Y+
    1dfc:	59 91       	ld	r21, Y+
    1dfe:	c4 0f       	add	r28, r20
    1e00:	d5 1f       	adc	r29, r21
    1e02:	ec 17       	cp	r30, r28
    1e04:	fd 07       	cpc	r31, r29
    1e06:	61 f4       	brne	.+24     	; 0x1e20 <free+0xbe>
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	84 0f       	add	r24, r20
    1e0e:	95 1f       	adc	r25, r21
    1e10:	02 96       	adiw	r24, 0x02	; 2
    1e12:	e9 01       	movw	r28, r18
    1e14:	99 83       	std	Y+1, r25	; 0x01
    1e16:	88 83       	st	Y, r24
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
    1e20:	e0 e0       	ldi	r30, 0x00	; 0
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	12 96       	adiw	r26, 0x02	; 2
    1e26:	8d 91       	ld	r24, X+
    1e28:	9c 91       	ld	r25, X
    1e2a:	13 97       	sbiw	r26, 0x03	; 3
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	19 f0       	breq	.+6      	; 0x1e36 <free+0xd4>
    1e30:	fd 01       	movw	r30, r26
    1e32:	dc 01       	movw	r26, r24
    1e34:	f7 cf       	rjmp	.-18     	; 0x1e24 <free+0xc2>
    1e36:	8d 91       	ld	r24, X+
    1e38:	9c 91       	ld	r25, X
    1e3a:	11 97       	sbiw	r26, 0x01	; 1
    1e3c:	9d 01       	movw	r18, r26
    1e3e:	2e 5f       	subi	r18, 0xFE	; 254
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	82 0f       	add	r24, r18
    1e44:	93 1f       	adc	r25, r19
    1e46:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <__brkval>
    1e4a:	30 91 66 02 	lds	r19, 0x0266	; 0x800266 <__brkval+0x1>
    1e4e:	28 17       	cp	r18, r24
    1e50:	39 07       	cpc	r19, r25
    1e52:	69 f4       	brne	.+26     	; 0x1e6e <free+0x10c>
    1e54:	30 97       	sbiw	r30, 0x00	; 0
    1e56:	29 f4       	brne	.+10     	; 0x1e62 <free+0x100>
    1e58:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__flp+0x1>
    1e5c:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <__flp>
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <free+0x104>
    1e62:	13 82       	std	Z+3, r1	; 0x03
    1e64:	12 82       	std	Z+2, r1	; 0x02
    1e66:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <__brkval+0x1>
    1e6a:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <__brkval>
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	08 95       	ret

00001e74 <realloc>:
    1e74:	a0 e0       	ldi	r26, 0x00	; 0
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e0 e4       	ldi	r30, 0x40	; 64
    1e7a:	ff e0       	ldi	r31, 0x0F	; 15
    1e7c:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__prologue_saves__+0x8>
    1e80:	ec 01       	movw	r28, r24
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	21 f4       	brne	.+8      	; 0x1e8e <realloc+0x1a>
    1e86:	cb 01       	movw	r24, r22
    1e88:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <malloc>
    1e8c:	b4 c0       	rjmp	.+360    	; 0x1ff6 <realloc+0x182>
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e6 0f       	add	r30, r22
    1e92:	f7 1f       	adc	r31, r23
    1e94:	9c 01       	movw	r18, r24
    1e96:	22 50       	subi	r18, 0x02	; 2
    1e98:	31 09       	sbc	r19, r1
    1e9a:	e2 17       	cp	r30, r18
    1e9c:	f3 07       	cpc	r31, r19
    1e9e:	08 f4       	brcc	.+2      	; 0x1ea2 <realloc+0x2e>
    1ea0:	a8 c0       	rjmp	.+336    	; 0x1ff2 <realloc+0x17e>
    1ea2:	d9 01       	movw	r26, r18
    1ea4:	0d 91       	ld	r16, X+
    1ea6:	1c 91       	ld	r17, X
    1ea8:	11 97       	sbiw	r26, 0x01	; 1
    1eaa:	06 17       	cp	r16, r22
    1eac:	17 07       	cpc	r17, r23
    1eae:	b0 f0       	brcs	.+44     	; 0x1edc <realloc+0x68>
    1eb0:	05 30       	cpi	r16, 0x05	; 5
    1eb2:	11 05       	cpc	r17, r1
    1eb4:	08 f4       	brcc	.+2      	; 0x1eb8 <realloc+0x44>
    1eb6:	9b c0       	rjmp	.+310    	; 0x1fee <realloc+0x17a>
    1eb8:	c8 01       	movw	r24, r16
    1eba:	04 97       	sbiw	r24, 0x04	; 4
    1ebc:	86 17       	cp	r24, r22
    1ebe:	97 07       	cpc	r25, r23
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <realloc+0x50>
    1ec2:	95 c0       	rjmp	.+298    	; 0x1fee <realloc+0x17a>
    1ec4:	02 50       	subi	r16, 0x02	; 2
    1ec6:	11 09       	sbc	r17, r1
    1ec8:	06 1b       	sub	r16, r22
    1eca:	17 0b       	sbc	r17, r23
    1ecc:	01 93       	st	Z+, r16
    1ece:	11 93       	st	Z+, r17
    1ed0:	6d 93       	st	X+, r22
    1ed2:	7c 93       	st	X, r23
    1ed4:	cf 01       	movw	r24, r30
    1ed6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <free>
    1eda:	89 c0       	rjmp	.+274    	; 0x1fee <realloc+0x17a>
    1edc:	5b 01       	movw	r10, r22
    1ede:	a0 1a       	sub	r10, r16
    1ee0:	b1 0a       	sbc	r11, r17
    1ee2:	4c 01       	movw	r8, r24
    1ee4:	80 0e       	add	r8, r16
    1ee6:	91 1e       	adc	r9, r17
    1ee8:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <__flp>
    1eec:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <__flp+0x1>
    1ef0:	61 2c       	mov	r6, r1
    1ef2:	71 2c       	mov	r7, r1
    1ef4:	e1 2c       	mov	r14, r1
    1ef6:	f1 2c       	mov	r15, r1
    1ef8:	10 97       	sbiw	r26, 0x00	; 0
    1efa:	09 f4       	brne	.+2      	; 0x1efe <realloc+0x8a>
    1efc:	46 c0       	rjmp	.+140    	; 0x1f8a <realloc+0x116>
    1efe:	8d 91       	ld	r24, X+
    1f00:	9c 91       	ld	r25, X
    1f02:	11 97       	sbiw	r26, 0x01	; 1
    1f04:	a8 15       	cp	r26, r8
    1f06:	b9 05       	cpc	r27, r9
    1f08:	b1 f5       	brne	.+108    	; 0x1f76 <realloc+0x102>
    1f0a:	6c 01       	movw	r12, r24
    1f0c:	42 e0       	ldi	r20, 0x02	; 2
    1f0e:	c4 0e       	add	r12, r20
    1f10:	d1 1c       	adc	r13, r1
    1f12:	ca 14       	cp	r12, r10
    1f14:	db 04       	cpc	r13, r11
    1f16:	78 f1       	brcs	.+94     	; 0x1f76 <realloc+0x102>
    1f18:	4c 01       	movw	r8, r24
    1f1a:	8a 18       	sub	r8, r10
    1f1c:	9b 08       	sbc	r9, r11
    1f1e:	64 01       	movw	r12, r8
    1f20:	42 e0       	ldi	r20, 0x02	; 2
    1f22:	c4 0e       	add	r12, r20
    1f24:	d1 1c       	adc	r13, r1
    1f26:	12 96       	adiw	r26, 0x02	; 2
    1f28:	bc 90       	ld	r11, X
    1f2a:	12 97       	sbiw	r26, 0x02	; 2
    1f2c:	13 96       	adiw	r26, 0x03	; 3
    1f2e:	ac 91       	ld	r26, X
    1f30:	b5 e0       	ldi	r27, 0x05	; 5
    1f32:	cb 16       	cp	r12, r27
    1f34:	d1 04       	cpc	r13, r1
    1f36:	40 f0       	brcs	.+16     	; 0x1f48 <realloc+0xd4>
    1f38:	b2 82       	std	Z+2, r11	; 0x02
    1f3a:	a3 83       	std	Z+3, r26	; 0x03
    1f3c:	91 82       	std	Z+1, r9	; 0x01
    1f3e:	80 82       	st	Z, r8
    1f40:	d9 01       	movw	r26, r18
    1f42:	6d 93       	st	X+, r22
    1f44:	7c 93       	st	X, r23
    1f46:	09 c0       	rjmp	.+18     	; 0x1f5a <realloc+0xe6>
    1f48:	0e 5f       	subi	r16, 0xFE	; 254
    1f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4c:	80 0f       	add	r24, r16
    1f4e:	91 1f       	adc	r25, r17
    1f50:	f9 01       	movw	r30, r18
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	80 83       	st	Z, r24
    1f56:	eb 2d       	mov	r30, r11
    1f58:	fa 2f       	mov	r31, r26
    1f5a:	e1 14       	cp	r14, r1
    1f5c:	f1 04       	cpc	r15, r1
    1f5e:	31 f0       	breq	.+12     	; 0x1f6c <realloc+0xf8>
    1f60:	d7 01       	movw	r26, r14
    1f62:	13 96       	adiw	r26, 0x03	; 3
    1f64:	fc 93       	st	X, r31
    1f66:	ee 93       	st	-X, r30
    1f68:	12 97       	sbiw	r26, 0x02	; 2
    1f6a:	41 c0       	rjmp	.+130    	; 0x1fee <realloc+0x17a>
    1f6c:	f0 93 68 02 	sts	0x0268, r31	; 0x800268 <__flp+0x1>
    1f70:	e0 93 67 02 	sts	0x0267, r30	; 0x800267 <__flp>
    1f74:	3c c0       	rjmp	.+120    	; 0x1fee <realloc+0x17a>
    1f76:	68 16       	cp	r6, r24
    1f78:	79 06       	cpc	r7, r25
    1f7a:	08 f4       	brcc	.+2      	; 0x1f7e <realloc+0x10a>
    1f7c:	3c 01       	movw	r6, r24
    1f7e:	7d 01       	movw	r14, r26
    1f80:	12 96       	adiw	r26, 0x02	; 2
    1f82:	0d 90       	ld	r0, X+
    1f84:	bc 91       	ld	r27, X
    1f86:	a0 2d       	mov	r26, r0
    1f88:	b7 cf       	rjmp	.-146    	; 0x1ef8 <realloc+0x84>
    1f8a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <__brkval>
    1f8e:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <__brkval+0x1>
    1f92:	88 16       	cp	r8, r24
    1f94:	99 06       	cpc	r9, r25
    1f96:	e1 f4       	brne	.+56     	; 0x1fd0 <realloc+0x15c>
    1f98:	66 16       	cp	r6, r22
    1f9a:	77 06       	cpc	r7, r23
    1f9c:	c8 f4       	brcc	.+50     	; 0x1fd0 <realloc+0x15c>
    1f9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1fa2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	41 f4       	brne	.+16     	; 0x1fba <realloc+0x146>
    1faa:	8d b7       	in	r24, 0x3d	; 61
    1fac:	9e b7       	in	r25, 0x3e	; 62
    1fae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1fb2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1fb6:	84 1b       	sub	r24, r20
    1fb8:	95 0b       	sbc	r25, r21
    1fba:	e8 17       	cp	r30, r24
    1fbc:	f9 07       	cpc	r31, r25
    1fbe:	c8 f4       	brcc	.+50     	; 0x1ff2 <realloc+0x17e>
    1fc0:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__brkval+0x1>
    1fc4:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__brkval>
    1fc8:	f9 01       	movw	r30, r18
    1fca:	71 83       	std	Z+1, r23	; 0x01
    1fcc:	60 83       	st	Z, r22
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <realloc+0x17a>
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <malloc>
    1fd6:	7c 01       	movw	r14, r24
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	59 f0       	breq	.+22     	; 0x1ff2 <realloc+0x17e>
    1fdc:	a8 01       	movw	r20, r16
    1fde:	be 01       	movw	r22, r28
    1fe0:	0e 94 07 10 	call	0x200e	; 0x200e <memcpy>
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <free>
    1fea:	c7 01       	movw	r24, r14
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <realloc+0x182>
    1fee:	ce 01       	movw	r24, r28
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <realloc+0x182>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	ee e0       	ldi	r30, 0x0E	; 14
    1ffc:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__epilogue_restores__+0x8>

00002000 <strcpy_P>:
    2000:	fb 01       	movw	r30, r22
    2002:	dc 01       	movw	r26, r24
    2004:	05 90       	lpm	r0, Z+
    2006:	0d 92       	st	X+, r0
    2008:	00 20       	and	r0, r0
    200a:	e1 f7       	brne	.-8      	; 0x2004 <strcpy_P+0x4>
    200c:	08 95       	ret

0000200e <memcpy>:
    200e:	fb 01       	movw	r30, r22
    2010:	dc 01       	movw	r26, r24
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <memcpy+0xa>
    2014:	01 90       	ld	r0, Z+
    2016:	0d 92       	st	X+, r0
    2018:	41 50       	subi	r20, 0x01	; 1
    201a:	50 40       	sbci	r21, 0x00	; 0
    201c:	d8 f7       	brcc	.-10     	; 0x2014 <memcpy+0x6>
    201e:	08 95       	ret

00002020 <strcat>:
    2020:	fb 01       	movw	r30, r22
    2022:	dc 01       	movw	r26, r24
    2024:	0d 90       	ld	r0, X+
    2026:	00 20       	and	r0, r0
    2028:	e9 f7       	brne	.-6      	; 0x2024 <strcat+0x4>
    202a:	11 97       	sbiw	r26, 0x01	; 1
    202c:	01 90       	ld	r0, Z+
    202e:	0d 92       	st	X+, r0
    2030:	00 20       	and	r0, r0
    2032:	e1 f7       	brne	.-8      	; 0x202c <strcat+0xc>
    2034:	08 95       	ret

00002036 <fdevopen>:
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	31 f4       	brne	.+12     	; 0x204e <fdevopen+0x18>
    2042:	61 15       	cp	r22, r1
    2044:	71 05       	cpc	r23, r1
    2046:	19 f4       	brne	.+6      	; 0x204e <fdevopen+0x18>
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	3a c0       	rjmp	.+116    	; 0x20c2 <fdevopen+0x8c>
    204e:	8b 01       	movw	r16, r22
    2050:	ec 01       	movw	r28, r24
    2052:	6e e0       	ldi	r22, 0x0E	; 14
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <calloc>
    205e:	fc 01       	movw	r30, r24
    2060:	89 2b       	or	r24, r25
    2062:	91 f3       	breq	.-28     	; 0x2048 <fdevopen+0x12>
    2064:	80 e8       	ldi	r24, 0x80	; 128
    2066:	83 83       	std	Z+3, r24	; 0x03
    2068:	01 15       	cp	r16, r1
    206a:	11 05       	cpc	r17, r1
    206c:	71 f0       	breq	.+28     	; 0x208a <fdevopen+0x54>
    206e:	13 87       	std	Z+11, r17	; 0x0b
    2070:	02 87       	std	Z+10, r16	; 0x0a
    2072:	81 e8       	ldi	r24, 0x81	; 129
    2074:	83 83       	std	Z+3, r24	; 0x03
    2076:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <__iob>
    207a:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <__iob+0x1>
    207e:	89 2b       	or	r24, r25
    2080:	21 f4       	brne	.+8      	; 0x208a <fdevopen+0x54>
    2082:	f0 93 6a 02 	sts	0x026A, r31	; 0x80026a <__iob+0x1>
    2086:	e0 93 69 02 	sts	0x0269, r30	; 0x800269 <__iob>
    208a:	20 97       	sbiw	r28, 0x00	; 0
    208c:	c9 f0       	breq	.+50     	; 0x20c0 <fdevopen+0x8a>
    208e:	d1 87       	std	Z+9, r29	; 0x09
    2090:	c0 87       	std	Z+8, r28	; 0x08
    2092:	83 81       	ldd	r24, Z+3	; 0x03
    2094:	82 60       	ori	r24, 0x02	; 2
    2096:	83 83       	std	Z+3, r24	; 0x03
    2098:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <__iob+0x2>
    209c:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <__iob+0x3>
    20a0:	89 2b       	or	r24, r25
    20a2:	71 f4       	brne	.+28     	; 0x20c0 <fdevopen+0x8a>
    20a4:	f0 93 6c 02 	sts	0x026C, r31	; 0x80026c <__iob+0x3>
    20a8:	e0 93 6b 02 	sts	0x026B, r30	; 0x80026b <__iob+0x2>
    20ac:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <__iob+0x4>
    20b0:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <__iob+0x5>
    20b4:	89 2b       	or	r24, r25
    20b6:	21 f4       	brne	.+8      	; 0x20c0 <fdevopen+0x8a>
    20b8:	f0 93 6e 02 	sts	0x026E, r31	; 0x80026e <__iob+0x5>
    20bc:	e0 93 6d 02 	sts	0x026D, r30	; 0x80026d <__iob+0x4>
    20c0:	cf 01       	movw	r24, r30
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	08 95       	ret

000020cc <printf>:
    20cc:	a0 e0       	ldi	r26, 0x00	; 0
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ec e6       	ldi	r30, 0x6C	; 108
    20d2:	f0 e1       	ldi	r31, 0x10	; 16
    20d4:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__prologue_saves__+0x20>
    20d8:	ae 01       	movw	r20, r28
    20da:	4b 5f       	subi	r20, 0xFB	; 251
    20dc:	5f 4f       	sbci	r21, 0xFF	; 255
    20de:	fa 01       	movw	r30, r20
    20e0:	61 91       	ld	r22, Z+
    20e2:	71 91       	ld	r23, Z+
    20e4:	af 01       	movw	r20, r30
    20e6:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <__iob+0x2>
    20ea:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <__iob+0x3>
    20ee:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <vfprintf>
    20f2:	e2 e0       	ldi	r30, 0x02	; 2
    20f4:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__epilogue_restores__+0x20>

000020f8 <vfprintf>:
    20f8:	ab e0       	ldi	r26, 0x0B	; 11
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e2 e8       	ldi	r30, 0x82	; 130
    20fe:	f0 e1       	ldi	r31, 0x10	; 16
    2100:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__prologue_saves__>
    2104:	6c 01       	movw	r12, r24
    2106:	7b 01       	movw	r14, r22
    2108:	8a 01       	movw	r16, r20
    210a:	fc 01       	movw	r30, r24
    210c:	17 82       	std	Z+7, r1	; 0x07
    210e:	16 82       	std	Z+6, r1	; 0x06
    2110:	83 81       	ldd	r24, Z+3	; 0x03
    2112:	81 ff       	sbrs	r24, 1
    2114:	cc c1       	rjmp	.+920    	; 0x24ae <vfprintf+0x3b6>
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	3c 01       	movw	r6, r24
    211c:	f6 01       	movw	r30, r12
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	f7 01       	movw	r30, r14
    2122:	93 fd       	sbrc	r25, 3
    2124:	85 91       	lpm	r24, Z+
    2126:	93 ff       	sbrs	r25, 3
    2128:	81 91       	ld	r24, Z+
    212a:	7f 01       	movw	r14, r30
    212c:	88 23       	and	r24, r24
    212e:	09 f4       	brne	.+2      	; 0x2132 <vfprintf+0x3a>
    2130:	ba c1       	rjmp	.+884    	; 0x24a6 <vfprintf+0x3ae>
    2132:	85 32       	cpi	r24, 0x25	; 37
    2134:	39 f4       	brne	.+14     	; 0x2144 <vfprintf+0x4c>
    2136:	93 fd       	sbrc	r25, 3
    2138:	85 91       	lpm	r24, Z+
    213a:	93 ff       	sbrs	r25, 3
    213c:	81 91       	ld	r24, Z+
    213e:	7f 01       	movw	r14, r30
    2140:	85 32       	cpi	r24, 0x25	; 37
    2142:	29 f4       	brne	.+10     	; 0x214e <vfprintf+0x56>
    2144:	b6 01       	movw	r22, r12
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    214c:	e7 cf       	rjmp	.-50     	; 0x211c <vfprintf+0x24>
    214e:	91 2c       	mov	r9, r1
    2150:	21 2c       	mov	r2, r1
    2152:	31 2c       	mov	r3, r1
    2154:	ff e1       	ldi	r31, 0x1F	; 31
    2156:	f3 15       	cp	r31, r3
    2158:	d8 f0       	brcs	.+54     	; 0x2190 <vfprintf+0x98>
    215a:	8b 32       	cpi	r24, 0x2B	; 43
    215c:	79 f0       	breq	.+30     	; 0x217c <vfprintf+0x84>
    215e:	38 f4       	brcc	.+14     	; 0x216e <vfprintf+0x76>
    2160:	80 32       	cpi	r24, 0x20	; 32
    2162:	79 f0       	breq	.+30     	; 0x2182 <vfprintf+0x8a>
    2164:	83 32       	cpi	r24, 0x23	; 35
    2166:	a1 f4       	brne	.+40     	; 0x2190 <vfprintf+0x98>
    2168:	23 2d       	mov	r18, r3
    216a:	20 61       	ori	r18, 0x10	; 16
    216c:	1d c0       	rjmp	.+58     	; 0x21a8 <vfprintf+0xb0>
    216e:	8d 32       	cpi	r24, 0x2D	; 45
    2170:	61 f0       	breq	.+24     	; 0x218a <vfprintf+0x92>
    2172:	80 33       	cpi	r24, 0x30	; 48
    2174:	69 f4       	brne	.+26     	; 0x2190 <vfprintf+0x98>
    2176:	23 2d       	mov	r18, r3
    2178:	21 60       	ori	r18, 0x01	; 1
    217a:	16 c0       	rjmp	.+44     	; 0x21a8 <vfprintf+0xb0>
    217c:	83 2d       	mov	r24, r3
    217e:	82 60       	ori	r24, 0x02	; 2
    2180:	38 2e       	mov	r3, r24
    2182:	e3 2d       	mov	r30, r3
    2184:	e4 60       	ori	r30, 0x04	; 4
    2186:	3e 2e       	mov	r3, r30
    2188:	2a c0       	rjmp	.+84     	; 0x21de <vfprintf+0xe6>
    218a:	f3 2d       	mov	r31, r3
    218c:	f8 60       	ori	r31, 0x08	; 8
    218e:	1d c0       	rjmp	.+58     	; 0x21ca <vfprintf+0xd2>
    2190:	37 fc       	sbrc	r3, 7
    2192:	2d c0       	rjmp	.+90     	; 0x21ee <vfprintf+0xf6>
    2194:	20 ed       	ldi	r18, 0xD0	; 208
    2196:	28 0f       	add	r18, r24
    2198:	2a 30       	cpi	r18, 0x0A	; 10
    219a:	40 f0       	brcs	.+16     	; 0x21ac <vfprintf+0xb4>
    219c:	8e 32       	cpi	r24, 0x2E	; 46
    219e:	b9 f4       	brne	.+46     	; 0x21ce <vfprintf+0xd6>
    21a0:	36 fc       	sbrc	r3, 6
    21a2:	81 c1       	rjmp	.+770    	; 0x24a6 <vfprintf+0x3ae>
    21a4:	23 2d       	mov	r18, r3
    21a6:	20 64       	ori	r18, 0x40	; 64
    21a8:	32 2e       	mov	r3, r18
    21aa:	19 c0       	rjmp	.+50     	; 0x21de <vfprintf+0xe6>
    21ac:	36 fe       	sbrs	r3, 6
    21ae:	06 c0       	rjmp	.+12     	; 0x21bc <vfprintf+0xc4>
    21b0:	8a e0       	ldi	r24, 0x0A	; 10
    21b2:	98 9e       	mul	r9, r24
    21b4:	20 0d       	add	r18, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	92 2e       	mov	r9, r18
    21ba:	11 c0       	rjmp	.+34     	; 0x21de <vfprintf+0xe6>
    21bc:	ea e0       	ldi	r30, 0x0A	; 10
    21be:	2e 9e       	mul	r2, r30
    21c0:	20 0d       	add	r18, r0
    21c2:	11 24       	eor	r1, r1
    21c4:	22 2e       	mov	r2, r18
    21c6:	f3 2d       	mov	r31, r3
    21c8:	f0 62       	ori	r31, 0x20	; 32
    21ca:	3f 2e       	mov	r3, r31
    21cc:	08 c0       	rjmp	.+16     	; 0x21de <vfprintf+0xe6>
    21ce:	8c 36       	cpi	r24, 0x6C	; 108
    21d0:	21 f4       	brne	.+8      	; 0x21da <vfprintf+0xe2>
    21d2:	83 2d       	mov	r24, r3
    21d4:	80 68       	ori	r24, 0x80	; 128
    21d6:	38 2e       	mov	r3, r24
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <vfprintf+0xe6>
    21da:	88 36       	cpi	r24, 0x68	; 104
    21dc:	41 f4       	brne	.+16     	; 0x21ee <vfprintf+0xf6>
    21de:	f7 01       	movw	r30, r14
    21e0:	93 fd       	sbrc	r25, 3
    21e2:	85 91       	lpm	r24, Z+
    21e4:	93 ff       	sbrs	r25, 3
    21e6:	81 91       	ld	r24, Z+
    21e8:	7f 01       	movw	r14, r30
    21ea:	81 11       	cpse	r24, r1
    21ec:	b3 cf       	rjmp	.-154    	; 0x2154 <vfprintf+0x5c>
    21ee:	98 2f       	mov	r25, r24
    21f0:	9f 7d       	andi	r25, 0xDF	; 223
    21f2:	95 54       	subi	r25, 0x45	; 69
    21f4:	93 30       	cpi	r25, 0x03	; 3
    21f6:	28 f4       	brcc	.+10     	; 0x2202 <vfprintf+0x10a>
    21f8:	0c 5f       	subi	r16, 0xFC	; 252
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	9f e3       	ldi	r25, 0x3F	; 63
    21fe:	99 83       	std	Y+1, r25	; 0x01
    2200:	0d c0       	rjmp	.+26     	; 0x221c <vfprintf+0x124>
    2202:	83 36       	cpi	r24, 0x63	; 99
    2204:	31 f0       	breq	.+12     	; 0x2212 <vfprintf+0x11a>
    2206:	83 37       	cpi	r24, 0x73	; 115
    2208:	71 f0       	breq	.+28     	; 0x2226 <vfprintf+0x12e>
    220a:	83 35       	cpi	r24, 0x53	; 83
    220c:	09 f0       	breq	.+2      	; 0x2210 <vfprintf+0x118>
    220e:	59 c0       	rjmp	.+178    	; 0x22c2 <vfprintf+0x1ca>
    2210:	21 c0       	rjmp	.+66     	; 0x2254 <vfprintf+0x15c>
    2212:	f8 01       	movw	r30, r16
    2214:	80 81       	ld	r24, Z
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	0e 5f       	subi	r16, 0xFE	; 254
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	88 24       	eor	r8, r8
    221e:	83 94       	inc	r8
    2220:	91 2c       	mov	r9, r1
    2222:	53 01       	movw	r10, r6
    2224:	13 c0       	rjmp	.+38     	; 0x224c <vfprintf+0x154>
    2226:	28 01       	movw	r4, r16
    2228:	f2 e0       	ldi	r31, 0x02	; 2
    222a:	4f 0e       	add	r4, r31
    222c:	51 1c       	adc	r5, r1
    222e:	f8 01       	movw	r30, r16
    2230:	a0 80       	ld	r10, Z
    2232:	b1 80       	ldd	r11, Z+1	; 0x01
    2234:	36 fe       	sbrs	r3, 6
    2236:	03 c0       	rjmp	.+6      	; 0x223e <vfprintf+0x146>
    2238:	69 2d       	mov	r22, r9
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <vfprintf+0x14a>
    223e:	6f ef       	ldi	r22, 0xFF	; 255
    2240:	7f ef       	ldi	r23, 0xFF	; 255
    2242:	c5 01       	movw	r24, r10
    2244:	0e 94 8b 12 	call	0x2516	; 0x2516 <strnlen>
    2248:	4c 01       	movw	r8, r24
    224a:	82 01       	movw	r16, r4
    224c:	f3 2d       	mov	r31, r3
    224e:	ff 77       	andi	r31, 0x7F	; 127
    2250:	3f 2e       	mov	r3, r31
    2252:	16 c0       	rjmp	.+44     	; 0x2280 <vfprintf+0x188>
    2254:	28 01       	movw	r4, r16
    2256:	22 e0       	ldi	r18, 0x02	; 2
    2258:	42 0e       	add	r4, r18
    225a:	51 1c       	adc	r5, r1
    225c:	f8 01       	movw	r30, r16
    225e:	a0 80       	ld	r10, Z
    2260:	b1 80       	ldd	r11, Z+1	; 0x01
    2262:	36 fe       	sbrs	r3, 6
    2264:	03 c0       	rjmp	.+6      	; 0x226c <vfprintf+0x174>
    2266:	69 2d       	mov	r22, r9
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <vfprintf+0x178>
    226c:	6f ef       	ldi	r22, 0xFF	; 255
    226e:	7f ef       	ldi	r23, 0xFF	; 255
    2270:	c5 01       	movw	r24, r10
    2272:	0e 94 79 12 	call	0x24f2	; 0x24f2 <strnlen_P>
    2276:	4c 01       	movw	r8, r24
    2278:	f3 2d       	mov	r31, r3
    227a:	f0 68       	ori	r31, 0x80	; 128
    227c:	3f 2e       	mov	r3, r31
    227e:	82 01       	movw	r16, r4
    2280:	33 fc       	sbrc	r3, 3
    2282:	1b c0       	rjmp	.+54     	; 0x22ba <vfprintf+0x1c2>
    2284:	82 2d       	mov	r24, r2
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	88 16       	cp	r8, r24
    228a:	99 06       	cpc	r9, r25
    228c:	b0 f4       	brcc	.+44     	; 0x22ba <vfprintf+0x1c2>
    228e:	b6 01       	movw	r22, r12
    2290:	80 e2       	ldi	r24, 0x20	; 32
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    2298:	2a 94       	dec	r2
    229a:	f4 cf       	rjmp	.-24     	; 0x2284 <vfprintf+0x18c>
    229c:	f5 01       	movw	r30, r10
    229e:	37 fc       	sbrc	r3, 7
    22a0:	85 91       	lpm	r24, Z+
    22a2:	37 fe       	sbrs	r3, 7
    22a4:	81 91       	ld	r24, Z+
    22a6:	5f 01       	movw	r10, r30
    22a8:	b6 01       	movw	r22, r12
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    22b0:	21 10       	cpse	r2, r1
    22b2:	2a 94       	dec	r2
    22b4:	21 e0       	ldi	r18, 0x01	; 1
    22b6:	82 1a       	sub	r8, r18
    22b8:	91 08       	sbc	r9, r1
    22ba:	81 14       	cp	r8, r1
    22bc:	91 04       	cpc	r9, r1
    22be:	71 f7       	brne	.-36     	; 0x229c <vfprintf+0x1a4>
    22c0:	e8 c0       	rjmp	.+464    	; 0x2492 <vfprintf+0x39a>
    22c2:	84 36       	cpi	r24, 0x64	; 100
    22c4:	11 f0       	breq	.+4      	; 0x22ca <vfprintf+0x1d2>
    22c6:	89 36       	cpi	r24, 0x69	; 105
    22c8:	41 f5       	brne	.+80     	; 0x231a <vfprintf+0x222>
    22ca:	f8 01       	movw	r30, r16
    22cc:	37 fe       	sbrs	r3, 7
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <vfprintf+0x1e6>
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	0c 5f       	subi	r16, 0xFC	; 252
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	08 c0       	rjmp	.+16     	; 0x22ee <vfprintf+0x1f6>
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	07 2e       	mov	r0, r23
    22e4:	00 0c       	add	r0, r0
    22e6:	88 0b       	sbc	r24, r24
    22e8:	99 0b       	sbc	r25, r25
    22ea:	0e 5f       	subi	r16, 0xFE	; 254
    22ec:	1f 4f       	sbci	r17, 0xFF	; 255
    22ee:	f3 2d       	mov	r31, r3
    22f0:	ff 76       	andi	r31, 0x6F	; 111
    22f2:	3f 2e       	mov	r3, r31
    22f4:	97 ff       	sbrs	r25, 7
    22f6:	09 c0       	rjmp	.+18     	; 0x230a <vfprintf+0x212>
    22f8:	90 95       	com	r25
    22fa:	80 95       	com	r24
    22fc:	70 95       	com	r23
    22fe:	61 95       	neg	r22
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	8f 4f       	sbci	r24, 0xFF	; 255
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	f0 68       	ori	r31, 0x80	; 128
    2308:	3f 2e       	mov	r3, r31
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	a3 01       	movw	r20, r6
    2310:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <__ultoa_invert>
    2314:	88 2e       	mov	r8, r24
    2316:	86 18       	sub	r8, r6
    2318:	45 c0       	rjmp	.+138    	; 0x23a4 <vfprintf+0x2ac>
    231a:	85 37       	cpi	r24, 0x75	; 117
    231c:	31 f4       	brne	.+12     	; 0x232a <vfprintf+0x232>
    231e:	23 2d       	mov	r18, r3
    2320:	2f 7e       	andi	r18, 0xEF	; 239
    2322:	b2 2e       	mov	r11, r18
    2324:	2a e0       	ldi	r18, 0x0A	; 10
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	25 c0       	rjmp	.+74     	; 0x2374 <vfprintf+0x27c>
    232a:	93 2d       	mov	r25, r3
    232c:	99 7f       	andi	r25, 0xF9	; 249
    232e:	b9 2e       	mov	r11, r25
    2330:	8f 36       	cpi	r24, 0x6F	; 111
    2332:	c1 f0       	breq	.+48     	; 0x2364 <vfprintf+0x26c>
    2334:	18 f4       	brcc	.+6      	; 0x233c <vfprintf+0x244>
    2336:	88 35       	cpi	r24, 0x58	; 88
    2338:	79 f0       	breq	.+30     	; 0x2358 <vfprintf+0x260>
    233a:	b5 c0       	rjmp	.+362    	; 0x24a6 <vfprintf+0x3ae>
    233c:	80 37       	cpi	r24, 0x70	; 112
    233e:	19 f0       	breq	.+6      	; 0x2346 <vfprintf+0x24e>
    2340:	88 37       	cpi	r24, 0x78	; 120
    2342:	21 f0       	breq	.+8      	; 0x234c <vfprintf+0x254>
    2344:	b0 c0       	rjmp	.+352    	; 0x24a6 <vfprintf+0x3ae>
    2346:	e9 2f       	mov	r30, r25
    2348:	e0 61       	ori	r30, 0x10	; 16
    234a:	be 2e       	mov	r11, r30
    234c:	b4 fe       	sbrs	r11, 4
    234e:	0d c0       	rjmp	.+26     	; 0x236a <vfprintf+0x272>
    2350:	fb 2d       	mov	r31, r11
    2352:	f4 60       	ori	r31, 0x04	; 4
    2354:	bf 2e       	mov	r11, r31
    2356:	09 c0       	rjmp	.+18     	; 0x236a <vfprintf+0x272>
    2358:	34 fe       	sbrs	r3, 4
    235a:	0a c0       	rjmp	.+20     	; 0x2370 <vfprintf+0x278>
    235c:	29 2f       	mov	r18, r25
    235e:	26 60       	ori	r18, 0x06	; 6
    2360:	b2 2e       	mov	r11, r18
    2362:	06 c0       	rjmp	.+12     	; 0x2370 <vfprintf+0x278>
    2364:	28 e0       	ldi	r18, 0x08	; 8
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <vfprintf+0x27c>
    236a:	20 e1       	ldi	r18, 0x10	; 16
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <vfprintf+0x27c>
    2370:	20 e1       	ldi	r18, 0x10	; 16
    2372:	32 e0       	ldi	r19, 0x02	; 2
    2374:	f8 01       	movw	r30, r16
    2376:	b7 fe       	sbrs	r11, 7
    2378:	07 c0       	rjmp	.+14     	; 0x2388 <vfprintf+0x290>
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	0c 5f       	subi	r16, 0xFC	; 252
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <vfprintf+0x29c>
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 5f       	subi	r16, 0xFE	; 254
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	a3 01       	movw	r20, r6
    2396:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <__ultoa_invert>
    239a:	88 2e       	mov	r8, r24
    239c:	86 18       	sub	r8, r6
    239e:	fb 2d       	mov	r31, r11
    23a0:	ff 77       	andi	r31, 0x7F	; 127
    23a2:	3f 2e       	mov	r3, r31
    23a4:	36 fe       	sbrs	r3, 6
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <vfprintf+0x2ca>
    23a8:	23 2d       	mov	r18, r3
    23aa:	2e 7f       	andi	r18, 0xFE	; 254
    23ac:	a2 2e       	mov	r10, r18
    23ae:	89 14       	cp	r8, r9
    23b0:	58 f4       	brcc	.+22     	; 0x23c8 <vfprintf+0x2d0>
    23b2:	34 fe       	sbrs	r3, 4
    23b4:	0b c0       	rjmp	.+22     	; 0x23cc <vfprintf+0x2d4>
    23b6:	32 fc       	sbrc	r3, 2
    23b8:	09 c0       	rjmp	.+18     	; 0x23cc <vfprintf+0x2d4>
    23ba:	83 2d       	mov	r24, r3
    23bc:	8e 7e       	andi	r24, 0xEE	; 238
    23be:	a8 2e       	mov	r10, r24
    23c0:	05 c0       	rjmp	.+10     	; 0x23cc <vfprintf+0x2d4>
    23c2:	b8 2c       	mov	r11, r8
    23c4:	a3 2c       	mov	r10, r3
    23c6:	03 c0       	rjmp	.+6      	; 0x23ce <vfprintf+0x2d6>
    23c8:	b8 2c       	mov	r11, r8
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <vfprintf+0x2d6>
    23cc:	b9 2c       	mov	r11, r9
    23ce:	a4 fe       	sbrs	r10, 4
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <vfprintf+0x2f8>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e8 0d       	add	r30, r8
    23d6:	f1 1d       	adc	r31, r1
    23d8:	80 81       	ld	r24, Z
    23da:	80 33       	cpi	r24, 0x30	; 48
    23dc:	21 f4       	brne	.+8      	; 0x23e6 <vfprintf+0x2ee>
    23de:	9a 2d       	mov	r25, r10
    23e0:	99 7e       	andi	r25, 0xE9	; 233
    23e2:	a9 2e       	mov	r10, r25
    23e4:	09 c0       	rjmp	.+18     	; 0x23f8 <vfprintf+0x300>
    23e6:	a2 fe       	sbrs	r10, 2
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <vfprintf+0x2fe>
    23ea:	b3 94       	inc	r11
    23ec:	b3 94       	inc	r11
    23ee:	04 c0       	rjmp	.+8      	; 0x23f8 <vfprintf+0x300>
    23f0:	8a 2d       	mov	r24, r10
    23f2:	86 78       	andi	r24, 0x86	; 134
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <vfprintf+0x300>
    23f6:	b3 94       	inc	r11
    23f8:	a3 fc       	sbrc	r10, 3
    23fa:	11 c0       	rjmp	.+34     	; 0x241e <vfprintf+0x326>
    23fc:	a0 fe       	sbrs	r10, 0
    23fe:	06 c0       	rjmp	.+12     	; 0x240c <vfprintf+0x314>
    2400:	b2 14       	cp	r11, r2
    2402:	88 f4       	brcc	.+34     	; 0x2426 <vfprintf+0x32e>
    2404:	28 0c       	add	r2, r8
    2406:	92 2c       	mov	r9, r2
    2408:	9b 18       	sub	r9, r11
    240a:	0e c0       	rjmp	.+28     	; 0x2428 <vfprintf+0x330>
    240c:	b2 14       	cp	r11, r2
    240e:	60 f4       	brcc	.+24     	; 0x2428 <vfprintf+0x330>
    2410:	b6 01       	movw	r22, r12
    2412:	80 e2       	ldi	r24, 0x20	; 32
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    241a:	b3 94       	inc	r11
    241c:	f7 cf       	rjmp	.-18     	; 0x240c <vfprintf+0x314>
    241e:	b2 14       	cp	r11, r2
    2420:	18 f4       	brcc	.+6      	; 0x2428 <vfprintf+0x330>
    2422:	2b 18       	sub	r2, r11
    2424:	02 c0       	rjmp	.+4      	; 0x242a <vfprintf+0x332>
    2426:	98 2c       	mov	r9, r8
    2428:	21 2c       	mov	r2, r1
    242a:	a4 fe       	sbrs	r10, 4
    242c:	10 c0       	rjmp	.+32     	; 0x244e <vfprintf+0x356>
    242e:	b6 01       	movw	r22, r12
    2430:	80 e3       	ldi	r24, 0x30	; 48
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    2438:	a2 fe       	sbrs	r10, 2
    243a:	17 c0       	rjmp	.+46     	; 0x246a <vfprintf+0x372>
    243c:	a1 fc       	sbrc	r10, 1
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <vfprintf+0x34e>
    2440:	88 e7       	ldi	r24, 0x78	; 120
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	02 c0       	rjmp	.+4      	; 0x244a <vfprintf+0x352>
    2446:	88 e5       	ldi	r24, 0x58	; 88
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	b6 01       	movw	r22, r12
    244c:	0c c0       	rjmp	.+24     	; 0x2466 <vfprintf+0x36e>
    244e:	8a 2d       	mov	r24, r10
    2450:	86 78       	andi	r24, 0x86	; 134
    2452:	59 f0       	breq	.+22     	; 0x246a <vfprintf+0x372>
    2454:	a1 fe       	sbrs	r10, 1
    2456:	02 c0       	rjmp	.+4      	; 0x245c <vfprintf+0x364>
    2458:	8b e2       	ldi	r24, 0x2B	; 43
    245a:	01 c0       	rjmp	.+2      	; 0x245e <vfprintf+0x366>
    245c:	80 e2       	ldi	r24, 0x20	; 32
    245e:	a7 fc       	sbrc	r10, 7
    2460:	8d e2       	ldi	r24, 0x2D	; 45
    2462:	b6 01       	movw	r22, r12
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    246a:	89 14       	cp	r8, r9
    246c:	38 f4       	brcc	.+14     	; 0x247c <vfprintf+0x384>
    246e:	b6 01       	movw	r22, r12
    2470:	80 e3       	ldi	r24, 0x30	; 48
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    2478:	9a 94       	dec	r9
    247a:	f7 cf       	rjmp	.-18     	; 0x246a <vfprintf+0x372>
    247c:	8a 94       	dec	r8
    247e:	f3 01       	movw	r30, r6
    2480:	e8 0d       	add	r30, r8
    2482:	f1 1d       	adc	r31, r1
    2484:	80 81       	ld	r24, Z
    2486:	b6 01       	movw	r22, r12
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    248e:	81 10       	cpse	r8, r1
    2490:	f5 cf       	rjmp	.-22     	; 0x247c <vfprintf+0x384>
    2492:	22 20       	and	r2, r2
    2494:	09 f4       	brne	.+2      	; 0x2498 <vfprintf+0x3a0>
    2496:	42 ce       	rjmp	.-892    	; 0x211c <vfprintf+0x24>
    2498:	b6 01       	movw	r22, r12
    249a:	80 e2       	ldi	r24, 0x20	; 32
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 96 12 	call	0x252c	; 0x252c <fputc>
    24a2:	2a 94       	dec	r2
    24a4:	f6 cf       	rjmp	.-20     	; 0x2492 <vfprintf+0x39a>
    24a6:	f6 01       	movw	r30, r12
    24a8:	86 81       	ldd	r24, Z+6	; 0x06
    24aa:	97 81       	ldd	r25, Z+7	; 0x07
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <vfprintf+0x3ba>
    24ae:	8f ef       	ldi	r24, 0xFF	; 255
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	2b 96       	adiw	r28, 0x0b	; 11
    24b4:	e2 e1       	ldi	r30, 0x12	; 18
    24b6:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__epilogue_restores__>

000024ba <calloc>:
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	86 9f       	mul	r24, r22
    24c4:	80 01       	movw	r16, r0
    24c6:	87 9f       	mul	r24, r23
    24c8:	10 0d       	add	r17, r0
    24ca:	96 9f       	mul	r25, r22
    24cc:	10 0d       	add	r17, r0
    24ce:	11 24       	eor	r1, r1
    24d0:	c8 01       	movw	r24, r16
    24d2:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <malloc>
    24d6:	ec 01       	movw	r28, r24
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	29 f0       	breq	.+10     	; 0x24e6 <calloc+0x2c>
    24dc:	a8 01       	movw	r20, r16
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	0e 94 84 12 	call	0x2508	; 0x2508 <memset>
    24e6:	ce 01       	movw	r24, r28
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	08 95       	ret

000024f2 <strnlen_P>:
    24f2:	fc 01       	movw	r30, r24
    24f4:	05 90       	lpm	r0, Z+
    24f6:	61 50       	subi	r22, 0x01	; 1
    24f8:	70 40       	sbci	r23, 0x00	; 0
    24fa:	01 10       	cpse	r0, r1
    24fc:	d8 f7       	brcc	.-10     	; 0x24f4 <strnlen_P+0x2>
    24fe:	80 95       	com	r24
    2500:	90 95       	com	r25
    2502:	8e 0f       	add	r24, r30
    2504:	9f 1f       	adc	r25, r31
    2506:	08 95       	ret

00002508 <memset>:
    2508:	dc 01       	movw	r26, r24
    250a:	01 c0       	rjmp	.+2      	; 0x250e <memset+0x6>
    250c:	6d 93       	st	X+, r22
    250e:	41 50       	subi	r20, 0x01	; 1
    2510:	50 40       	sbci	r21, 0x00	; 0
    2512:	e0 f7       	brcc	.-8      	; 0x250c <memset+0x4>
    2514:	08 95       	ret

00002516 <strnlen>:
    2516:	fc 01       	movw	r30, r24
    2518:	61 50       	subi	r22, 0x01	; 1
    251a:	70 40       	sbci	r23, 0x00	; 0
    251c:	01 90       	ld	r0, Z+
    251e:	01 10       	cpse	r0, r1
    2520:	d8 f7       	brcc	.-10     	; 0x2518 <strnlen+0x2>
    2522:	80 95       	com	r24
    2524:	90 95       	com	r25
    2526:	8e 0f       	add	r24, r30
    2528:	9f 1f       	adc	r25, r31
    252a:	08 95       	ret

0000252c <fputc>:
    252c:	0f 93       	push	r16
    252e:	1f 93       	push	r17
    2530:	cf 93       	push	r28
    2532:	df 93       	push	r29
    2534:	fb 01       	movw	r30, r22
    2536:	23 81       	ldd	r18, Z+3	; 0x03
    2538:	21 fd       	sbrc	r18, 1
    253a:	03 c0       	rjmp	.+6      	; 0x2542 <fputc+0x16>
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	9f ef       	ldi	r25, 0xFF	; 255
    2540:	2c c0       	rjmp	.+88     	; 0x259a <fputc+0x6e>
    2542:	22 ff       	sbrs	r18, 2
    2544:	16 c0       	rjmp	.+44     	; 0x2572 <fputc+0x46>
    2546:	46 81       	ldd	r20, Z+6	; 0x06
    2548:	57 81       	ldd	r21, Z+7	; 0x07
    254a:	24 81       	ldd	r18, Z+4	; 0x04
    254c:	35 81       	ldd	r19, Z+5	; 0x05
    254e:	42 17       	cp	r20, r18
    2550:	53 07       	cpc	r21, r19
    2552:	44 f4       	brge	.+16     	; 0x2564 <fputc+0x38>
    2554:	a0 81       	ld	r26, Z
    2556:	b1 81       	ldd	r27, Z+1	; 0x01
    2558:	9d 01       	movw	r18, r26
    255a:	2f 5f       	subi	r18, 0xFF	; 255
    255c:	3f 4f       	sbci	r19, 0xFF	; 255
    255e:	31 83       	std	Z+1, r19	; 0x01
    2560:	20 83       	st	Z, r18
    2562:	8c 93       	st	X, r24
    2564:	26 81       	ldd	r18, Z+6	; 0x06
    2566:	37 81       	ldd	r19, Z+7	; 0x07
    2568:	2f 5f       	subi	r18, 0xFF	; 255
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	37 83       	std	Z+7, r19	; 0x07
    256e:	26 83       	std	Z+6, r18	; 0x06
    2570:	14 c0       	rjmp	.+40     	; 0x259a <fputc+0x6e>
    2572:	8b 01       	movw	r16, r22
    2574:	ec 01       	movw	r28, r24
    2576:	fb 01       	movw	r30, r22
    2578:	00 84       	ldd	r0, Z+8	; 0x08
    257a:	f1 85       	ldd	r31, Z+9	; 0x09
    257c:	e0 2d       	mov	r30, r0
    257e:	09 95       	icall
    2580:	89 2b       	or	r24, r25
    2582:	e1 f6       	brne	.-72     	; 0x253c <fputc+0x10>
    2584:	d8 01       	movw	r26, r16
    2586:	16 96       	adiw	r26, 0x06	; 6
    2588:	8d 91       	ld	r24, X+
    258a:	9c 91       	ld	r25, X
    258c:	17 97       	sbiw	r26, 0x07	; 7
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	17 96       	adiw	r26, 0x07	; 7
    2592:	9c 93       	st	X, r25
    2594:	8e 93       	st	-X, r24
    2596:	16 97       	sbiw	r26, 0x06	; 6
    2598:	ce 01       	movw	r24, r28
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	08 95       	ret

000025a4 <__ultoa_invert>:
    25a4:	fa 01       	movw	r30, r20
    25a6:	aa 27       	eor	r26, r26
    25a8:	28 30       	cpi	r18, 0x08	; 8
    25aa:	51 f1       	breq	.+84     	; 0x2600 <__ultoa_invert+0x5c>
    25ac:	20 31       	cpi	r18, 0x10	; 16
    25ae:	81 f1       	breq	.+96     	; 0x2610 <__ultoa_invert+0x6c>
    25b0:	e8 94       	clt
    25b2:	6f 93       	push	r22
    25b4:	6e 7f       	andi	r22, 0xFE	; 254
    25b6:	6e 5f       	subi	r22, 0xFE	; 254
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	8f 4f       	sbci	r24, 0xFF	; 255
    25bc:	9f 4f       	sbci	r25, 0xFF	; 255
    25be:	af 4f       	sbci	r26, 0xFF	; 255
    25c0:	b1 e0       	ldi	r27, 0x01	; 1
    25c2:	3e d0       	rcall	.+124    	; 0x2640 <__ultoa_invert+0x9c>
    25c4:	b4 e0       	ldi	r27, 0x04	; 4
    25c6:	3c d0       	rcall	.+120    	; 0x2640 <__ultoa_invert+0x9c>
    25c8:	67 0f       	add	r22, r23
    25ca:	78 1f       	adc	r23, r24
    25cc:	89 1f       	adc	r24, r25
    25ce:	9a 1f       	adc	r25, r26
    25d0:	a1 1d       	adc	r26, r1
    25d2:	68 0f       	add	r22, r24
    25d4:	79 1f       	adc	r23, r25
    25d6:	8a 1f       	adc	r24, r26
    25d8:	91 1d       	adc	r25, r1
    25da:	a1 1d       	adc	r26, r1
    25dc:	6a 0f       	add	r22, r26
    25de:	71 1d       	adc	r23, r1
    25e0:	81 1d       	adc	r24, r1
    25e2:	91 1d       	adc	r25, r1
    25e4:	a1 1d       	adc	r26, r1
    25e6:	20 d0       	rcall	.+64     	; 0x2628 <__ultoa_invert+0x84>
    25e8:	09 f4       	brne	.+2      	; 0x25ec <__ultoa_invert+0x48>
    25ea:	68 94       	set
    25ec:	3f 91       	pop	r19
    25ee:	2a e0       	ldi	r18, 0x0A	; 10
    25f0:	26 9f       	mul	r18, r22
    25f2:	11 24       	eor	r1, r1
    25f4:	30 19       	sub	r19, r0
    25f6:	30 5d       	subi	r19, 0xD0	; 208
    25f8:	31 93       	st	Z+, r19
    25fa:	de f6       	brtc	.-74     	; 0x25b2 <__ultoa_invert+0xe>
    25fc:	cf 01       	movw	r24, r30
    25fe:	08 95       	ret
    2600:	46 2f       	mov	r20, r22
    2602:	47 70       	andi	r20, 0x07	; 7
    2604:	40 5d       	subi	r20, 0xD0	; 208
    2606:	41 93       	st	Z+, r20
    2608:	b3 e0       	ldi	r27, 0x03	; 3
    260a:	0f d0       	rcall	.+30     	; 0x262a <__ultoa_invert+0x86>
    260c:	c9 f7       	brne	.-14     	; 0x2600 <__ultoa_invert+0x5c>
    260e:	f6 cf       	rjmp	.-20     	; 0x25fc <__ultoa_invert+0x58>
    2610:	46 2f       	mov	r20, r22
    2612:	4f 70       	andi	r20, 0x0F	; 15
    2614:	40 5d       	subi	r20, 0xD0	; 208
    2616:	4a 33       	cpi	r20, 0x3A	; 58
    2618:	18 f0       	brcs	.+6      	; 0x2620 <__ultoa_invert+0x7c>
    261a:	49 5d       	subi	r20, 0xD9	; 217
    261c:	31 fd       	sbrc	r19, 1
    261e:	40 52       	subi	r20, 0x20	; 32
    2620:	41 93       	st	Z+, r20
    2622:	02 d0       	rcall	.+4      	; 0x2628 <__ultoa_invert+0x84>
    2624:	a9 f7       	brne	.-22     	; 0x2610 <__ultoa_invert+0x6c>
    2626:	ea cf       	rjmp	.-44     	; 0x25fc <__ultoa_invert+0x58>
    2628:	b4 e0       	ldi	r27, 0x04	; 4
    262a:	a6 95       	lsr	r26
    262c:	97 95       	ror	r25
    262e:	87 95       	ror	r24
    2630:	77 95       	ror	r23
    2632:	67 95       	ror	r22
    2634:	ba 95       	dec	r27
    2636:	c9 f7       	brne	.-14     	; 0x262a <__ultoa_invert+0x86>
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	61 05       	cpc	r22, r1
    263c:	71 05       	cpc	r23, r1
    263e:	08 95       	ret
    2640:	9b 01       	movw	r18, r22
    2642:	ac 01       	movw	r20, r24
    2644:	0a 2e       	mov	r0, r26
    2646:	06 94       	lsr	r0
    2648:	57 95       	ror	r21
    264a:	47 95       	ror	r20
    264c:	37 95       	ror	r19
    264e:	27 95       	ror	r18
    2650:	ba 95       	dec	r27
    2652:	c9 f7       	brne	.-14     	; 0x2646 <__ultoa_invert+0xa2>
    2654:	62 0f       	add	r22, r18
    2656:	73 1f       	adc	r23, r19
    2658:	84 1f       	adc	r24, r20
    265a:	95 1f       	adc	r25, r21
    265c:	a0 1d       	adc	r26, r0
    265e:	08 95       	ret

00002660 <__prologue_saves__>:
    2660:	2f 92       	push	r2
    2662:	3f 92       	push	r3
    2664:	4f 92       	push	r4
    2666:	5f 92       	push	r5
    2668:	6f 92       	push	r6
    266a:	7f 92       	push	r7
    266c:	8f 92       	push	r8
    266e:	9f 92       	push	r9
    2670:	af 92       	push	r10
    2672:	bf 92       	push	r11
    2674:	cf 92       	push	r12
    2676:	df 92       	push	r13
    2678:	ef 92       	push	r14
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	ca 1b       	sub	r28, r26
    268a:	db 0b       	sbc	r29, r27
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	09 94       	ijmp

00002698 <__epilogue_restores__>:
    2698:	2a 88       	ldd	r2, Y+18	; 0x12
    269a:	39 88       	ldd	r3, Y+17	; 0x11
    269c:	48 88       	ldd	r4, Y+16	; 0x10
    269e:	5f 84       	ldd	r5, Y+15	; 0x0f
    26a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    26a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    26a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    26a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    26a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    26aa:	b9 84       	ldd	r11, Y+9	; 0x09
    26ac:	c8 84       	ldd	r12, Y+8	; 0x08
    26ae:	df 80       	ldd	r13, Y+7	; 0x07
    26b0:	ee 80       	ldd	r14, Y+6	; 0x06
    26b2:	fd 80       	ldd	r15, Y+5	; 0x05
    26b4:	0c 81       	ldd	r16, Y+4	; 0x04
    26b6:	1b 81       	ldd	r17, Y+3	; 0x03
    26b8:	aa 81       	ldd	r26, Y+2	; 0x02
    26ba:	b9 81       	ldd	r27, Y+1	; 0x01
    26bc:	ce 0f       	add	r28, r30
    26be:	d1 1d       	adc	r29, r1
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	ed 01       	movw	r28, r26
    26cc:	08 95       	ret

000026ce <_exit>:
    26ce:	f8 94       	cli

000026d0 <__stop_program>:
    26d0:	ff cf       	rjmp	.-2      	; 0x26d0 <__stop_program>
