
Byggern2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00002dbe  00002e52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  008001b6  008001b6  00002f08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d83  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001968  00000000  00000000  000080c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002021  00000000  00000000  00009a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000095c  00000000  00000000  0000ba4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fae  00000000  00000000  0000c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000240c  00000000  00000000  0000d356  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000f762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__ctors_end>
       4:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_1>
       8:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
       c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      10:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      14:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      18:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      1c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      20:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      24:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      28:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__vector_10>
      2c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      30:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      34:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      38:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      3c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      40:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__vector_16>
      44:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      48:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      4c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      50:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      54:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      58:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      5c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      60:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      64:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      68:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>
      6c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	18 24       	eor	r1, r8
     152:	42 99       	sbic	0x08, 2	; 8
     154:	24 42       	sbci	r18, 0x24	; 36
     156:	81 00       	.word	0x0081	; ????
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	81 42       	sbci	r24, 0x21	; 33
     162:	24 99       	sbic	0x04, 4	; 4
     164:	42 24       	eor	r4, r2
     166:	18 00       	.word	0x0018	; ????
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	ff 3e       	cpi	r31, 0xEF	; 239
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	ff 08       	sbc	r15, r15
     182:	3e 00       	.word	0x003e	; ????
     184:	00 00       	nop
     186:	00 00       	nop
     188:	ff 08       	sbc	r15, r15
     18a:	08 3e       	cpi	r16, 0xE8	; 232
     18c:	00 00       	nop
     18e:	00 00       	nop
     190:	ff 08       	sbc	r15, r15
     192:	08 08       	sbc	r0, r8
     194:	3e 00       	.word	0x003e	; ????
     196:	00 00       	nop
     198:	ff 08       	sbc	r15, r15
     19a:	08 08       	sbc	r0, r8
     19c:	08 3e       	cpi	r16, 0xE8	; 232
     19e:	00 00       	nop
     1a0:	ff 08       	sbc	r15, r15
     1a2:	08 08       	sbc	r0, r8
     1a4:	08 08       	sbc	r0, r8
     1a6:	3e 00       	.word	0x003e	; ????
     1a8:	ff 08       	sbc	r15, r15
     1aa:	08 08       	sbc	r0, r8
     1ac:	08 08       	sbc	r0, r8
     1ae:	08 3e       	cpi	r16, 0xE8	; 232
	...
     1b8:	3c 7e       	andi	r19, 0xEC	; 236
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	ff ff       	.word	0xffff	; ????
     1be:	7e 3c       	cpi	r23, 0xCE	; 206
     1c0:	00 00       	nop
     1c2:	00 00       	nop
     1c4:	00 00       	nop
     1c6:	3e ff       	.word	0xff3e	; ????
     1c8:	00 00       	nop
     1ca:	00 00       	nop
     1cc:	00 3e       	cpi	r16, 0xE0	; 224
     1ce:	08 ff       	.word	0xff08	; ????
     1d0:	00 00       	nop
     1d2:	00 00       	nop
     1d4:	3e 08       	sbc	r3, r14
     1d6:	08 ff       	.word	0xff08	; ????
     1d8:	00 00       	nop
     1da:	00 3e       	cpi	r16, 0xE0	; 224
     1dc:	08 08       	sbc	r0, r8
     1de:	08 ff       	.word	0xff08	; ????
     1e0:	00 00       	nop
     1e2:	3e 08       	sbc	r3, r14
     1e4:	08 08       	sbc	r0, r8
     1e6:	08 ff       	.word	0xff08	; ????
     1e8:	00 3e       	cpi	r16, 0xE0	; 224
     1ea:	08 08       	sbc	r0, r8
     1ec:	08 08       	sbc	r0, r8
     1ee:	08 ff       	.word	0xff08	; ????
     1f0:	3e 08       	sbc	r3, r14
     1f2:	08 08       	sbc	r0, r8
     1f4:	08 08       	sbc	r0, r8
     1f6:	08 ff       	.word	0xff08	; ????
	...
     26c:	00 00       	nop
     26e:	00 80       	ld	r0, Z
	...
     2a4:	03 00       	.word	0x0003	; ????
     2a6:	00 00       	nop
     2a8:	00 00       	nop
     2aa:	00 00       	nop
     2ac:	f8 00       	.word	0x00f8	; ????
     2ae:	00 00       	nop
     2b0:	00 00       	nop
     2b2:	00 00       	nop
     2b4:	04 00       	.word	0x0004	; ????
     2b6:	00 00       	nop
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	00 00       	nop
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	00 c4       	rjmp	.+2048   	; 0xac2 <table+0xac>
     2c2:	00 fd       	sbrc	r16, 0
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <font4>:
     368:	00 00 00 00 00 5c 00 00 0c 00 0c 00 7c 28 7c 28     .....\......|(|(
     378:	58 dc 68 00 24 10 48 00 28 54 28 40 00 0c 00 00     X.h.$.H.(T(@....
     388:	00 78 84 00 84 78 00 00 54 38 54 00 10 7c 10 00     .x...x..T8T..|..
     398:	80 40 00 00 10 10 10 00 00 40 00 00 60 10 0c 00     .@.......@..`...
     3a8:	38 54 38 00 48 7c 40 00 48 64 58 00 44 54 2c 00     8T8.H|@.HdX.DT,.
     3b8:	1c 10 7c 00 5c 54 24 00 38 54 24 00 64 14 0c 00     ..|.\T$.8T$.d...
     3c8:	68 54 2c 00 48 54 38 00 00 48 00 00 80 48 00 00     hT,.HT8..H...H..
     3d8:	10 28 44 00 28 28 28 00 44 28 10 00 04 54 08 00     .(D.(((.D(...T..
     3e8:	38 44 5c 00 78 14 78 00 7c 54 28 00 38 44 28 00     8D\.x.x.|T(.8D(.
     3f8:	7c 44 38 00 7c 54 44 00 7c 14 04 00 38 44 74 00     |D8.|TD.|...8Dt.
     408:	7c 10 7c 00 44 7c 44 00 20 40 3c 00 7c 10 6c 00     |.|.D|D. @<.|.l.
     418:	7c 40 40 00 7c 18 7c 00 78 10 3c 00 38 44 38 00     |@@.|.|.x.<.8D8.
     428:	7c 14 08 00 38 44 b8 00 7c 14 68 00 48 54 24 00     |...8D..|.h.HT$.
     438:	04 7c 04 00 7c 40 7c 00 3c 60 3c 00 7c 30 7c 00     .|..|@|.<`<.|0|.
     448:	6c 10 6c 00 0c 70 0c 00 64 54 4c 00 00 7c 44 00     l.l..p..dTL..|D.
     458:	0c 10 60 00 44 7c 00 00 08 04 08 00 80 80 80 00     ..`.D|..........
     468:	00 04 08 00 30 48 78 00 7c 48 30 00 30 48 48 00     ....0Hx.|H0.0HH.
     478:	30 48 7c 00 30 68 50 00 10 78 14 00 90 a8 78 00     0H|.0hP..x....x.
     488:	7c 08 70 00 50 74 40 00 80 80 74 00 7c 10 68 00     |.p.Pt@...t.|.h.
     498:	44 7c 40 00 78 10 78 00 78 08 70 00 30 48 30 00     D|@.x.x.x.p.0H0.
     4a8:	f8 28 10 00 30 48 f8 00 78 10 08 00 50 58 28 00     .(..0H..x...PX(.
     4b8:	08 3c 48 00 38 40 78 00 38 40 38 00 78 20 78 00     .<H.8@x.8@8.x x.
     4c8:	48 30 48 00 98 a0 78 00 48 68 58 00 10 78 84 00     H0H...x.HhX..x..
     4d8:	00 7c 00 00 84 78 10 00 08 04 08 04                 .|...x......

000004e4 <font6>:
	...
     4ec:	5f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14 00     _...............
     4fc:	24 2a 7f 2a 12 00 23 13 08 64 62 00 36 49 55 22     $*.*..#..db.6IU"
     50c:	50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00 41     P........."A...A
     51c:	22 1c 00 00 08 2a 1c 2a 08 00 08 08 3e 08 08 00     "....*.*....>...
     52c:	00 50 30 00 00 00 08 08 08 08 08 00 00 60 60 00     .P0..........``.
     53c:	00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00 42     .. .....>QIE>..B
     54c:	7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31 00     .@..BaQIF.!AEK1.
     55c:	18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49 49     ......'EEE9.<JII
     56c:	30 00 01 71 09 05 03 00 36 49 49 49 36 00 06 49     0..q....6III6..I
     57c:	49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00 00     I)...66....V6...
     58c:	08 1c 2a 08 08 00 14 14 14 14 14 00 08 08 2a 1c     ..*...........*.
     59c:	08 00 02 01 51 09 06 00 32 49 79 41 3e 00 7e 11     ....Q...2IyA>.~.
     5ac:	11 11 7e 00 7f 49 49 49 36 00 3e 41 41 41 22 00     ..~..III6.>AAA".
     5bc:	7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09 01     .AA"...IIIA.....
     5cc:	01 00 3e 41 41 51 32 00 7f 08 08 08 7f 00 00 41     ..>AAQ2........A
     5dc:	7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41 00     .A.. @A?....."A.
     5ec:	7f 40 40 40 40 00 7f 02 04 02 7f 00 7f 04 08 10     .@@@@...........
     5fc:	7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e 41     ..>AAA>.......>A
     60c:	51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31 00     Q!^....)F.FIII1.
     61c:	01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40 20     ......?@@@?.. @ 
     62c:	1f 00 7f 20 18 20 7f 00 63 14 08 14 63 00 03 04     ... . ..c...c...
     63c:	78 04 03 00 61 51 49 45 43 00 00 00 7f 41 41 00     x...aQIEC....AA.
     64c:	02 04 08 10 20 00 41 41 7f 00 00 00 04 02 01 02     .... .AA........
     65c:	04 00 40 40 40 40 40 00 00 01 02 04 00 00 20 54     ..@@@@@....... T
     66c:	54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20 00     TTx..HDD8.8DDD .
     67c:	38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09 01     8DDH..8TTT...~..
     68c:	02 00 08 14 54 54 3c 00 7f 08 04 04 78 00 00 44     ....TT<.....x..D
     69c:	7d 40 00 00 20 40 44 3d 00 00 00 7f 10 28 44 00     }@.. @D=.....(D.
     6ac:	00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04 04     .A.@..|...x.|...
     6bc:	78 00 38 44 44 44 38 00 7c 14 14 14 08 00 08 14     x.8DDD8.|.......
     6cc:	14 18 7c 00 7c 08 04 04 08 00 48 54 54 54 20 00     ..|.|.....HTTT .
     6dc:	04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40 20     .?D@ .<@@ |.. @ 
     6ec:	1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 0c 50     ..<@0@<.D(.(D..P
     6fc:	50 50 3c 00 44 64 54 4c 44 00 00 08 36 41 00 00     PP<.DdTLD...6A..
     70c:	00 00 7f 00 00 00 00 41 36 08 00 00 02 01 03 02     .......A6.......
     71c:	01 00                                               ..

0000071e <font8>:
	...
     726:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     736:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     746:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     756:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     766:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     776:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     786:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     796:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     7a6:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     7b6:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     7c6:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     7d6:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     7e6:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     7f6:	00 a0 ec 6c 00 00 00 00 18 24 42 99 24 42 81 00     ...l.....$B.$B..
     806:	14 14 14 14 14 14 00 00 81 42 24 99 42 24 18 00     .........B$.B$..
     816:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     826:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     836:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     846:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     856:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     866:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     876:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     886:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     896:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     8a6:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     8b6:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     8c6:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     8d6:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     8e6:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     8f6:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     906:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     916:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     926:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     936:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     946:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     956:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     966:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     976:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     986:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     996:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     9a6:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     9b6:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     9c6:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     9d6:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     9e6:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     9f6:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     a06:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

00000a16 <table>:
     a16:	39 0c 38 0c 30 0c 28 0c 1d 0c 13 0c 09 0c 08 0c     9.8.0.(.........
     a26:	07 0c 06 0c fc 0b f2 0b e5 0b d9 0b cd 0b cc 0b     ................
     a36:	cb 0b ca 0b bf 0b b3 0b a7 0b 9a 0b 99 0b 98 0b     ................
     a46:	97 0b 90 0b 8b 0b 8a 0b 89 0b 88 0b 87 0b 86 0b     ................
     a56:	7b 0b 7a 0b 71 0b 6a 0b 69 0b 68 0b 67 0b 66 0b     {.z.q.j.i.h.g.f.
     a66:	65 0b 64 0b 59 0b 50 0b 4f 0b 4e 0b 4d 0b 4c 0b     e.d.Y.P.O.N.M.L.
     a76:	4b 0b 4a 0b 41 0b 3a 0b 39 0b 38 0b 37 0b 36 0b     K.J.A.:.9.8.7.6.
     a86:	35 0b 34 0b 2d 0b 26 0b 25 0b 24 0b 23 0b 22 0b     5.4.-.&.%.$.#.".
     a96:	21 0b 20 0b 14 0b 13 0b 06 0b f7 0a f6 0a f5 0a     !. .............
     aa6:	eb 0a ea 0a e9 0a e8 0a e7 0a e6 0a e5 0a e4 0a     ................
     ab6:	e3 0a d9 0a d8 0a ca 0a c9 0a c8 0a c7 0a c6 0a     ................

00000ac6 <gameover_8>:
	...

00000ac7 <gameover_7>:
	...

00000ac8 <gameover_6>:
	...

00000ac9 <gameover_5>:
	...

00000aca <gameover_4>:
     aca:	53 45 43 4f 4e 44 53 20 55 53 45 44 3a 00           SECONDS USED:.

00000ad8 <gameover_3>:
	...

00000ad9 <gameover_2>:
     ad9:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000ae3 <gameover_1>:
	...

00000ae4 <animation_8>:
	...

00000ae5 <animation_7>:
	...

00000ae6 <animation_6>:
	...

00000ae7 <animation_5>:
	...

00000ae8 <animation_4>:
	...

00000ae9 <animation_3>:
	...

00000aea <animation_2>:
	...

00000aeb <animation_1>:
     aeb:	41 4e 49 4d 41 54 49 4f 4e 00                       ANIMATION.

00000af5 <calibrate_8>:
	...

00000af6 <calibrate_7>:
	...

00000af7 <calibrate_6>:
     af7:	54 48 45 20 43 4f 4e 54 52 4f 4c 4c 45 52 00        THE CONTROLLER.

00000b06 <calibrate_5>:
     b06:	44 4f 20 4e 4f 54 20 54 4f 55 43 48 00              DO NOT TOUCH.

00000b13 <calibrate_4>:
	...

00000b14 <calibrate_3>:
     b14:	43 41 4c 49 42 52 41 54 49 4e 47 00                 CALIBRATING.

00000b20 <calibrate_2>:
	...

00000b21 <calibrate_1>:
	...

00000b22 <slider_8>:
	...

00000b23 <slider_7>:
	...

00000b24 <slider_6>:
	...

00000b25 <slider_5>:
	...

00000b26 <slider_4>:
     b26:	43 48 4f 53 45 4e 00                                CHOSEN.

00000b2d <slider_3>:
     b2d:	53 4c 49 44 45 52 00                                SLIDER.

00000b34 <slider_2>:
	...

00000b35 <slider_1>:
	...

00000b36 <joystick_8>:
	...

00000b37 <joystick_7>:
	...

00000b38 <joystick_6>:
	...

00000b39 <joystick_5>:
	...

00000b3a <joystick_4>:
     b3a:	43 48 4f 53 45 4e 00                                CHOSEN.

00000b41 <joystick_3>:
     b41:	4a 4f 59 53 54 49 43 4b 00                          JOYSTICK.

00000b4a <joystick_2>:
	...

00000b4b <joystick_1>:
	...

00000b4c <controllerP_8>:
	...

00000b4d <controllerP_7>:
	...

00000b4e <controllerP_6>:
	...

00000b4f <controllerP_5>:
	...

00000b50 <controllerP_4>:
     b50:	3e 53 4c 49 44 45 52 3c 00                          >SLIDER<.

00000b59 <controllerP_3>:
     b59:	3e 4a 4f 59 53 54 49 43 4b 3c 00                    >JOYSTICK<.

00000b64 <controllerP_2>:
	...

00000b65 <controllerP_1>:
	...

00000b66 <controller_8>:
	...

00000b67 <controller_7>:
	...

00000b68 <controller_6>:
	...

00000b69 <controller_5>:
	...

00000b6a <controller_4>:
     b6a:	53 4c 49 44 45 52 00                                SLIDER.

00000b71 <controller_3>:
     b71:	4a 4f 59 53 54 49 43 4b 00                          JOYSTICK.

00000b7a <controller_2>:
	...

00000b7b <controller_1>:
     b7b:	43 4f 4e 54 52 4f 4c 4c 45 52 00                    CONTROLLER.

00000b86 <p2_8>:
	...

00000b87 <p2_7>:
	...

00000b88 <p2_6>:
	...

00000b89 <p2_5>:
	...

00000b8a <p2_4>:
	...

00000b8b <p2_3>:
     b8b:	53 4f 4f 4e 00                                      SOON.

00000b90 <p2_2>:
     b90:	43 4f 4d 49 4e 47 00                                COMING.

00000b97 <p2_1>:
	...

00000b98 <p1_8>:
	...

00000b99 <p1_7>:
	...

00000b9a <p1_6>:
     b9a:	42 55 54 54 4f 4e 20 53 54 41 52 54 00              BUTTON START.

00000ba7 <p1_5>:
     ba7:	50 52 45 53 53 20 52 49 47 48 54 00                 PRESS RIGHT.

00000bb3 <p1_4>:
     bb3:	4f 4e 20 53 4f 4c 4f 4e 4f 49 44 00                 ON SOLONOID.

00000bbf <p1_3>:
     bbf:	50 4c 41 43 45 20 42 41 4c 4c 00                    PLACE BALL.

00000bca <p1_2>:
	...

00000bcb <p1_1>:
	...

00000bcc <mainP_8>:
	...

00000bcd <mainP_7>:
     bcd:	3e 41 4e 49 4d 41 54 49 4f 4e 3c 00                 >ANIMATION<.

00000bd9 <mainP_6>:
     bd9:	3e 43 41 4c 49 42 52 41 54 45 3c 00                 >CALIBRATE<.

00000be5 <mainP_5>:
     be5:	3e 43 4f 4e 54 52 4f 4c 4c 45 52 3c 00              >CONTROLLER<.

00000bf2 <mainP_4>:
     bf2:	3e 32 50 4c 41 59 45 52 3c 00                       >2PLAYER<.

00000bfc <mainP_3>:
     bfc:	3e 31 50 4c 41 59 45 52 3c 00                       >1PLAYER<.

00000c06 <mainP_2>:
	...

00000c07 <mainP_1>:
	...

00000c08 <main_8>:
	...

00000c09 <main_7>:
     c09:	41 4e 49 4d 41 54 49 4f 4e 00                       ANIMATION.

00000c13 <main_6>:
     c13:	43 41 4c 49 42 52 41 54 45 00                       CALIBRATE.

00000c1d <main_5>:
     c1d:	43 4f 4e 54 52 4f 4c 4c 45 52 00                    CONTROLLER.

00000c28 <main_4>:
     c28:	32 50 4c 41 59 45 52 00                             2PLAYER.

00000c30 <main_3>:
     c30:	31 50 4c 41 59 45 52 00                             1PLAYER.

00000c38 <main_2>:
	...

00000c39 <main_1>:
     c39:	50 49 4e 47 50 4f 4e 47 00                          PINGPONG.

00000c42 <__ctors_end>:
     c42:	11 24       	eor	r1, r1
     c44:	1f be       	out	0x3f, r1	; 63
     c46:	cf ef       	ldi	r28, 0xFF	; 255
     c48:	d4 e0       	ldi	r29, 0x04	; 4
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	cd bf       	out	0x3d, r28	; 61

00000c4e <__do_copy_data>:
     c4e:	11 e0       	ldi	r17, 0x01	; 1
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b1 e0       	ldi	r27, 0x01	; 1
     c54:	ee eb       	ldi	r30, 0xBE	; 190
     c56:	fd e2       	ldi	r31, 0x2D	; 45
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <__do_copy_data+0x10>
     c5a:	05 90       	lpm	r0, Z+
     c5c:	0d 92       	st	X+, r0
     c5e:	a6 3b       	cpi	r26, 0xB6	; 182
     c60:	b1 07       	cpc	r27, r17
     c62:	d9 f7       	brne	.-10     	; 0xc5a <__do_copy_data+0xc>

00000c64 <__do_clear_bss>:
     c64:	21 e0       	ldi	r18, 0x01	; 1
     c66:	a6 eb       	ldi	r26, 0xB6	; 182
     c68:	b1 e0       	ldi	r27, 0x01	; 1
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <.do_clear_bss_start>

00000c6c <.do_clear_bss_loop>:
     c6c:	1d 92       	st	X+, r1

00000c6e <.do_clear_bss_start>:
     c6e:	a4 3d       	cpi	r26, 0xD4	; 212
     c70:	b2 07       	cpc	r27, r18
     c72:	e1 f7       	brne	.-8      	; 0xc6c <.do_clear_bss_loop>
     c74:	0e 94 0c 11 	call	0x2218	; 0x2218 <main>
     c78:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <_exit>

00000c7c <__bad_interrupt>:
     c7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c80 <clock_init>:
#define CONVERSION_DELAY 50


void clock_init(void){

	DDRD |= (1 << DDD4);
     c80:	8c 9a       	sbi	0x11, 4	; 17
	
	cli();
     c82:	f8 94       	cli
	TCCR3A |= (1 << COM3A0);
     c84:	eb e8       	ldi	r30, 0x8B	; 139
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 64       	ori	r24, 0x40	; 64
     c8c:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS30);
     c8e:	ea e8       	ldi	r30, 0x8A	; 138
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	81 60       	ori	r24, 0x01	; 1
     c96:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32);
     c98:	80 81       	ld	r24, Z
     c9a:	88 60       	ori	r24, 0x08	; 8
     c9c:	80 83       	st	Z, r24
	OCR3A = 1;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ca6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	sei();
     caa:	78 94       	sei
     cac:	08 95       	ret

00000cae <adc_init>:
};

void adc_init (void){
	clock_init();	
     cae:	0e 94 40 06 	call	0xc80	; 0xc80 <clock_init>
     cb2:	08 95       	ret

00000cb4 <adc_read>:
}

int adc_read(int channel){
     cb4:	cf 93       	push	r28
     cb6:	c8 2f       	mov	r28, r24
	//Successive read pulses sense through RAM, beginning with channel 0:
	
	uint8_t confData = 0b10000000 | channel;
	uint16_t adcMemArea = 0x400;

	xmem_init();
     cb8:	0e 94 96 10 	call	0x212c	; 0x212c <xmem_init>
	xmem_write(confData, adcMemArea);
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	74 e0       	ldi	r23, 0x04	; 4
     cc0:	8c 2f       	mov	r24, r28
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	0e 94 9d 10 	call	0x213a	; 0x213a <xmem_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc8:	80 e1       	ldi	r24, 0x10	; 16
     cca:	8a 95       	dec	r24
     ccc:	f1 f7       	brne	.-4      	; 0xcca <adc_read+0x16>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <adc_read+0x1c>
	_delay_us(CONVERSION_DELAY);
	uint8_t result = xmem_read(adcMemArea);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	94 e0       	ldi	r25, 0x04	; 4
     cd4:	0e 94 a1 10 	call	0x2142	; 0x2142 <xmem_read>
     cd8:	90 e1       	ldi	r25, 0x10	; 16
     cda:	9a 95       	dec	r25
     cdc:	f1 f7       	brne	.-4      	; 0xcda <adc_read+0x26>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <adc_read+0x2c>

	_delay_us(CONVERSION_DELAY);

	return result;
}
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <can_init>:
	msg.length=length;
	for(uint8_t m=0; m<length;m++){
		msg.data[m] = mcp_read(RXBnDM+m*16*buffer_number); //see register 4-9
	}
	return &msg;
}
     ce6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <mcp_init>
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	88 e2       	ldi	r24, 0x28	; 40
     cee:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     cf2:	65 eb       	ldi	r22, 0xB5	; 181
     cf4:	89 e2       	ldi	r24, 0x29	; 41
     cf6:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     cfa:	63 e4       	ldi	r22, 0x43	; 67
     cfc:	8a e2       	ldi	r24, 0x2A	; 42
     cfe:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	8f e0       	ldi	r24, 0x0F	; 15
     d06:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     d0a:	f8 94       	cli
     d0c:	85 b7       	in	r24, 0x35	; 53
     d0e:	82 60       	ori	r24, 0x02	; 2
     d10:	85 bf       	out	0x35, r24	; 53
     d12:	85 b7       	in	r24, 0x35	; 53
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	85 bf       	out	0x35, r24	; 53
     d18:	8b b7       	in	r24, 0x3b	; 59
     d1a:	80 64       	ori	r24, 0x40	; 64
     d1c:	8b bf       	out	0x3b, r24	; 59
     d1e:	78 94       	sei
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	8b e2       	ldi	r24, 0x2B	; 43
     d24:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     d28:	08 95       	ret

00000d2a <can_send_message>:
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	08 81       	ld	r16, Y
     d38:	19 81       	ldd	r17, Y+1	; 0x01
     d3a:	b8 01       	movw	r22, r16
     d3c:	76 95       	lsr	r23
     d3e:	67 95       	ror	r22
     d40:	76 95       	lsr	r23
     d42:	67 95       	ror	r22
     d44:	76 95       	lsr	r23
     d46:	67 95       	ror	r22
     d48:	81 e3       	ldi	r24, 0x31	; 49
     d4a:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     d4e:	60 2f       	mov	r22, r16
     d50:	62 95       	swap	r22
     d52:	66 0f       	add	r22, r22
     d54:	60 7e       	andi	r22, 0xE0	; 224
     d56:	82 e3       	ldi	r24, 0x32	; 50
     d58:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     d5c:	fa 80       	ldd	r15, Y+2	; 0x02
     d5e:	6f 2d       	mov	r22, r15
     d60:	6f 70       	andi	r22, 0x0F	; 15
     d62:	85 e3       	ldi	r24, 0x35	; 53
     d64:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     d68:	ff 20       	and	r15, r15
     d6a:	79 f0       	breq	.+30     	; 0xd8a <can_send_message+0x60>
     d6c:	8e 01       	movw	r16, r28
     d6e:	0d 5f       	subi	r16, 0xFD	; 253
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	d6 e3       	ldi	r29, 0x36	; 54
     d74:	df 0d       	add	r29, r15
     d76:	c6 e3       	ldi	r28, 0x36	; 54
     d78:	f8 01       	movw	r30, r16
     d7a:	61 91       	ld	r22, Z+
     d7c:	8f 01       	movw	r16, r30
     d7e:	8c 2f       	mov	r24, r28
     d80:	0e 94 b3 10 	call	0x2166	; 0x2166 <mcp_write>
     d84:	cf 5f       	subi	r28, 0xFF	; 255
     d86:	cd 13       	cpse	r28, r29
     d88:	f7 cf       	rjmp	.-18     	; 0xd78 <can_send_message+0x4e>
     d8a:	81 e8       	ldi	r24, 0x81	; 129
     d8c:	0e 94 c5 10 	call	0x218a	; 0x218a <mcp_req_to_send>
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	08 95       	ret

00000d9c <__vector_1>:

ISR(INT0_vect){
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	8f 93       	push	r24
	CAN_flag = 1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>
}
     dae:	8f 91       	pop	r24
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <can_clearIfInterrupted>:

int can_clearIfInterrupted(void){
	if (CAN_flag==1){
     dba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	51 f4       	brne	.+20     	; 0xdd6 <can_clearIfInterrupted+0x1c>
		CAN_flag=0;
     dc2:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <__data_end>
		mcp_bit_modify(MCP_CANINTF, 0x01, 0);
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	8c e2       	ldi	r24, 0x2C	; 44
     dcc:	0e 94 ca 10 	call	0x2194	; 0x2194 <mcp_bit_modify>
		return 1;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	08 95       	ret
	}
	else{
		return 0;
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     dda:	08 95       	ret

00000ddc <joystick_calibrate>:


volatile uint8_t x_offset;
volatile uint8_t y_offset;

void joystick_calibrate(){
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	c0 59       	subi	r28, 0x90	; 144
     df2:	d1 40       	sbci	r29, 0x01	; 1
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	8e 01       	movw	r16, r28
     e00:	07 53       	subi	r16, 0x37	; 55
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	7c 01       	movw	r14, r24
     e0a:	6e 01       	movw	r12, r28
     e0c:	9f e6       	ldi	r25, 0x6F	; 111
     e0e:	c9 1a       	sub	r12, r25
     e10:	9e ef       	ldi	r25, 0xFE	; 254
     e12:	d9 0a       	sbc	r13, r25
	int n=100,arrx[n],arry[n];
	for(int i = 0;i < n;i++) {
		arrx[i]=adc_read(1);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <adc_read>
     e1c:	f8 01       	movw	r30, r16
     e1e:	81 93       	st	Z+, r24
     e20:	91 93       	st	Z+, r25
     e22:	8f 01       	movw	r16, r30
		arry[i]=adc_read(0);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <adc_read>
     e2c:	f7 01       	movw	r30, r14
     e2e:	81 93       	st	Z+, r24
     e30:	91 93       	st	Z+, r25
     e32:	7f 01       	movw	r14, r30
volatile uint8_t x_offset;
volatile uint8_t y_offset;

void joystick_calibrate(){
	int n=100,arrx[n],arry[n];
	for(int i = 0;i < n;i++) {
     e34:	0c 15       	cp	r16, r12
     e36:	1d 05       	cpc	r17, r13
     e38:	69 f7       	brne	.-38     	; 0xe14 <joystick_calibrate+0x38>
		arrx[i]=adc_read(1);
		arry[i]=adc_read(0);
	}
	
	x_offset = util_median(arrx,n);
     e3a:	64 e6       	ldi	r22, 0x64	; 100
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	ce 01       	movw	r24, r28
     e40:	87 53       	subi	r24, 0x37	; 55
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	0e 94 4f 11 	call	0x229e	; 0x229e <util_median>
     e48:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <x_offset>
	y_offset = util_median(arry,n);
     e4c:	64 e6       	ldi	r22, 0x64	; 100
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 4f 11 	call	0x229e	; 0x229e <util_median>
     e58:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <y_offset>
}
     e5c:	c0 57       	subi	r28, 0x70	; 112
     e5e:	de 4f       	sbci	r29, 0xFE	; 254
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	08 95       	ret

00000e7c <joystick_getPosition>:

joystick_position joystick_getPosition(void){
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
	joystick_position position;
	uint8_t x = adc_read(1);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <adc_read>
     e8a:	ec 01       	movw	r28, r24
	uint8_t y = adc_read(0);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <adc_read>
     e94:	9c 01       	movw	r18, r24
     e96:	48 2f       	mov	r20, r24

	if(x > x_offset){
     e98:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <x_offset>
     e9c:	8c 17       	cp	r24, r28
     e9e:	a8 f4       	brcc	.+42     	; 0xeca <joystick_getPosition+0x4e>
			position.x_pos = (int8_t)100*(x-x_offset)/(0xFF - x_offset);
     ea0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <x_offset>
     ea4:	50 91 c3 01 	lds	r21, 0x01C3	; 0x8001c3 <x_offset>
     ea8:	dd 27       	eor	r29, r29
     eaa:	c8 1b       	sub	r28, r24
     eac:	d1 09       	sbc	r29, r1
     eae:	64 e6       	ldi	r22, 0x64	; 100
     eb0:	6c 9f       	mul	r22, r28
     eb2:	c0 01       	movw	r24, r0
     eb4:	6d 9f       	mul	r22, r29
     eb6:	90 0d       	add	r25, r0
     eb8:	11 24       	eor	r1, r1
     eba:	6f ef       	ldi	r22, 0xFF	; 255
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	65 1b       	sub	r22, r21
     ec0:	71 09       	sbc	r23, r1
     ec2:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
     ec6:	fb 01       	movw	r30, r22
     ec8:	18 c0       	rjmp	.+48     	; 0xefa <joystick_getPosition+0x7e>
	}
	else if (x < x_offset){
     eca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <x_offset>
     ece:	c8 17       	cp	r28, r24
     ed0:	90 f4       	brcc	.+36     	; 0xef6 <joystick_getPosition+0x7a>
		position.x_pos = 100*(x-x_offset)/(x_offset - 0);
     ed2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <x_offset>
     ed6:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <x_offset>
     eda:	dd 27       	eor	r29, r29
     edc:	c8 1b       	sub	r28, r24
     ede:	d1 09       	sbc	r29, r1
     ee0:	54 e6       	ldi	r21, 0x64	; 100
     ee2:	5c 9f       	mul	r21, r28
     ee4:	c0 01       	movw	r24, r0
     ee6:	5d 9f       	mul	r21, r29
     ee8:	90 0d       	add	r25, r0
     eea:	11 24       	eor	r1, r1
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
     ef2:	fb 01       	movw	r30, r22
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <joystick_getPosition+0x7e>
	}
	else {
		position.x_pos = 0;
     ef6:	e0 e0       	ldi	r30, 0x00	; 0
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
	}

	if(y > y_offset){
     efa:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <y_offset>
     efe:	84 17       	cp	r24, r20
     f00:	a8 f4       	brcc	.+42     	; 0xf2c <joystick_getPosition+0xb0>
		position.y_pos = 100*(y-y_offset)/(0xFF - y_offset);
     f02:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <y_offset>
     f06:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <y_offset>
     f0a:	33 27       	eor	r19, r19
     f0c:	28 1b       	sub	r18, r24
     f0e:	31 09       	sbc	r19, r1
     f10:	54 e6       	ldi	r21, 0x64	; 100
     f12:	52 9f       	mul	r21, r18
     f14:	c0 01       	movw	r24, r0
     f16:	53 9f       	mul	r21, r19
     f18:	90 0d       	add	r25, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	6f ef       	ldi	r22, 0xFF	; 255
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	64 1b       	sub	r22, r20
     f22:	71 09       	sbc	r23, r1
     f24:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
     f28:	9b 01       	movw	r18, r22
     f2a:	18 c0       	rjmp	.+48     	; 0xf5c <joystick_getPosition+0xe0>
	}
	else if (y < y_offset){
     f2c:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <y_offset>
     f30:	48 17       	cp	r20, r24
     f32:	90 f4       	brcc	.+36     	; 0xf58 <joystick_getPosition+0xdc>
		position.y_pos = 100*(y-y_offset)/(y_offset - 0);
     f34:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <y_offset>
     f38:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <y_offset>
     f3c:	33 27       	eor	r19, r19
     f3e:	28 1b       	sub	r18, r24
     f40:	31 09       	sbc	r19, r1
     f42:	44 e6       	ldi	r20, 0x64	; 100
     f44:	42 9f       	mul	r20, r18
     f46:	c0 01       	movw	r24, r0
     f48:	43 9f       	mul	r20, r19
     f4a:	90 0d       	add	r25, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
     f54:	9b 01       	movw	r18, r22
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <joystick_getPosition+0xe0>
	}
	else {
		position.y_pos = 0;
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	return position;
     f5c:	bf 01       	movw	r22, r30
     f5e:	c9 01       	movw	r24, r18
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	08 95       	ret

00000f68 <joystick_getDirection>:

joystick_direction joystick_getDirection(void){
	
	joystick_position position;

	position = joystick_getPosition();
     f68:	0e 94 3e 07 	call	0xe7c	; 0xe7c <joystick_getPosition>
	
	if(position.x_pos < -50){
     f6c:	6e 3c       	cpi	r22, 0xCE	; 206
     f6e:	ef ef       	ldi	r30, 0xFF	; 255
     f70:	7e 07       	cpc	r23, r30
     f72:	84 f0       	brlt	.+32     	; 0xf94 <joystick_getDirection+0x2c>
		return LEFT;
	}
	else if(position.x_pos > 50){
     f74:	63 33       	cpi	r22, 0x33	; 51
     f76:	71 05       	cpc	r23, r1
     f78:	7c f4       	brge	.+30     	; 0xf98 <joystick_getDirection+0x30>
		return RIGHT;	
	}

	if(position.y_pos < -50){
     f7a:	8e 3c       	cpi	r24, 0xCE	; 206
     f7c:	2f ef       	ldi	r18, 0xFF	; 255
     f7e:	92 07       	cpc	r25, r18
     f80:	6c f0       	brlt	.+26     	; 0xf9c <joystick_getDirection+0x34>
		return DOWN;
	}
	else if(position.y_pos > 50){
     f82:	c3 97       	sbiw	r24, 0x33	; 51
     f84:	6c f4       	brge	.+26     	; 0xfa0 <joystick_getDirection+0x38>
		return UP;
	}
	
	if(position.x_pos <= 50 && position.x_pos >= -50 && position.y_pos <= 50 && position.y_pos >= -50){
     f86:	6e 5c       	subi	r22, 0xCE	; 206
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	65 36       	cpi	r22, 0x65	; 101
     f8c:	71 05       	cpc	r23, r1
     f8e:	50 f0       	brcs	.+20     	; 0xfa4 <joystick_getDirection+0x3c>
		return NEUTRAL;
	}
	return 0;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	08 95       	ret
	joystick_position position;

	position = joystick_getPosition();
	
	if(position.x_pos < -50){
		return LEFT;
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	08 95       	ret
	}
	else if(position.x_pos > 50){
		return RIGHT;	
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	08 95       	ret
	}

	if(position.y_pos < -50){
		return DOWN;
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	08 95       	ret
	}
	else if(position.y_pos > 50){
		return UP;
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	08 95       	ret
	}
	
	if(position.x_pos <= 50 && position.x_pos >= -50 && position.y_pos <= 50 && position.y_pos >= -50){
		return NEUTRAL;
     fa4:	84 e0       	ldi	r24, 0x04	; 4
	}
	return 0;
}
     fa6:	08 95       	ret

00000fa8 <joystick_sendPositionButtonCan>:

void joystick_sendPositionButtonCan(joystick_position pos){
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	2b 97       	sbiw	r28, 0x0b	; 11
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
	//pos
	can_message msg;
	msg.id=1;
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	3a 83       	std	Y+2, r19	; 0x02
     fc2:	29 83       	std	Y+1, r18	; 0x01
	msg.length=3;
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	9b 83       	std	Y+3, r25	; 0x03
	msg.data[0] = (char)pos.x_pos;
     fc8:	6c 83       	std	Y+4, r22	; 0x04
	msg.data[1] = (char)pos.y_pos;
     fca:	8d 83       	std	Y+5, r24	; 0x05
	
	//button
	msg.data[2]=(char)(PINB & (1<<0));
     fcc:	86 b3       	in	r24, 0x16	; 22
     fce:	81 70       	andi	r24, 0x01	; 1
     fd0:	8e 83       	std	Y+6, r24	; 0x06
	
	
	can_send_message(&msg);
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	0e 94 95 06 	call	0xd2a	; 0xd2a <can_send_message>
     fda:	2b 96       	adiw	r28, 0x0b	; 11
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <f_2player>:
		pos_child=0;
		(*curr_menu->function)(main_menu->name);
}

void f_2player(){
	oled_reset();
     fec:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
	oled_print_screen_progmem(s_p2);
     ff0:	88 e1       	ldi	r24, 0x18	; 24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
     ff8:	08 95       	ret

00000ffa <f_controller>:
}

void f_controller(){
	oled_reset();
     ffa:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
	oled_print_screen_progmem(s_controller);
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
	oled_print_page_progmem(s_controllerP,header_pages);
    1006:	62 e0       	ldi	r22, 0x02	; 2
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	88 e2       	ldi	r24, 0x28	; 40
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <oled_print_page_progmem>
    1012:	08 95       	ret

00001014 <f_calibrate>:
	(*curr_menu->function)(main_menu->name);
	
}

void f_calibrate(){
	oled_reset();
    1014:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
	oled_print_screen_progmem(s_calibrate);
    1018:	80 e4       	ldi	r24, 0x40	; 64
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1020:	2f ef       	ldi	r18, 0xFF	; 255
    1022:	83 ed       	ldi	r24, 0xD3	; 211
    1024:	90 e3       	ldi	r25, 0x30	; 48
    1026:	21 50       	subi	r18, 0x01	; 1
    1028:	80 40       	sbci	r24, 0x00	; 0
    102a:	90 40       	sbci	r25, 0x00	; 0
    102c:	e1 f7       	brne	.-8      	; 0x1026 <f_calibrate+0x12>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <f_calibrate+0x1c>
    1030:	00 00       	nop
	
	//funskjon her ///////////////// for calibrate
	
	_delay_ms(1000);
		
	curr_menu=main_menu;
    1032:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <main_menu>
    1036:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <main_menu+0x1>
    103a:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <curr_menu+0x1>
    103e:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <curr_menu>
	pos_child=0;
    1042:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <pos_child+0x1>
    1046:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pos_child>
	(*curr_menu->function)(main_menu->name);
    104a:	12 96       	adiw	r26, 0x02	; 2
    104c:	ed 91       	ld	r30, X+
    104e:	fc 91       	ld	r31, X
    1050:	13 97       	sbiw	r26, 0x03	; 3
    1052:	1a 96       	adiw	r26, 0x0a	; 10
    1054:	8d 91       	ld	r24, X+
    1056:	9c 91       	ld	r25, X
    1058:	1b 97       	sbiw	r26, 0x0b	; 11
    105a:	09 95       	icall
    105c:	08 95       	ret

0000105e <f_1player>:
	
	return new_submenu;
}


void f_1player(){
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	2b 97       	sbiw	r28, 0x0b	; 11
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61

	oled_reset();
    1076:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
	oled_print_screen_progmem(s_p1);
    107a:	80 e1       	ldi	r24, 0x10	; 16
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
	joystick_sendPositionButtonCan(joystick_getPosition());//send motor to mid before start
    1082:	0e 94 3e 07 	call	0xe7c	; 0xe7c <joystick_getPosition>
    1086:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <joystick_sendPositionButtonCan>
	while(!(PINB & (1<<0))){
    108a:	b0 99       	sbic	0x16, 0	; 22
    108c:	55 c0       	rjmp	.+170    	; 0x1138 <f_1player+0xda>
		printf("--");
    108e:	0c e0       	ldi	r16, 0x0C	; 12
    1090:	11 e0       	ldi	r17, 0x01	; 1
    1092:	1f 93       	push	r17
    1094:	0f 93       	push	r16
    1096:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <printf>
void f_1player(){

	oled_reset();
	oled_print_screen_progmem(s_p1);
	joystick_sendPositionButtonCan(joystick_getPosition());//send motor to mid before start
	while(!(PINB & (1<<0))){
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	b0 9b       	sbis	0x16, 0	; 22
    10a0:	f8 cf       	rjmp	.-16     	; 0x1092 <f_1player+0x34>
    10a2:	4a c0       	rjmp	.+148    	; 0x1138 <f_1player+0xda>
		timer2_init();
		timer2_stop();
				
	switch(ctrl){
		case JOYSTICK:
			timer2_start();
    10a4:	0e 94 47 10 	call	0x208e	; 0x208e <timer2_start>
			while (!can_clearIfInterrupted()){
				printf("--");
    10a8:	0c e0       	ldi	r16, 0x0C	; 12
    10aa:	11 e0       	ldi	r17, 0x01	; 1
		timer2_stop();
				
	switch(ctrl){
		case JOYSTICK:
			timer2_start();
			while (!can_clearIfInterrupted()){
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <f_1player+0x5c>
				printf("--");
    10ae:	1f 93       	push	r17
    10b0:	0f 93       	push	r16
    10b2:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <printf>
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
		timer2_stop();
				
	switch(ctrl){
		case JOYSTICK:
			timer2_start();
			while (!can_clearIfInterrupted()){
    10ba:	0e 94 dd 06 	call	0xdba	; 0xdba <can_clearIfInterrupted>
    10be:	89 2b       	or	r24, r25
    10c0:	b1 f3       	breq	.-20     	; 0x10ae <f_1player+0x50>
				printf("--");
				//joystick_sendPositionButtonCan(joystick_getPosition());
			}
			timer2_stop();
    10c2:	0e 94 3f 10 	call	0x207e	; 0x207e <timer2_stop>

		break;
    10c6:	11 c0       	rjmp	.+34     	; 0x10ea <f_1player+0x8c>
		case SLIDER:
			timer2_start();
    10c8:	0e 94 47 10 	call	0x208e	; 0x208e <timer2_start>
			while (!can_clearIfInterrupted()){	
				printf("--");
    10cc:	0c e0       	ldi	r16, 0x0C	; 12
    10ce:	11 e0       	ldi	r17, 0x01	; 1
			timer2_stop();

		break;
		case SLIDER:
			timer2_start();
			while (!can_clearIfInterrupted()){	
    10d0:	06 c0       	rjmp	.+12     	; 0x10de <f_1player+0x80>
				printf("--");
    10d2:	1f 93       	push	r17
    10d4:	0f 93       	push	r16
    10d6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <printf>
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
			timer2_stop();

		break;
		case SLIDER:
			timer2_start();
			while (!can_clearIfInterrupted()){	
    10de:	0e 94 dd 06 	call	0xdba	; 0xdba <can_clearIfInterrupted>
    10e2:	89 2b       	or	r24, r25
    10e4:	b1 f3       	breq	.-20     	; 0x10d2 <f_1player+0x74>
				printf("--");
				//slider_sendPositionButtonCan(slider_getPosition());
			}
			timer2_stop();
    10e6:	0e 94 3f 10 	call	0x207e	; 0x207e <timer2_stop>
		break;
	}	
	
		oled_reset();
    10ea:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
		oled_print_screen_progmem(s_gameover);
    10ee:	80 e5       	ldi	r24, 0x50	; 80
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
		
		oled_print_time_used();
    10f6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <oled_print_time_used>
    10fa:	2f ef       	ldi	r18, 0xFF	; 255
    10fc:	83 ed       	ldi	r24, 0xD3	; 211
    10fe:	90 e3       	ldi	r25, 0x30	; 48
    1100:	21 50       	subi	r18, 0x01	; 1
    1102:	80 40       	sbci	r24, 0x00	; 0
    1104:	90 40       	sbci	r25, 0x00	; 0
    1106:	e1 f7       	brne	.-8      	; 0x1100 <f_1player+0xa2>
    1108:	00 c0       	rjmp	.+0      	; 0x110a <f_1player+0xac>
    110a:	00 00       	nop
		
		_delay_ms(1000);
		
		curr_menu=main_menu;
    110c:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <main_menu>
    1110:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <main_menu+0x1>
    1114:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <curr_menu+0x1>
    1118:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <curr_menu>
		pos_child=0;
    111c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <pos_child+0x1>
    1120:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pos_child>
		(*curr_menu->function)(main_menu->name);
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	13 97       	sbiw	r26, 0x03	; 3
    112c:	1a 96       	adiw	r26, 0x0a	; 10
    112e:	8d 91       	ld	r24, X+
    1130:	9c 91       	ld	r25, X
    1132:	1b 97       	sbiw	r26, 0x0b	; 11
    1134:	09 95       	icall
}
    1136:	2d c0       	rjmp	.+90     	; 0x1192 <f_1player+0x134>
	joystick_sendPositionButtonCan(joystick_getPosition());//send motor to mid before start
	while(!(PINB & (1<<0))){
		printf("--");
	}
		for(unsigned char i=0; i<5; i++){
			can_clearIfInterrupted();
    1138:	0e 94 dd 06 	call	0xdba	; 0xdba <can_clearIfInterrupted>
    113c:	0e 94 dd 06 	call	0xdba	; 0xdba <can_clearIfInterrupted>
    1140:	0e 94 dd 06 	call	0xdba	; 0xdba <can_clearIfInterrupted>
    1144:	0e 94 dd 06 	call	0xdba	; 0xdba <can_clearIfInterrupted>
    1148:	0e 94 dd 06 	call	0xdba	; 0xdba <can_clearIfInterrupted>
		}
		//second one because of race condition
		
		can_message msg;
		msg.id=1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
		msg.length=3;
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	8b 83       	std	Y+3, r24	; 0x03
		msg.data[2]=(char)1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	8e 83       	std	Y+6, r24	; 0x06
		can_send_message(&msg); //solonoide hit
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	0e 94 95 06 	call	0xd2a	; 0xd2a <can_send_message>
		
		uint8_t ctrl = xmem_read(0x800); //read variable from SRAM joystick/slider.
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	98 e0       	ldi	r25, 0x08	; 8
    1168:	0e 94 a1 10 	call	0x2142	; 0x2142 <xmem_read>
    116c:	8c 01       	movw	r16, r24
		timer2_set_ctrl(ctrl);
    116e:	0e 94 4e 10 	call	0x209c	; 0x209c <timer2_set_ctrl>
		timer_init();
    1172:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <timer_init>
		timer2_init();
    1176:	0e 94 2c 10 	call	0x2058	; 0x2058 <timer2_init>
		timer2_stop();
    117a:	0e 94 3f 10 	call	0x207e	; 0x207e <timer2_stop>
				
	switch(ctrl){
    117e:	11 27       	eor	r17, r17
    1180:	01 15       	cp	r16, r1
    1182:	11 05       	cpc	r17, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <f_1player+0x12a>
    1186:	8e cf       	rjmp	.-228    	; 0x10a4 <f_1player+0x46>
    1188:	01 30       	cpi	r16, 0x01	; 1
    118a:	11 05       	cpc	r17, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <f_1player+0x132>
    118e:	9c cf       	rjmp	.-200    	; 0x10c8 <f_1player+0x6a>
    1190:	ac cf       	rjmp	.-168    	; 0x10ea <f_1player+0x8c>
		_delay_ms(1000);
		
		curr_menu=main_menu;
		pos_child=0;
		(*curr_menu->function)(main_menu->name);
}
    1192:	2b 96       	adiw	r28, 0x0b	; 11
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <f_joystick>:
	oled_print_page_progmem(s_controllerP,header_pages);

}

void f_joystick(){
	oled_reset();
    11a8:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
	oled_print_screen_progmem(s_joystick);
    11ac:	80 e3       	ldi	r24, 0x30	; 48
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
	controller ctrl = JOYSTICK;
	xmem_write(ctrl,0x800); //Lagrer i SRAM
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	78 e0       	ldi	r23, 0x08	; 8
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 9d 10 	call	0x213a	; 0x213a <xmem_write>
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	83 ed       	ldi	r24, 0xD3	; 211
    11c4:	90 e3       	ldi	r25, 0x30	; 48
    11c6:	21 50       	subi	r18, 0x01	; 1
    11c8:	80 40       	sbci	r24, 0x00	; 0
    11ca:	90 40       	sbci	r25, 0x00	; 0
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <f_joystick+0x1e>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <f_joystick+0x28>
    11d0:	00 00       	nop
	_delay_ms(1000);
	
	curr_menu=main_menu;
    11d2:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <main_menu>
    11d6:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <main_menu+0x1>
    11da:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <curr_menu+0x1>
    11de:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <curr_menu>
	pos_child=0;
    11e2:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <pos_child+0x1>
    11e6:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pos_child>
	(*curr_menu->function)(main_menu->name);
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	ed 91       	ld	r30, X+
    11ee:	fc 91       	ld	r31, X
    11f0:	13 97       	sbiw	r26, 0x03	; 3
    11f2:	1a 96       	adiw	r26, 0x0a	; 10
    11f4:	8d 91       	ld	r24, X+
    11f6:	9c 91       	ld	r25, X
    11f8:	1b 97       	sbiw	r26, 0x0b	; 11
    11fa:	09 95       	icall
    11fc:	08 95       	ret

000011fe <f_slider>:
		
	
}
void f_slider(){
	oled_reset();
    11fe:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
	oled_print_screen_progmem(s_slider);
    1202:	88 e3       	ldi	r24, 0x38	; 56
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
	controller ctrl = SLIDER;
	xmem_write(ctrl,0x800); //Lagrer i SRAM
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	78 e0       	ldi	r23, 0x08	; 8
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 9d 10 	call	0x213a	; 0x213a <xmem_write>
    1216:	2f ef       	ldi	r18, 0xFF	; 255
    1218:	83 ed       	ldi	r24, 0xD3	; 211
    121a:	90 e3       	ldi	r25, 0x30	; 48
    121c:	21 50       	subi	r18, 0x01	; 1
    121e:	80 40       	sbci	r24, 0x00	; 0
    1220:	90 40       	sbci	r25, 0x00	; 0
    1222:	e1 f7       	brne	.-8      	; 0x121c <f_slider+0x1e>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <f_slider+0x28>
    1226:	00 00       	nop
	_delay_ms(1000);
	
	curr_menu=main_menu;
    1228:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <main_menu>
    122c:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <main_menu+0x1>
    1230:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <curr_menu+0x1>
    1234:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <curr_menu>
	pos_child=0;
    1238:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <pos_child+0x1>
    123c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pos_child>
	(*curr_menu->function)(main_menu->name);
    1240:	12 96       	adiw	r26, 0x02	; 2
    1242:	ed 91       	ld	r30, X+
    1244:	fc 91       	ld	r31, X
    1246:	13 97       	sbiw	r26, 0x03	; 3
    1248:	1a 96       	adiw	r26, 0x0a	; 10
    124a:	8d 91       	ld	r24, X+
    124c:	9c 91       	ld	r25, X
    124e:	1b 97       	sbiw	r26, 0x0b	; 11
    1250:	09 95       	icall
    1252:	08 95       	ret

00001254 <f_animation>:
	
	
}

void f_animation(){
	oled_reset();
    1254:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
	oled_print_screen_progmem(s_animation);
    1258:	88 e4       	ldi	r24, 0x48	; 72
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
	oled_animation(4);
    1260:	84 e0       	ldi	r24, 0x04	; 4
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 c3 0c 	call	0x1986	; 0x1986 <oled_animation>
	
	curr_menu=main_menu;
    1268:	a0 91 c8 01 	lds	r26, 0x01C8	; 0x8001c8 <main_menu>
    126c:	b0 91 c9 01 	lds	r27, 0x01C9	; 0x8001c9 <main_menu+0x1>
    1270:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <curr_menu+0x1>
    1274:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <curr_menu>
	pos_child=0;
    1278:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <pos_child+0x1>
    127c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pos_child>
	(*curr_menu->function)(main_menu->name);
    1280:	12 96       	adiw	r26, 0x02	; 2
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	13 97       	sbiw	r26, 0x03	; 3
    1288:	1a 96       	adiw	r26, 0x0a	; 10
    128a:	8d 91       	ld	r24, X+
    128c:	9c 91       	ld	r25, X
    128e:	1b 97       	sbiw	r26, 0x0b	; 11
    1290:	09 95       	icall
    1292:	08 95       	ret

00001294 <Menu_new_submenu>:
	
	curr_menu = main_menu;
	
}

menu_item* Menu_new_submenu(menu_item* self, char* name, void (*function)(char*), int oledOffset){
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	8c 01       	movw	r16, r24
    12aa:	7b 01       	movw	r14, r22
    12ac:	5a 01       	movw	r10, r20
    12ae:	69 01       	movw	r12, r18
	menu_item* new_submenu = malloc(sizeof(menu_item));
    12b0:	8e e0       	ldi	r24, 0x0E	; 14
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 8f 11 	call	0x231e	; 0x231e <malloc>
    12b8:	ec 01       	movw	r28, r24

	new_submenu->parent=self;
    12ba:	19 83       	std	Y+1, r17	; 0x01
    12bc:	08 83       	st	Y, r16
	new_submenu->children=NULL;
    12be:	1d 82       	std	Y+5, r1	; 0x05
    12c0:	1c 82       	std	Y+4, r1	; 0x04
	new_submenu->numOfChildren=0;
    12c2:	1f 82       	std	Y+7, r1	; 0x07
    12c4:	1e 82       	std	Y+6, r1	; 0x06
	new_submenu->name=name;
    12c6:	fb 86       	std	Y+11, r15	; 0x0b
    12c8:	ea 86       	std	Y+10, r14	; 0x0a
	new_submenu->nameArrow=oled_arrow(name);
    12ca:	c7 01       	movw	r24, r14
    12cc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <oled_arrow>
    12d0:	9d 87       	std	Y+13, r25	; 0x0d
    12d2:	8c 87       	std	Y+12, r24	; 0x0c
	new_submenu->function = function;
    12d4:	bb 82       	std	Y+3, r11	; 0x03
    12d6:	aa 82       	std	Y+2, r10	; 0x02
	new_submenu->oledOffset=oledOffset;
    12d8:	d9 86       	std	Y+9, r13	; 0x09
    12da:	c8 86       	std	Y+8, r12	; 0x08
		
	self->children=realloc(self->children, (self->numOfChildren+1)*sizeof(menu_item*));
    12dc:	f8 01       	movw	r30, r16
    12de:	66 81       	ldd	r22, Z+6	; 0x06
    12e0:	77 81       	ldd	r23, Z+7	; 0x07
    12e2:	6f 5f       	subi	r22, 0xFF	; 255
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	84 81       	ldd	r24, Z+4	; 0x04
    12ec:	95 81       	ldd	r25, Z+5	; 0x05
    12ee:	0e 94 b0 12 	call	0x2560	; 0x2560 <realloc>
    12f2:	f8 01       	movw	r30, r16
    12f4:	95 83       	std	Z+5, r25	; 0x05
    12f6:	84 83       	std	Z+4, r24	; 0x04
	self->children[self->numOfChildren]=new_submenu;
    12f8:	26 81       	ldd	r18, Z+6	; 0x06
    12fa:	37 81       	ldd	r19, Z+7	; 0x07
    12fc:	a9 01       	movw	r20, r18
    12fe:	44 0f       	add	r20, r20
    1300:	55 1f       	adc	r21, r21
    1302:	fc 01       	movw	r30, r24
    1304:	e4 0f       	add	r30, r20
    1306:	f5 1f       	adc	r31, r21
    1308:	d1 83       	std	Z+1, r29	; 0x01
    130a:	c0 83       	st	Z, r28
	self->numOfChildren++;
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	f8 01       	movw	r30, r16
    1312:	37 83       	std	Z+7, r19	; 0x07
    1314:	26 83       	std	Z+6, r18	; 0x06
	
	return new_submenu;
}
    1316:	ce 01       	movw	r24, r28
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	cf 90       	pop	r12
    1328:	bf 90       	pop	r11
    132a:	af 90       	pop	r10
    132c:	08 95       	ret

0000132e <menu_init>:
menu_item* main_menu;
static menu_item* curr_menu;
static int header_pages=2;


void menu_init(){
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
	
	menu_item* main_menu = malloc(sizeof(menu_item));
    1336:	8e e0       	ldi	r24, 0x0E	; 14
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 8f 11 	call	0x231e	; 0x231e <malloc>
    133e:	ec 01       	movw	r28, r24
	main_menu->name = "Main Menu";
    1340:	8f e0       	ldi	r24, 0x0F	; 15
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	9b 87       	std	Y+11, r25	; 0x0b
    1346:	8a 87       	std	Y+10, r24	; 0x0a
	main_menu->nameArrow= NULL;
    1348:	1d 86       	std	Y+13, r1	; 0x0d
    134a:	1c 86       	std	Y+12, r1	; 0x0c
	main_menu->numOfChildren = 0;
    134c:	1f 82       	std	Y+7, r1	; 0x07
    134e:	1e 82       	std	Y+6, r1	; 0x06
	main_menu->parent = NULL;
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	18 82       	st	Y, r1
	main_menu->function = NULL;
    1354:	1b 82       	std	Y+3, r1	; 0x03
    1356:	1a 82       	std	Y+2, r1	; 0x02
	main_menu->oledOffset=s_main;
    1358:	19 86       	std	Y+9, r1	; 0x09
    135a:	18 86       	std	Y+8, r1	; 0x08
	
	menu_item* player_menu=Menu_new_submenu(main_menu, "1PLAYER", &f_1player, s_p1);
    135c:	20 e1       	ldi	r18, 0x10	; 16
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4f e2       	ldi	r20, 0x2F	; 47
    1362:	58 e0       	ldi	r21, 0x08	; 8
    1364:	69 e1       	ldi	r22, 0x19	; 25
    1366:	71 e0       	ldi	r23, 0x01	; 1
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 4a 09 	call	0x1294	; 0x1294 <Menu_new_submenu>
	Menu_new_submenu(main_menu, "2PLAYER", &f_2player, s_p2);
    136e:	28 e1       	ldi	r18, 0x18	; 24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	46 ef       	ldi	r20, 0xF6	; 246
    1374:	57 e0       	ldi	r21, 0x07	; 7
    1376:	61 e2       	ldi	r22, 0x21	; 33
    1378:	71 e0       	ldi	r23, 0x01	; 1
    137a:	ce 01       	movw	r24, r28
    137c:	0e 94 4a 09 	call	0x1294	; 0x1294 <Menu_new_submenu>
	menu_item* controller_menu=Menu_new_submenu(main_menu, "CONTROLLER", &f_controller,s_controller);
    1380:	20 e2       	ldi	r18, 0x20	; 32
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4d ef       	ldi	r20, 0xFD	; 253
    1386:	57 e0       	ldi	r21, 0x07	; 7
    1388:	69 e2       	ldi	r22, 0x29	; 41
    138a:	71 e0       	ldi	r23, 0x01	; 1
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 4a 09 	call	0x1294	; 0x1294 <Menu_new_submenu>
    1392:	8c 01       	movw	r16, r24
	Menu_new_submenu(controller_menu, "JOYSTICK", &f_joystick,s_joystick);
    1394:	20 e3       	ldi	r18, 0x30	; 48
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	44 ed       	ldi	r20, 0xD4	; 212
    139a:	58 e0       	ldi	r21, 0x08	; 8
    139c:	64 e3       	ldi	r22, 0x34	; 52
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	0e 94 4a 09 	call	0x1294	; 0x1294 <Menu_new_submenu>
	Menu_new_submenu(controller_menu, "SLIDER", &f_slider,s_slider);
    13a4:	28 e3       	ldi	r18, 0x38	; 56
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	4f ef       	ldi	r20, 0xFF	; 255
    13aa:	58 e0       	ldi	r21, 0x08	; 8
    13ac:	6d e3       	ldi	r22, 0x3D	; 61
    13ae:	71 e0       	ldi	r23, 0x01	; 1
    13b0:	c8 01       	movw	r24, r16
    13b2:	0e 94 4a 09 	call	0x1294	; 0x1294 <Menu_new_submenu>
	Menu_new_submenu(main_menu, "CALIBRATE", &f_calibrate,s_calibrate);
    13b6:	20 e4       	ldi	r18, 0x40	; 64
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4a e0       	ldi	r20, 0x0A	; 10
    13bc:	58 e0       	ldi	r21, 0x08	; 8
    13be:	64 e4       	ldi	r22, 0x44	; 68
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	ce 01       	movw	r24, r28
    13c4:	0e 94 4a 09 	call	0x1294	; 0x1294 <Menu_new_submenu>
	Menu_new_submenu(main_menu, "ANIMATION", &f_animation,s_animation);
    13c8:	28 e4       	ldi	r18, 0x48	; 72
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a e2       	ldi	r20, 0x2A	; 42
    13ce:	59 e0       	ldi	r21, 0x09	; 9
    13d0:	6e e4       	ldi	r22, 0x4E	; 78
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	ce 01       	movw	r24, r28
    13d6:	0e 94 4a 09 	call	0x1294	; 0x1294 <Menu_new_submenu>
	

	oled_reset();
    13da:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <oled_reset>
	oled_print_screen_progmem(s_main);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <oled_print_screen_progmem>
	oled_print_page_progmem(s_mainP, header_pages);
    13e6:	62 e0       	ldi	r22, 0x02	; 2
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	88 e0       	ldi	r24, 0x08	; 8
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <oled_print_page_progmem>
	
	curr_menu = main_menu;
    13f2:	d0 93 b8 01 	sts	0x01B8, r29	; 0x8001b8 <curr_menu+0x1>
    13f6:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <curr_menu>
	
}
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <navigate>:
	(*curr_menu->function)(main_menu->name);
	
	
}

void navigate(){
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
	
if(joystick_getDirection()!=NEUTRAL){
    1408:	0e 94 b4 07 	call	0xf68	; 0xf68 <joystick_getDirection>
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	09 f4       	brne	.+2      	; 0x1412 <navigate+0xe>
    1410:	97 c0       	rjmp	.+302    	; 0x1540 <navigate+0x13c>
    1412:	2f ef       	ldi	r18, 0xFF	; 255
    1414:	87 ee       	ldi	r24, 0xE7	; 231
    1416:	93 e0       	ldi	r25, 0x03	; 3
    1418:	21 50       	subi	r18, 0x01	; 1
    141a:	80 40       	sbci	r24, 0x00	; 0
    141c:	90 40       	sbci	r25, 0x00	; 0
    141e:	e1 f7       	brne	.-8      	; 0x1418 <navigate+0x14>
    1420:	00 c0       	rjmp	.+0      	; 0x1422 <navigate+0x1e>
    1422:	00 00       	nop
			_delay_ms(80);
		
	switch (joystick_getDirection()){
    1424:	0e 94 b4 07 	call	0xf68	; 0xf68 <joystick_getDirection>
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	09 f4       	brne	.+2      	; 0x142e <navigate+0x2a>
    142c:	43 c0       	rjmp	.+134    	; 0x14b4 <navigate+0xb0>
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	09 f0       	breq	.+2      	; 0x1434 <navigate+0x30>
    1432:	86 c0       	rjmp	.+268    	; 0x1540 <navigate+0x13c>
		
		case UP:
		if(pos_child>0){
    1434:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pos_child>
    1438:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <pos_child+0x1>
    143c:	18 16       	cp	r1, r24
    143e:	19 06       	cpc	r1, r25
    1440:	0c f0       	brlt	.+2      	; 0x1444 <navigate+0x40>
    1442:	7e c0       	rjmp	.+252    	; 0x1540 <navigate+0x13c>
			oled_goto_page(pos_child+header_pages);
    1444:	8e 5f       	subi	r24, 0xFE	; 254
    1446:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
			oled_clear_page(pos_child+header_pages);
    144a:	c9 eb       	ldi	r28, 0xB9	; 185
    144c:	d1 e0       	ldi	r29, 0x01	; 1
    144e:	88 81       	ld	r24, Y
    1450:	8e 5f       	subi	r24, 0xFE	; 254
    1452:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_clear_page>
			oled_print_page_progmem(curr_menu->oledOffset,header_pages+pos_child);
    1456:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <pos_child>
    145a:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <pos_child+0x1>
    145e:	6e 5f       	subi	r22, 0xFE	; 254
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <curr_menu>
    1466:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <curr_menu+0x1>
    146a:	80 85       	ldd	r24, Z+8	; 0x08
    146c:	91 85       	ldd	r25, Z+9	; 0x09
    146e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <oled_print_page_progmem>
			
			oled_goto_page(pos_child+header_pages-1);
    1472:	88 81       	ld	r24, Y
    1474:	8f 5f       	subi	r24, 0xFF	; 255
    1476:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
			oled_clear_page(pos_child+header_pages-1);
    147a:	88 81       	ld	r24, Y
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_clear_page>
			oled_print_page_progmem((curr_menu->oledOffset)+s_screen,header_pages+pos_child-1);
    1482:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <pos_child>
    1486:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <pos_child+0x1>
    148a:	6f 5f       	subi	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <curr_menu>
    1492:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <curr_menu+0x1>
    1496:	80 85       	ldd	r24, Z+8	; 0x08
    1498:	91 85       	ldd	r25, Z+9	; 0x09
    149a:	08 96       	adiw	r24, 0x08	; 8
    149c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <oled_print_page_progmem>
				
			pos_child -= 1;
    14a0:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pos_child>
    14a4:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <pos_child+0x1>
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <pos_child+0x1>
    14ae:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <pos_child>
    14b2:	46 c0       	rjmp	.+140    	; 0x1540 <navigate+0x13c>
		}
		break;
		case DOWN:
		if(pos_child < curr_menu->numOfChildren-1){
    14b4:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pos_child>
    14b8:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <pos_child+0x1>
    14bc:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <curr_menu>
    14c0:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <curr_menu+0x1>
    14c4:	26 81       	ldd	r18, Z+6	; 0x06
    14c6:	37 81       	ldd	r19, Z+7	; 0x07
    14c8:	21 50       	subi	r18, 0x01	; 1
    14ca:	31 09       	sbc	r19, r1
    14cc:	82 17       	cp	r24, r18
    14ce:	93 07       	cpc	r25, r19
    14d0:	bc f5       	brge	.+110    	; 0x1540 <navigate+0x13c>
			oled_goto_page(pos_child+header_pages);
    14d2:	8e 5f       	subi	r24, 0xFE	; 254
    14d4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
			oled_clear_page(pos_child+header_pages);
    14d8:	c9 eb       	ldi	r28, 0xB9	; 185
    14da:	d1 e0       	ldi	r29, 0x01	; 1
    14dc:	88 81       	ld	r24, Y
    14de:	8e 5f       	subi	r24, 0xFE	; 254
    14e0:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_clear_page>
			oled_print_page_progmem(curr_menu->oledOffset,header_pages+pos_child);
    14e4:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <pos_child>
    14e8:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <pos_child+0x1>
    14ec:	6e 5f       	subi	r22, 0xFE	; 254
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <curr_menu>
    14f4:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <curr_menu+0x1>
    14f8:	80 85       	ldd	r24, Z+8	; 0x08
    14fa:	91 85       	ldd	r25, Z+9	; 0x09
    14fc:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <oled_print_page_progmem>
			
			oled_goto_page(pos_child+header_pages+1);
    1500:	88 81       	ld	r24, Y
    1502:	8d 5f       	subi	r24, 0xFD	; 253
    1504:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
			oled_clear_page(pos_child+header_pages+1);
    1508:	88 81       	ld	r24, Y
    150a:	8d 5f       	subi	r24, 0xFD	; 253
    150c:	0e 94 24 0b 	call	0x1648	; 0x1648 <oled_clear_page>
			oled_print_page_progmem((curr_menu->oledOffset)+s_screen,header_pages+pos_child+1);
    1510:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <pos_child>
    1514:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <pos_child+0x1>
    1518:	6d 5f       	subi	r22, 0xFD	; 253
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <curr_menu>
    1520:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <curr_menu+0x1>
    1524:	80 85       	ldd	r24, Z+8	; 0x08
    1526:	91 85       	ldd	r25, Z+9	; 0x09
    1528:	08 96       	adiw	r24, 0x08	; 8
    152a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <oled_print_page_progmem>
			
			pos_child += 1;
    152e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pos_child>
    1532:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <pos_child+0x1>
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <pos_child+0x1>
    153c:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <pos_child>
		}
		break;
	}
}
	if (!(PINB & (1<<PB2))){
    1540:	b2 99       	sbic	0x16, 2	; 22
    1542:	2c c0       	rjmp	.+88     	; 0x159c <navigate+0x198>
		if(curr_menu->children!= NULL){
    1544:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <curr_menu>
    1548:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <curr_menu+0x1>
    154c:	84 81       	ldd	r24, Z+4	; 0x04
    154e:	95 81       	ldd	r25, Z+5	; 0x05
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	d9 f0       	breq	.+54     	; 0x158a <navigate+0x186>
			curr_menu=curr_menu->children[pos_child];
    1554:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <pos_child>
    1558:	f0 91 ba 01 	lds	r31, 0x01BA	; 0x8001ba <pos_child+0x1>
    155c:	ee 0f       	add	r30, r30
    155e:	ff 1f       	adc	r31, r31
    1560:	e8 0f       	add	r30, r24
    1562:	f9 1f       	adc	r31, r25
    1564:	a0 81       	ld	r26, Z
    1566:	b1 81       	ldd	r27, Z+1	; 0x01
    1568:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <curr_menu+0x1>
    156c:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <curr_menu>
			pos_child=0;
    1570:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <pos_child+0x1>
    1574:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pos_child>
			(*curr_menu->function)(curr_menu->name);
    1578:	12 96       	adiw	r26, 0x02	; 2
    157a:	ed 91       	ld	r30, X+
    157c:	fc 91       	ld	r31, X
    157e:	13 97       	sbiw	r26, 0x03	; 3
    1580:	1a 96       	adiw	r26, 0x0a	; 10
    1582:	8d 91       	ld	r24, X+
    1584:	9c 91       	ld	r25, X
    1586:	1b 97       	sbiw	r26, 0x0b	; 11
    1588:	09 95       	icall
    158a:	2f ef       	ldi	r18, 0xFF	; 255
    158c:	83 ec       	ldi	r24, 0xC3	; 195
    158e:	99 e0       	ldi	r25, 0x09	; 9
    1590:	21 50       	subi	r18, 0x01	; 1
    1592:	80 40       	sbci	r24, 0x00	; 0
    1594:	90 40       	sbci	r25, 0x00	; 0
    1596:	e1 f7       	brne	.-8      	; 0x1590 <navigate+0x18c>
    1598:	00 c0       	rjmp	.+0      	; 0x159a <navigate+0x196>
    159a:	00 00       	nop
		}
		_delay_ms(200);
	}
		
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <oled_mode>:
	}
	oled_goto_pos(4,0);
	for (int j=0; j<1024; j++){
		ext_oled_data[j] = 0xff;
	}
	oled_mode(PAGE_MODE);
    15a2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    15a6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    15aa:	90 e2       	ldi	r25, 0x20	; 32
    15ac:	90 83       	st	Z, r25
    15ae:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    15b2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    15b6:	80 83       	st	Z, r24
    15b8:	08 95       	ret

000015ba <oled_goto_page>:
    15ba:	88 30       	cpi	r24, 0x08	; 8
    15bc:	48 f0       	brcs	.+18     	; 0x15d0 <oled_goto_page+0x16>
    15be:	88 e5       	ldi	r24, 0x58	; 88
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	9f 93       	push	r25
    15c4:	8f 93       	push	r24
    15c6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <printf>
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	08 95       	ret
    15d0:	90 eb       	ldi	r25, 0xB0	; 176
    15d2:	98 0f       	add	r25, r24
    15d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    15d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    15dc:	90 83       	st	Z, r25
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <oled_position+0x1>
    15e4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <oled_position>
    15e8:	08 95       	ret

000015ea <oled_goto_col>:
    15ea:	88 23       	and	r24, r24
    15ec:	4c f4       	brge	.+18     	; 0x1600 <oled_goto_col+0x16>
    15ee:	88 e5       	ldi	r24, 0x58	; 88
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	9f 93       	push	r25
    15f4:	8f 93       	push	r24
    15f6:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <printf>
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	08 95       	ret
    1600:	28 2f       	mov	r18, r24
    1602:	2f 70       	andi	r18, 0x0F	; 15
    1604:	98 2f       	mov	r25, r24
    1606:	92 95       	swap	r25
    1608:	9f 70       	andi	r25, 0x0F	; 15
    160a:	90 5f       	subi	r25, 0xF0	; 240
    160c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1610:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1614:	90 83       	st	Z, r25
    1616:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    161a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    161e:	20 83       	st	Z, r18
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <oled_position+0x3>
    1626:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <oled_position+0x2>
    162a:	08 95       	ret

0000162c <oled_goto_pos>:
    162c:	cf 93       	push	r28
    162e:	c6 2f       	mov	r28, r22
    1630:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
    1634:	8c 2f       	mov	r24, r28
    1636:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <oled_home>:
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0e 94 16 0b 	call	0x162c	; 0x162c <oled_goto_pos>
    1646:	08 95       	ret

00001648 <oled_clear_page>:
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	0e 94 16 0b 	call	0x162c	; 0x162c <oled_goto_pos>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    1656:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    165a:	e8 0f       	add	r30, r24
    165c:	f9 1f       	adc	r31, r25
    165e:	10 82       	st	Z, r1
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	80 38       	cpi	r24, 0x80	; 128
    1664:	91 05       	cpc	r25, r1
    1666:	a9 f7       	brne	.-22     	; 0x1652 <oled_clear_page+0xa>
    1668:	08 95       	ret

0000166a <oled_clear_screen>:
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	0e 94 16 0b 	call	0x162c	; 0x162c <oled_goto_pos>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <oled_mode>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    1680:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    1684:	e8 0f       	add	r30, r24
    1686:	f9 1f       	adc	r31, r25
    1688:	10 82       	st	Z, r1
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	81 15       	cp	r24, r1
    168e:	24 e0       	ldi	r18, 0x04	; 4
    1690:	92 07       	cpc	r25, r18
    1692:	a1 f7       	brne	.-24     	; 0x167c <oled_clear_screen+0x12>
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	84 e0       	ldi	r24, 0x04	; 4
    1698:	0e 94 16 0b 	call	0x162c	; 0x162c <oled_goto_pos>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    16a4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    16a8:	e8 0f       	add	r30, r24
    16aa:	f9 1f       	adc	r31, r25
    16ac:	10 82       	st	Z, r1
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	81 15       	cp	r24, r1
    16b2:	24 e0       	ldi	r18, 0x04	; 4
    16b4:	92 07       	cpc	r25, r18
    16b6:	a1 f7       	brne	.-24     	; 0x16a0 <oled_clear_screen+0x36>
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <oled_mode>
    16be:	08 95       	ret

000016c0 <oled_reset>:
    16c0:	0e 94 1f 0b 	call	0x163e	; 0x163e <oled_home>
    16c4:	0e 94 35 0b 	call	0x166a	; 0x166a <oled_clear_screen>
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <oled_mode>
    16ce:	08 95       	ret

000016d0 <oled_write_char>:
}


void oled_write_char(char c, int fs){
	c=c-32;
    16d0:	80 52       	subi	r24, 0x20	; 32
	
	switch(fs){
    16d2:	64 30       	cpi	r22, 0x04	; 4
    16d4:	71 05       	cpc	r23, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <oled_write_char+0xa>
    16d8:	70 c0       	rjmp	.+224    	; 0x17ba <oled_write_char+0xea>
    16da:	1c f4       	brge	.+6      	; 0x16e2 <oled_write_char+0x12>
    16dc:	67 2b       	or	r22, r23
    16de:	89 f0       	breq	.+34     	; 0x1702 <oled_write_char+0x32>
    16e0:	08 95       	ret
    16e2:	66 30       	cpi	r22, 0x06	; 6
    16e4:	71 05       	cpc	r23, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <oled_write_char+0x1a>
    16e8:	40 c0       	rjmp	.+128    	; 0x176a <oled_write_char+0x9a>
    16ea:	68 30       	cpi	r22, 0x08	; 8
    16ec:	71 05       	cpc	r23, r1
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <oled_write_char+0x22>
    16f0:	b3 c0       	rjmp	.+358    	; 0x1858 <oled_write_char+0x188>
		case 8 :
			for(int i=0; i<fontsize;i++){
    16f2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <fontsize>
    16f6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <fontsize+0x1>
    16fa:	12 16       	cp	r1, r18
    16fc:	13 06       	cpc	r1, r19
    16fe:	54 f0       	brlt	.+20     	; 0x1714 <oled_write_char+0x44>
    1700:	08 95       	ret
				oled_wrd(pgm_read_word(&font4[c][i]));
				oled_position.coloumn++;
			}
			break;
		case 0 :
			for(int i=0; i<fontsize;i++){
    1702:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <fontsize>
    1706:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <fontsize+0x1>
    170a:	12 16       	cp	r1, r18
    170c:	13 06       	cpc	r1, r19
    170e:	0c f4       	brge	.+2      	; 0x1712 <oled_write_char+0x42>
    1710:	79 c0       	rjmp	.+242    	; 0x1804 <oled_write_char+0x134>
    1712:	08 95       	ret
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
void oled_write_char(char c, int fs){
	c=c-32;
	
	switch(fs){
		case 8 :
			for(int i=0; i<fontsize;i++){
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
				oled_wrd(pgm_read_word(&font8[c][i]));
				oled_position.coloumn++;
    1726:	a4 ec       	ldi	r26, 0xC4	; 196
    1728:	b1 e0       	ldi	r27, 0x01	; 1
	c=c-32;
	
	switch(fs){
		case 8 :
			for(int i=0; i<fontsize;i++){
				oled_wrd(pgm_read_word(&font8[c][i]));
    172a:	f9 01       	movw	r30, r18
    172c:	e8 0f       	add	r30, r24
    172e:	f9 1f       	adc	r31, r25
    1730:	e2 5e       	subi	r30, 0xE2	; 226
    1732:	f8 4f       	sbci	r31, 0xF8	; 248
    1734:	45 91       	lpm	r20, Z+
    1736:	54 91       	lpm	r21, Z
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
}
//oled write data
void oled_wrd(uint8_t data){
	ext_oled_data[0] = data;
    1738:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    173c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    1740:	40 83       	st	Z, r20
	
	switch(fs){
		case 8 :
			for(int i=0; i<fontsize;i++){
				oled_wrd(pgm_read_word(&font8[c][i]));
				oled_position.coloumn++;
    1742:	12 96       	adiw	r26, 0x02	; 2
    1744:	4d 91       	ld	r20, X+
    1746:	5c 91       	ld	r21, X
    1748:	13 97       	sbiw	r26, 0x03	; 3
    174a:	4f 5f       	subi	r20, 0xFF	; 255
    174c:	5f 4f       	sbci	r21, 0xFF	; 255
    174e:	13 96       	adiw	r26, 0x03	; 3
    1750:	5c 93       	st	X, r21
    1752:	4e 93       	st	-X, r20
    1754:	12 97       	sbiw	r26, 0x02	; 2
void oled_write_char(char c, int fs){
	c=c-32;
	
	switch(fs){
		case 8 :
			for(int i=0; i<fontsize;i++){
    1756:	2f 5f       	subi	r18, 0xFF	; 255
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <fontsize>
    175e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <fontsize+0x1>
    1762:	24 17       	cp	r18, r20
    1764:	35 07       	cpc	r19, r21
    1766:	0c f3       	brlt	.-62     	; 0x172a <oled_write_char+0x5a>
    1768:	08 95       	ret
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	9c 01       	movw	r18, r24
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25


void oled_write_char(char c, int fs){
	c=c-32;
	
	switch(fs){
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
			}
			break;
		case 6 :
			for(int i=0; i<6;i++){
				oled_wrd(pgm_read_word(&font6[c][i]));
				oled_position.coloumn++;
    177e:	a4 ec       	ldi	r26, 0xC4	; 196
    1780:	b1 e0       	ldi	r27, 0x01	; 1
				oled_position.coloumn++;
			}
			break;
		case 6 :
			for(int i=0; i<6;i++){
				oled_wrd(pgm_read_word(&font6[c][i]));
    1782:	f9 01       	movw	r30, r18
    1784:	e8 0f       	add	r30, r24
    1786:	f9 1f       	adc	r31, r25
    1788:	ec 51       	subi	r30, 0x1C	; 28
    178a:	fb 4f       	sbci	r31, 0xFB	; 251
    178c:	45 91       	lpm	r20, Z+
    178e:	54 91       	lpm	r21, Z
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
}
//oled write data
void oled_wrd(uint8_t data){
	ext_oled_data[0] = data;
    1790:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    1794:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    1798:	40 83       	st	Z, r20
			}
			break;
		case 6 :
			for(int i=0; i<6;i++){
				oled_wrd(pgm_read_word(&font6[c][i]));
				oled_position.coloumn++;
    179a:	12 96       	adiw	r26, 0x02	; 2
    179c:	4d 91       	ld	r20, X+
    179e:	5c 91       	ld	r21, X
    17a0:	13 97       	sbiw	r26, 0x03	; 3
    17a2:	4f 5f       	subi	r20, 0xFF	; 255
    17a4:	5f 4f       	sbci	r21, 0xFF	; 255
    17a6:	13 96       	adiw	r26, 0x03	; 3
    17a8:	5c 93       	st	X, r21
    17aa:	4e 93       	st	-X, r20
    17ac:	12 97       	sbiw	r26, 0x02	; 2
				oled_wrd(pgm_read_word(&font8[c][i]));
				oled_position.coloumn++;
			}
			break;
		case 6 :
			for(int i=0; i<6;i++){
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	26 30       	cpi	r18, 0x06	; 6
    17b4:	31 05       	cpc	r19, r1
    17b6:	29 f7       	brne	.-54     	; 0x1782 <oled_write_char+0xb2>
    17b8:	08 95       	ret
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25


void oled_write_char(char c, int fs){
	c=c-32;
	
	switch(fs){
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
			}
			break;
		case 4 :
			for(int i=0; i<4;i++){
				oled_wrd(pgm_read_word(&font4[c][i]));
				oled_position.coloumn++;
    17c8:	a4 ec       	ldi	r26, 0xC4	; 196
    17ca:	b1 e0       	ldi	r27, 0x01	; 1
				oled_position.coloumn++;
			}
			break;
		case 4 :
			for(int i=0; i<4;i++){
				oled_wrd(pgm_read_word(&font4[c][i]));
    17cc:	f9 01       	movw	r30, r18
    17ce:	e8 0f       	add	r30, r24
    17d0:	f9 1f       	adc	r31, r25
    17d2:	e8 59       	subi	r30, 0x98	; 152
    17d4:	fc 4f       	sbci	r31, 0xFC	; 252
    17d6:	45 91       	lpm	r20, Z+
    17d8:	54 91       	lpm	r21, Z
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
}
//oled write data
void oled_wrd(uint8_t data){
	ext_oled_data[0] = data;
    17da:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    17de:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    17e2:	40 83       	st	Z, r20
			}
			break;
		case 4 :
			for(int i=0; i<4;i++){
				oled_wrd(pgm_read_word(&font4[c][i]));
				oled_position.coloumn++;
    17e4:	12 96       	adiw	r26, 0x02	; 2
    17e6:	4d 91       	ld	r20, X+
    17e8:	5c 91       	ld	r21, X
    17ea:	13 97       	sbiw	r26, 0x03	; 3
    17ec:	4f 5f       	subi	r20, 0xFF	; 255
    17ee:	5f 4f       	sbci	r21, 0xFF	; 255
    17f0:	13 96       	adiw	r26, 0x03	; 3
    17f2:	5c 93       	st	X, r21
    17f4:	4e 93       	st	-X, r20
    17f6:	12 97       	sbiw	r26, 0x02	; 2
				oled_wrd(pgm_read_word(&font6[c][i]));
				oled_position.coloumn++;
			}
			break;
		case 4 :
			for(int i=0; i<4;i++){
    17f8:	2f 5f       	subi	r18, 0xFF	; 255
    17fa:	3f 4f       	sbci	r19, 0xFF	; 255
    17fc:	24 30       	cpi	r18, 0x04	; 4
    17fe:	31 05       	cpc	r19, r1
    1800:	29 f7       	brne	.-54     	; 0x17cc <oled_write_char+0xfc>
    1802:	08 95       	ret
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
				oled_wrd(pgm_read_word(&font4[c][i]));
				oled_position.coloumn++;
			}
			break;
		case 0 :
			for(int i=0; i<fontsize;i++){
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	50 e0       	ldi	r21, 0x00	; 0
				oled_wrd(pgm_read_word(&font_animation[c][i]));
				oled_position.coloumn++;
    1816:	a4 ec       	ldi	r26, 0xC4	; 196
    1818:	b1 e0       	ldi	r27, 0x01	; 1
				oled_position.coloumn++;
			}
			break;
		case 0 :
			for(int i=0; i<fontsize;i++){
				oled_wrd(pgm_read_word(&font_animation[c][i]));
    181a:	fa 01       	movw	r30, r20
    181c:	e8 0f       	add	r30, r24
    181e:	f9 1f       	adc	r31, r25
    1820:	e0 59       	subi	r30, 0x90	; 144
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	25 91       	lpm	r18, Z+
    1826:	34 91       	lpm	r19, Z
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
}
//oled write data
void oled_wrd(uint8_t data){
	ext_oled_data[0] = data;
    1828:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ext_oled_data>
    182c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ext_oled_data+0x1>
    1830:	20 83       	st	Z, r18
			}
			break;
		case 0 :
			for(int i=0; i<fontsize;i++){
				oled_wrd(pgm_read_word(&font_animation[c][i]));
				oled_position.coloumn++;
    1832:	12 96       	adiw	r26, 0x02	; 2
    1834:	2d 91       	ld	r18, X+
    1836:	3c 91       	ld	r19, X
    1838:	13 97       	sbiw	r26, 0x03	; 3
    183a:	2f 5f       	subi	r18, 0xFF	; 255
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	13 96       	adiw	r26, 0x03	; 3
    1840:	3c 93       	st	X, r19
    1842:	2e 93       	st	-X, r18
    1844:	12 97       	sbiw	r26, 0x02	; 2
				oled_wrd(pgm_read_word(&font4[c][i]));
				oled_position.coloumn++;
			}
			break;
		case 0 :
			for(int i=0; i<fontsize;i++){
    1846:	4f 5f       	subi	r20, 0xFF	; 255
    1848:	5f 4f       	sbci	r21, 0xFF	; 255
    184a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <fontsize>
    184e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <fontsize+0x1>
    1852:	42 17       	cp	r20, r18
    1854:	53 07       	cpc	r21, r19
    1856:	0c f3       	brlt	.-62     	; 0x181a <oled_write_char+0x14a>
    1858:	08 95       	ret

0000185a <oled_print>:
	
}



void oled_print(char* word, int fs){
    185a:	cf 92       	push	r12
    185c:	df 92       	push	r13
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
    186c:	7b 01       	movw	r14, r22
    186e:	8c 01       	movw	r16, r24
	for( int i = 0; i < strlen(word); i++){
    1870:	c1 2c       	mov	r12, r1
    1872:	d1 2c       	mov	r13, r1
    1874:	09 c0       	rjmp	.+18     	; 0x1888 <oled_print+0x2e>
		oled_write_char(word[i], fs);
    1876:	b7 01       	movw	r22, r14
    1878:	f8 01       	movw	r30, r16
    187a:	81 91       	ld	r24, Z+
    187c:	8f 01       	movw	r16, r30
    187e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
}



void oled_print(char* word, int fs){
	for( int i = 0; i < strlen(word); i++){
    1882:	ff ef       	ldi	r31, 0xFF	; 255
    1884:	cf 1a       	sub	r12, r31
    1886:	df 0a       	sbc	r13, r31
    1888:	fe 01       	movw	r30, r28
    188a:	01 90       	ld	r0, Z+
    188c:	00 20       	and	r0, r0
    188e:	e9 f7       	brne	.-6      	; 0x188a <oled_print+0x30>
    1890:	31 97       	sbiw	r30, 0x01	; 1
    1892:	ec 1b       	sub	r30, r28
    1894:	fd 0b       	sbc	r31, r29
    1896:	ce 16       	cp	r12, r30
    1898:	df 06       	cpc	r13, r31
    189a:	68 f3       	brcs	.-38     	; 0x1876 <oled_print+0x1c>
		oled_write_char(word[i], fs);
	}
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	08 95       	ret

000018ae <oled_center_print>:

void oled_center_print(char* word, int fs){
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	ec 01       	movw	r28, r24
    18b8:	8b 01       	movw	r16, r22
	oled_goto_col(63-(strlen(word)*fs/2));
    18ba:	fc 01       	movw	r30, r24
    18bc:	01 90       	ld	r0, Z+
    18be:	00 20       	and	r0, r0
    18c0:	e9 f7       	brne	.-6      	; 0x18bc <oled_center_print+0xe>
    18c2:	31 97       	sbiw	r30, 0x01	; 1
    18c4:	e8 1b       	sub	r30, r24
    18c6:	f9 0b       	sbc	r31, r25
    18c8:	6e 9f       	mul	r22, r30
    18ca:	90 01       	movw	r18, r0
    18cc:	6f 9f       	mul	r22, r31
    18ce:	30 0d       	add	r19, r0
    18d0:	7e 9f       	mul	r23, r30
    18d2:	30 0d       	add	r19, r0
    18d4:	11 24       	eor	r1, r1
    18d6:	36 95       	lsr	r19
    18d8:	27 95       	ror	r18
    18da:	8f e3       	ldi	r24, 0x3F	; 63
    18dc:	82 1b       	sub	r24, r18
    18de:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
	oled_print(word, fs);
    18e2:	b8 01       	movw	r22, r16
    18e4:	ce 01       	movw	r24, r28
    18e6:	0e 94 2d 0c 	call	0x185a	; 0x185a <oled_print>
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	08 95       	ret

000018f4 <oled_arrow>:

char* oled_arrow(char* name){
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	8c 01       	movw	r16, r24
	char* str = malloc(sizeof(char)*20);
    18fe:	84 e1       	ldi	r24, 0x14	; 20
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 8f 11 	call	0x231e	; 0x231e <malloc>
    1906:	ec 01       	movw	r28, r24
	strcpy(str,">");
    1908:	8e e3       	ldi	r24, 0x3E	; 62
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	99 83       	std	Y+1, r25	; 0x01
    190e:	88 83       	st	Y, r24
	strcat(str,name);
    1910:	b8 01       	movw	r22, r16
    1912:	ce 01       	movw	r24, r28
    1914:	0e 94 86 13 	call	0x270c	; 0x270c <strcat>
	strcat(str,"<");
    1918:	fe 01       	movw	r30, r28
    191a:	01 90       	ld	r0, Z+
    191c:	00 20       	and	r0, r0
    191e:	e9 f7       	brne	.-6      	; 0x191a <oled_arrow+0x26>
    1920:	31 97       	sbiw	r30, 0x01	; 1
    1922:	8c e3       	ldi	r24, 0x3C	; 60
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
	return str;
}
    192a:	ce 01       	movw	r24, r28
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <oled_animation_frame>:

void oled_animation_frame(char c, int col,char c1,int col1){
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	18 2f       	mov	r17, r24
    193e:	86 2f       	mov	r24, r22
    1940:	d4 2f       	mov	r29, r20
    1942:	c2 2f       	mov	r28, r18
	oled_goto_col(col);
    1944:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
	oled_write_char(c,0);
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	81 2f       	mov	r24, r17
    194e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
	oled_goto_col(col1);
    1952:	8c 2f       	mov	r24, r28
    1954:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
	oled_write_char(c1,0);
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	8d 2f       	mov	r24, r29
    195e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
    1962:	83 ed       	ldi	r24, 0xD3	; 211
    1964:	90 e3       	ldi	r25, 0x30	; 48
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <oled_animation_frame+0x30>
    196a:	00 c0       	rjmp	.+0      	; 0x196c <oled_animation_frame+0x36>
    196c:	00 00       	nop
	_delay_ms(50);
	oled_goto_col(col1);
    196e:	8c 2f       	mov	r24, r28
    1970:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
	oled_write_char('H',0);
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	88 e4       	ldi	r24, 0x48	; 72
    197a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
}
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	08 95       	ret

00001986 <oled_animation>:

void oled_animation(int page){
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
	oled_goto_page(page);
    198c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
	oled_goto_col(120);
    1990:	88 e7       	ldi	r24, 0x78	; 120
    1992:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
	oled_write_char('J',0);
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	8a e4       	ldi	r24, 0x4A	; 74
    199c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
    19a0:	03 e0       	ldi	r16, 0x03	; 3
    19a2:	10 e0       	ldi	r17, 0x00	; 0
	for( int i = 0; i < 3; i++){
		oled_animation_frame('A',0,'I',2);
    19a4:	22 e0       	ldi	r18, 0x02	; 2
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	49 e4       	ldi	r20, 0x49	; 73
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	81 e4       	ldi	r24, 0x41	; 65
    19b0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('B',0,'I',3);
    19b4:	23 e0       	ldi	r18, 0x03	; 3
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	49 e4       	ldi	r20, 0x49	; 73
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	82 e4       	ldi	r24, 0x42	; 66
    19c0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('C',0,'I',4);
    19c4:	24 e0       	ldi	r18, 0x04	; 4
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	49 e4       	ldi	r20, 0x49	; 73
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	83 e4       	ldi	r24, 0x43	; 67
    19d0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('D',0,'I',5);
    19d4:	25 e0       	ldi	r18, 0x05	; 5
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	49 e4       	ldi	r20, 0x49	; 73
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	84 e4       	ldi	r24, 0x44	; 68
    19e0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('E',0,'I',6);
    19e4:	26 e0       	ldi	r18, 0x06	; 6
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	49 e4       	ldi	r20, 0x49	; 73
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	85 e4       	ldi	r24, 0x45	; 69
    19f0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('F',0,'I',7);
    19f4:	27 e0       	ldi	r18, 0x07	; 7
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	49 e4       	ldi	r20, 0x49	; 73
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	86 e4       	ldi	r24, 0x46	; 70
    1a00:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('G',0,'I',8);
    1a04:	28 e0       	ldi	r18, 0x08	; 8
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	49 e4       	ldi	r20, 0x49	; 73
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	87 e4       	ldi	r24, 0x47	; 71
    1a10:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('F',0,'I',9);
    1a14:	29 e0       	ldi	r18, 0x09	; 9
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	49 e4       	ldi	r20, 0x49	; 73
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	86 e4       	ldi	r24, 0x46	; 70
    1a20:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('E',0,'I',10);
    1a24:	2a e0       	ldi	r18, 0x0A	; 10
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	49 e4       	ldi	r20, 0x49	; 73
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	85 e4       	ldi	r24, 0x45	; 69
    1a30:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('D',0,'I',11);
    1a34:	2b e0       	ldi	r18, 0x0B	; 11
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	49 e4       	ldi	r20, 0x49	; 73
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	84 e4       	ldi	r24, 0x44	; 68
    1a40:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('C',0,'I',12);
    1a44:	2c e0       	ldi	r18, 0x0C	; 12
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	49 e4       	ldi	r20, 0x49	; 73
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	83 e4       	ldi	r24, 0x43	; 67
    1a50:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('B',0,'I',13);
    1a54:	2d e0       	ldi	r18, 0x0D	; 13
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	49 e4       	ldi	r20, 0x49	; 73
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	82 e4       	ldi	r24, 0x42	; 66
    1a60:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('A',0,'I',14);
    1a64:	2e e0       	ldi	r18, 0x0E	; 14
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	49 e4       	ldi	r20, 0x49	; 73
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	81 e4       	ldi	r24, 0x41	; 65
    1a70:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
    1a74:	cf e0       	ldi	r28, 0x0F	; 15
		
		for(int i=15; i<118; i++){
			oled_goto_col(i);
    1a76:	8c 2f       	mov	r24, r28
    1a78:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
			oled_write_char('I',0);
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	89 e4       	ldi	r24, 0x49	; 73
    1a82:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
    1a86:	83 ed       	ldi	r24, 0xD3	; 211
    1a88:	90 e3       	ldi	r25, 0x30	; 48
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <oled_animation+0x104>
    1a8e:	00 c0       	rjmp	.+0      	; 0x1a90 <oled_animation+0x10a>
    1a90:	00 00       	nop
			_delay_ms(50);
			oled_goto_col(i);
    1a92:	8c 2f       	mov	r24, r28
    1a94:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
			oled_write_char('H',0);
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	88 e4       	ldi	r24, 0x48	; 72
    1a9e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
    1aa2:	cf 5f       	subi	r28, 0xFF	; 255
		oled_animation_frame('D',0,'I',11);
		oled_animation_frame('C',0,'I',12);
		oled_animation_frame('B',0,'I',13);
		oled_animation_frame('A',0,'I',14);
		
		for(int i=15; i<118; i++){
    1aa4:	c6 37       	cpi	r28, 0x76	; 118
    1aa6:	39 f7       	brne	.-50     	; 0x1a76 <oled_animation+0xf0>
			_delay_ms(50);
			oled_goto_col(i);
			oled_write_char('H',0);
		}

		oled_animation_frame('J',120,'I',118);
    1aa8:	26 e7       	ldi	r18, 0x76	; 118
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	49 e4       	ldi	r20, 0x49	; 73
    1aae:	68 e7       	ldi	r22, 0x78	; 120
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	8a e4       	ldi	r24, 0x4A	; 74
    1ab4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('K',120,'I',117);
    1ab8:	25 e7       	ldi	r18, 0x75	; 117
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	49 e4       	ldi	r20, 0x49	; 73
    1abe:	68 e7       	ldi	r22, 0x78	; 120
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	8b e4       	ldi	r24, 0x4B	; 75
    1ac4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('L',120,'I',116);
    1ac8:	24 e7       	ldi	r18, 0x74	; 116
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	49 e4       	ldi	r20, 0x49	; 73
    1ace:	68 e7       	ldi	r22, 0x78	; 120
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	8c e4       	ldi	r24, 0x4C	; 76
    1ad4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('M',120,'I',115);
    1ad8:	23 e7       	ldi	r18, 0x73	; 115
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	49 e4       	ldi	r20, 0x49	; 73
    1ade:	68 e7       	ldi	r22, 0x78	; 120
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	8d e4       	ldi	r24, 0x4D	; 77
    1ae4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('N',120,'I',114);
    1ae8:	22 e7       	ldi	r18, 0x72	; 114
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	49 e4       	ldi	r20, 0x49	; 73
    1aee:	68 e7       	ldi	r22, 0x78	; 120
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	8e e4       	ldi	r24, 0x4E	; 78
    1af4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('O',120,'I',113);
    1af8:	21 e7       	ldi	r18, 0x71	; 113
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	49 e4       	ldi	r20, 0x49	; 73
    1afe:	68 e7       	ldi	r22, 0x78	; 120
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	8f e4       	ldi	r24, 0x4F	; 79
    1b04:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('P',120,'I',112);
    1b08:	20 e7       	ldi	r18, 0x70	; 112
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	49 e4       	ldi	r20, 0x49	; 73
    1b0e:	68 e7       	ldi	r22, 0x78	; 120
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	80 e5       	ldi	r24, 0x50	; 80
    1b14:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('O',120,'I',111);
    1b18:	2f e6       	ldi	r18, 0x6F	; 111
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	49 e4       	ldi	r20, 0x49	; 73
    1b1e:	68 e7       	ldi	r22, 0x78	; 120
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	8f e4       	ldi	r24, 0x4F	; 79
    1b24:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('N',120,'I',110);
    1b28:	2e e6       	ldi	r18, 0x6E	; 110
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	49 e4       	ldi	r20, 0x49	; 73
    1b2e:	68 e7       	ldi	r22, 0x78	; 120
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	8e e4       	ldi	r24, 0x4E	; 78
    1b34:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('M',120,'I',109);
    1b38:	2d e6       	ldi	r18, 0x6D	; 109
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	49 e4       	ldi	r20, 0x49	; 73
    1b3e:	68 e7       	ldi	r22, 0x78	; 120
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	8d e4       	ldi	r24, 0x4D	; 77
    1b44:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('L',120,'I',108);
    1b48:	2c e6       	ldi	r18, 0x6C	; 108
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	49 e4       	ldi	r20, 0x49	; 73
    1b4e:	68 e7       	ldi	r22, 0x78	; 120
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	8c e4       	ldi	r24, 0x4C	; 76
    1b54:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('K',120,'I',107);
    1b58:	2b e6       	ldi	r18, 0x6B	; 107
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	49 e4       	ldi	r20, 0x49	; 73
    1b5e:	68 e7       	ldi	r22, 0x78	; 120
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	8b e4       	ldi	r24, 0x4B	; 75
    1b64:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
		oled_animation_frame('J',120,'I',106);
    1b68:	2a e6       	ldi	r18, 0x6A	; 106
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	49 e4       	ldi	r20, 0x49	; 73
    1b6e:	68 e7       	ldi	r22, 0x78	; 120
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	8a e4       	ldi	r24, 0x4A	; 74
    1b74:	0e 94 9b 0c 	call	0x1936	; 0x1936 <oled_animation_frame>
    1b78:	c9 e6       	ldi	r28, 0x69	; 105
		for(int i=105; i>1; i--){
			oled_goto_col(i);
    1b7a:	8c 2f       	mov	r24, r28
    1b7c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
			oled_write_char('I',0);
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	89 e4       	ldi	r24, 0x49	; 73
    1b86:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
    1b8a:	83 ed       	ldi	r24, 0xD3	; 211
    1b8c:	90 e3       	ldi	r25, 0x30	; 48
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <oled_animation+0x208>
    1b92:	00 c0       	rjmp	.+0      	; 0x1b94 <oled_animation+0x20e>
    1b94:	00 00       	nop
			_delay_ms(50);
			oled_goto_col(i);
    1b96:	8c 2f       	mov	r24, r28
    1b98:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
			oled_write_char('H',0);
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	88 e4       	ldi	r24, 0x48	; 72
    1ba2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
    1ba6:	c1 50       	subi	r28, 0x01	; 1
		oled_animation_frame('N',120,'I',110);
		oled_animation_frame('M',120,'I',109);
		oled_animation_frame('L',120,'I',108);
		oled_animation_frame('K',120,'I',107);
		oled_animation_frame('J',120,'I',106);
		for(int i=105; i>1; i--){
    1ba8:	c1 30       	cpi	r28, 0x01	; 1
    1baa:	39 f7       	brne	.-50     	; 0x1b7a <oled_animation+0x1f4>
    1bac:	01 50       	subi	r16, 0x01	; 1
    1bae:	11 09       	sbc	r17, r1

void oled_animation(int page){
	oled_goto_page(page);
	oled_goto_col(120);
	oled_write_char('J',0);
	for( int i = 0; i < 3; i++){
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <oled_animation+0x22e>
    1bb2:	f8 ce       	rjmp	.-528    	; 0x19a4 <oled_animation+0x1e>
			_delay_ms(50);
			oled_goto_col(i);
			oled_write_char('H',0);
		}
	}
}
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <oled_init>:
int fontsize = 8;


//oled write command
void oled_wrc(uint8_t data){
	ext_oled_command[0] = data;
    1bbc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1bc0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1bc4:	8e ea       	ldi	r24, 0xAE	; 174
    1bc6:	80 83       	st	Z, r24
    1bc8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1bcc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1bd0:	81 ea       	ldi	r24, 0xA1	; 161
    1bd2:	80 83       	st	Z, r24
    1bd4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1bd8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1bdc:	8a ed       	ldi	r24, 0xDA	; 218
    1bde:	80 83       	st	Z, r24
    1be0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1be4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1be8:	82 e1       	ldi	r24, 0x12	; 18
    1bea:	80 83       	st	Z, r24
    1bec:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1bf0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1bf4:	88 ec       	ldi	r24, 0xC8	; 200
    1bf6:	80 83       	st	Z, r24
    1bf8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1bfc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c00:	88 ea       	ldi	r24, 0xA8	; 168
    1c02:	80 83       	st	Z, r24
    1c04:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c08:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c0c:	8f e3       	ldi	r24, 0x3F	; 63
    1c0e:	80 83       	st	Z, r24
    1c10:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c14:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c18:	85 ed       	ldi	r24, 0xD5	; 213
    1c1a:	80 83       	st	Z, r24
    1c1c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c20:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c24:	80 e8       	ldi	r24, 0x80	; 128
    1c26:	80 83       	st	Z, r24
    1c28:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c2c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c30:	81 e8       	ldi	r24, 0x81	; 129
    1c32:	80 83       	st	Z, r24
    1c34:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c38:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c3c:	80 e5       	ldi	r24, 0x50	; 80
    1c3e:	80 83       	st	Z, r24
    1c40:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c44:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c48:	89 ed       	ldi	r24, 0xD9	; 217
    1c4a:	80 83       	st	Z, r24
    1c4c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c50:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c54:	81 e2       	ldi	r24, 0x21	; 33
    1c56:	80 83       	st	Z, r24
    1c58:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c5c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c60:	80 e2       	ldi	r24, 0x20	; 32
    1c62:	80 83       	st	Z, r24
    1c64:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c68:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	80 83       	st	Z, r24
    1c70:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c74:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c78:	8b ed       	ldi	r24, 0xDB	; 219
    1c7a:	80 83       	st	Z, r24
    1c7c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c80:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c84:	80 e3       	ldi	r24, 0x30	; 48
    1c86:	80 83       	st	Z, r24
    1c88:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c8c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c90:	8d ea       	ldi	r24, 0xAD	; 173
    1c92:	80 83       	st	Z, r24
    1c94:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1c98:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1c9c:	10 82       	st	Z, r1
    1c9e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1ca2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1ca6:	84 ea       	ldi	r24, 0xA4	; 164
    1ca8:	80 83       	st	Z, r24
    1caa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1cae:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1cb2:	86 ea       	ldi	r24, 0xA6	; 166
    1cb4:	80 83       	st	Z, r24
    1cb6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ext_oled_command>
    1cba:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ext_oled_command+0x1>
    1cbe:	8f ea       	ldi	r24, 0xAF	; 175
    1cc0:	80 83       	st	Z, r24
	      oled_wrc(0xad);        //master configuration
	      oled_wrc(0x00);
	      oled_wrc(0xa4);        //out follows RAM content
	      oled_wrc(0xa6);        //set normal display
	      oled_wrc(0xaf);        // display on
		  oled_clear_screen();
    1cc2:	0e 94 35 0b 	call	0x166a	; 0x166a <oled_clear_screen>
		  oled_goto_pos(0,0);
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	0e 94 16 0b 	call	0x162c	; 0x162c <oled_goto_pos>
    1cce:	08 95       	ret

00001cd0 <oled_print_screen_progmem>:

	
}

void oled_print_screen_progmem(int screenoffset){
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	60 97       	sbiw	r28, 0x10	; 16
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	9c 01       	movw	r18, r24
    1cf0:	2a 5e       	subi	r18, 0xEA	; 234
    1cf2:	35 4f       	sbci	r19, 0xF5	; 245
    1cf4:	79 01       	movw	r14, r18
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
    1cf6:	10 e0       	ldi	r17, 0x00	; 0
		oled_goto_page(i);
    1cf8:	81 2f       	mov	r24, r17
    1cfa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i]+screenoffset));
    1cfe:	f7 01       	movw	r30, r14
    1d00:	65 91       	lpm	r22, Z+
    1d02:	74 91       	lpm	r23, Z
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcpy_P>
		oled_center_print(buffer,8);
    1d0c:	68 e0       	ldi	r22, 0x08	; 8
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	0e 94 57 0c 	call	0x18ae	; 0x18ae <oled_center_print>
	
}

void oled_print_screen_progmem(int screenoffset){
	char buffer[16];
	for(unsigned char i=0; i<8; i++){
    1d18:	1f 5f       	subi	r17, 0xFF	; 255
    1d1a:	32 e0       	ldi	r19, 0x02	; 2
    1d1c:	e3 0e       	add	r14, r19
    1d1e:	f1 1c       	adc	r15, r1
    1d20:	18 30       	cpi	r17, 0x08	; 8
    1d22:	51 f7       	brne	.-44     	; 0x1cf8 <oled_print_screen_progmem+0x28>
		oled_goto_page(i);
		strcpy_P(buffer,(PGM_P)pgm_read_word(&table[i]+screenoffset));
		oled_center_print(buffer,8);
	}
}
    1d24:	60 96       	adiw	r28, 0x10	; 16
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	ff 90       	pop	r15
    1d38:	ef 90       	pop	r14
    1d3a:	08 95       	ret

00001d3c <oled_print_page_progmem>:

void oled_print_page_progmem(int screenoffset, int pageOffset){
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	60 97       	sbiw	r28, 0x10	; 16
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	8c 01       	movw	r16, r24
    1d5a:	7b 01       	movw	r14, r22
	char buffer[16];
	oled_goto_page(pageOffset);
    1d5c:	86 2f       	mov	r24, r22
    1d5e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
	strcpy_P(buffer,(PGM_P)pgm_read_word(&table[screenoffset+pageOffset]));
    1d62:	f7 01       	movw	r30, r14
    1d64:	e0 0f       	add	r30, r16
    1d66:	f1 1f       	adc	r31, r17
    1d68:	ee 0f       	add	r30, r30
    1d6a:	ff 1f       	adc	r31, r31
    1d6c:	ea 5e       	subi	r30, 0xEA	; 234
    1d6e:	f5 4f       	sbci	r31, 0xF5	; 245
    1d70:	65 91       	lpm	r22, Z+
    1d72:	74 91       	lpm	r23, Z
    1d74:	ce 01       	movw	r24, r28
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	0e 94 76 13 	call	0x26ec	; 0x26ec <strcpy_P>
	oled_center_print(buffer,8);
    1d7c:	68 e0       	ldi	r22, 0x08	; 8
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	ce 01       	movw	r24, r28
    1d82:	01 96       	adiw	r24, 0x01	; 1
    1d84:	0e 94 57 0c 	call	0x18ae	; 0x18ae <oled_center_print>
}
    1d88:	60 96       	adiw	r28, 0x10	; 16
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	08 95       	ret

00001da2 <oled_print_time_used>:

void oled_print_time_used(void){
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
	int mseconds;
	int digit3char;
	int digit2char;
	int digit1char;
	int mdigitchar;
	seconds = timer_get_seconds();
    1da8:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <timer_get_seconds>
    1dac:	ec 01       	movw	r28, r24
	mseconds = timer_get_mseconds();
    1dae:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <timer_get_mseconds>
    1db2:	18 2f       	mov	r17, r24
	digit3char = digit3+'0';
	digit2char = digit2+'0';
	digit1char = digit1+'0';
	mdigitchar = mdigit+'0';
	
	oled_goto_page(4);
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <oled_goto_page>
	oled_goto_col(63-(5*(8/2)));
    1dba:	8b e2       	ldi	r24, 0x2B	; 43
    1dbc:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <oled_goto_col>
	oled_write_char(digit3char,8);
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	64 e6       	ldi	r22, 0x64	; 100
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
    1dca:	86 2f       	mov	r24, r22
    1dcc:	68 e0       	ldi	r22, 0x08	; 8
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	80 5d       	subi	r24, 0xD0	; 208
    1dd2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
	oled_write_char(digit2char,8);
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	6a e0       	ldi	r22, 0x0A	; 10
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
    1de0:	96 2f       	mov	r25, r22
    1de2:	c8 2f       	mov	r28, r24
    1de4:	68 e0       	ldi	r22, 0x08	; 8
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	80 e3       	ldi	r24, 0x30	; 48
    1dea:	89 0f       	add	r24, r25
    1dec:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
	oled_write_char(digit1char,8);
    1df0:	68 e0       	ldi	r22, 0x08	; 8
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	80 e3       	ldi	r24, 0x30	; 48
    1df6:	8c 0f       	add	r24, r28
    1df8:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
	oled_write_char(44,8); //44=","
    1dfc:	68 e0       	ldi	r22, 0x08	; 8
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	8c e2       	ldi	r24, 0x2C	; 44
    1e02:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
	oled_write_char(mdigitchar,8);
    1e06:	68 e0       	ldi	r22, 0x08	; 8
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	80 e3       	ldi	r24, 0x30	; 48
    1e0c:	81 0f       	add	r24, r17
    1e0e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <oled_write_char>
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	08 95       	ret

00001e1a <slider_getPosition>:
#include <avr/io.h>
#include "util.h"
#include <util/delay.h>


slider_position slider_getPosition(void){
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
	slider_position position;
	uint8_t midpoint=127;
	uint8_t l = adc_read(2);
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <adc_read>
    1e28:	ec 01       	movw	r28, r24
	uint8_t r = adc_read(3);
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <adc_read>
    1e32:	9c 01       	movw	r18, r24
    1e34:	48 2f       	mov	r20, r24

	if(l > midpoint){
    1e36:	c0 38       	cpi	r28, 0x80	; 128
    1e38:	78 f0       	brcs	.+30     	; 0x1e58 <slider_getPosition+0x3e>
		position.l_pos = (int8_t)100*(l-midpoint)/midpoint;
    1e3a:	dd 27       	eor	r29, r29
    1e3c:	cf 57       	subi	r28, 0x7F	; 127
    1e3e:	d1 09       	sbc	r29, r1
    1e40:	54 e6       	ldi	r21, 0x64	; 100
    1e42:	5c 9f       	mul	r21, r28
    1e44:	c0 01       	movw	r24, r0
    1e46:	5d 9f       	mul	r21, r29
    1e48:	90 0d       	add	r25, r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	6f e7       	ldi	r22, 0x7F	; 127
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
    1e54:	fb 01       	movw	r30, r22
    1e56:	13 c0       	rjmp	.+38     	; 0x1e7e <slider_getPosition+0x64>
	}
	else if (l < midpoint){
    1e58:	cf 37       	cpi	r28, 0x7F	; 127
    1e5a:	78 f4       	brcc	.+30     	; 0x1e7a <slider_getPosition+0x60>
		position.l_pos = 100*(l-midpoint)/midpoint;
    1e5c:	dd 27       	eor	r29, r29
    1e5e:	cf 57       	subi	r28, 0x7F	; 127
    1e60:	d1 09       	sbc	r29, r1
    1e62:	54 e6       	ldi	r21, 0x64	; 100
    1e64:	5c 9f       	mul	r21, r28
    1e66:	c0 01       	movw	r24, r0
    1e68:	5d 9f       	mul	r21, r29
    1e6a:	90 0d       	add	r25, r0
    1e6c:	11 24       	eor	r1, r1
    1e6e:	6f e7       	ldi	r22, 0x7F	; 127
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
    1e76:	fb 01       	movw	r30, r22
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <slider_getPosition+0x64>
	}
	else {
		position.l_pos = 0;
    1e7a:	e0 e0       	ldi	r30, 0x00	; 0
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
	}

	if(r > midpoint){
    1e7e:	40 38       	cpi	r20, 0x80	; 128
    1e80:	78 f0       	brcs	.+30     	; 0x1ea0 <slider_getPosition+0x86>
		position.r_pos = 100*(r-midpoint)/midpoint;
    1e82:	33 27       	eor	r19, r19
    1e84:	2f 57       	subi	r18, 0x7F	; 127
    1e86:	31 09       	sbc	r19, r1
    1e88:	44 e6       	ldi	r20, 0x64	; 100
    1e8a:	42 9f       	mul	r20, r18
    1e8c:	c0 01       	movw	r24, r0
    1e8e:	43 9f       	mul	r20, r19
    1e90:	90 0d       	add	r25, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	6f e7       	ldi	r22, 0x7F	; 127
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
    1e9c:	9b 01       	movw	r18, r22
    1e9e:	13 c0       	rjmp	.+38     	; 0x1ec6 <slider_getPosition+0xac>
	}
	else if (r < midpoint){
    1ea0:	4f 37       	cpi	r20, 0x7F	; 127
    1ea2:	78 f4       	brcc	.+30     	; 0x1ec2 <slider_getPosition+0xa8>
		position.r_pos = 100*(r-midpoint)/midpoint;
    1ea4:	33 27       	eor	r19, r19
    1ea6:	2f 57       	subi	r18, 0x7F	; 127
    1ea8:	31 09       	sbc	r19, r1
    1eaa:	44 e6       	ldi	r20, 0x64	; 100
    1eac:	42 9f       	mul	r20, r18
    1eae:	c0 01       	movw	r24, r0
    1eb0:	43 9f       	mul	r20, r19
    1eb2:	90 0d       	add	r25, r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	6f e7       	ldi	r22, 0x7F	; 127
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <slider_getPosition+0xac>
	}
	else {
		position.r_pos = 0;
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	return position;
    1ec6:	bf 01       	movw	r22, r30
    1ec8:	c9 01       	movw	r24, r18
}
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	08 95       	ret

00001ed2 <slider_sendPositionButtonCan>:


void slider_sendPositionButtonCan(slider_position pos){
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	2b 97       	sbiw	r28, 0x0b	; 11
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	msg.id=1;
    1ee6:	21 e0       	ldi	r18, 0x01	; 1
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	3a 83       	std	Y+2, r19	; 0x02
    1eec:	29 83       	std	Y+1, r18	; 0x01
	msg.length=3;
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	9b 83       	std	Y+3, r25	; 0x03
	//slider_pos
	msg.data[0] = (char)pos.l_pos;
    1ef2:	6c 83       	std	Y+4, r22	; 0x04
	msg.data[1] = (char)pos.r_pos;
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
	
	//button
	msg.data[2]=(char)(PINB & (1<<0));
    1ef6:	86 b3       	in	r24, 0x16	; 22
    1ef8:	81 70       	andi	r24, 0x01	; 1
    1efa:	8e 83       	std	Y+6, r24	; 0x06

	can_send_message(&msg);
    1efc:	ce 01       	movw	r24, r28
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	0e 94 95 06 	call	0xd2a	; 0xd2a <can_send_message>

    1f04:	2b 96       	adiw	r28, 0x0b	; 11
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	08 95       	ret

00001f16 <spi_init>:
#include <stdint.h>


void spi_init(void){
	/* Set MOSI, SCK , Slave select output, all others become input*/
	DDRB = (1<<DDB5)|(1<<DDB7)|(1<<DDB4);
    1f16:	80 eb       	ldi	r24, 0xB0	; 176
    1f18:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1f1a:	81 e5       	ldi	r24, 0x51	; 81
    1f1c:	8d b9       	out	0x0d, r24	; 13
	
	//Set slave select
	PORTB |= 1<<PB4;
    1f1e:	c4 9a       	sbi	0x18, 4	; 24
	
	//button pull up
	PORTB |= 1<<PB2;
    1f20:	c2 9a       	sbi	0x18, 2	; 24
    1f22:	08 95       	ret

00001f24 <spi_send>:
	
}

void spi_send(uint8_t cData){
	/* Start transmission */
	SPDR = cData;
    1f24:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
    1f26:	77 9b       	sbis	0x0e, 7	; 14
    1f28:	fe cf       	rjmp	.-4      	; 0x1f26 <spi_send+0x2>
}
    1f2a:	08 95       	ret

00001f2c <spi_read>:
uint8_t spi_read(){
	
	char dummyByte = 0x45; //0b01000101
	
	/* Start transmission of dummy byte such that Output from slave arrives at SPDR*/
	SPDR = dummyByte;
    1f2c:	85 e4       	ldi	r24, 0x45	; 69
    1f2e:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
    1f30:	77 9b       	sbis	0x0e, 7	; 14
    1f32:	fe cf       	rjmp	.-4      	; 0x1f30 <spi_read+0x4>
	
	/*Return data register*/
	return SPDR;
    1f34:	8f b1       	in	r24, 0x0f	; 15
    1f36:	08 95       	ret

00001f38 <timer_init>:
static int mseconds = 0;
static uint8_t control;

void timer_init(void){
	
	cli();
    1f38:	f8 94       	cli
	counter = 0;
    1f3a:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <counter+0x1>
    1f3e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <counter>
	seconds = 0;
    1f42:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <seconds+0x1>
    1f46:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <seconds>
	mseconds = 0;
    1f4a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <mseconds+0x1>
    1f4e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <mseconds>
	TCCR0 |= (1<<CS02);
    1f52:	83 b7       	in	r24, 0x33	; 51
    1f54:	84 60       	ori	r24, 0x04	; 4
    1f56:	83 bf       	out	0x33, r24	; 51
	
	
	TCCR0 |= (1<<WGM01); //Set mode to 'Clear Timer on Compare'
    1f58:	83 b7       	in	r24, 0x33	; 51
    1f5a:	88 60       	ori	r24, 0x08	; 8
    1f5c:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1<<WGM00);
    1f5e:	83 b7       	in	r24, 0x33	; 51
    1f60:	8f 7b       	andi	r24, 0xBF	; 191
    1f62:	83 bf       	out	0x33, r24	; 51
	
	int8_t counterVal = 192; //set the number that counter stops and creates interrupt at.
	OCR0 |= counterVal;
    1f64:	81 b7       	in	r24, 0x31	; 49
    1f66:	80 6c       	ori	r24, 0xC0	; 192
    1f68:	81 bf       	out	0x31, r24	; 49

	TIMSK |= (1<< OCIE0); //Enable interrupt by Output Compare
    1f6a:	89 b7       	in	r24, 0x39	; 57
    1f6c:	81 60       	ori	r24, 0x01	; 1
    1f6e:	89 bf       	out	0x39, r24	; 57
	sei();
    1f70:	78 94       	sei
    1f72:	08 95       	ret

00001f74 <timer_get_seconds>:
}

int timer_get_seconds(void){
	return seconds;
}
    1f74:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <seconds>
    1f78:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <seconds+0x1>
    1f7c:	08 95       	ret

00001f7e <timer_get_mseconds>:

int timer_get_mseconds(void){
	return mseconds;
}
    1f7e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <mseconds>
    1f82:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <mseconds+0x1>
    1f86:	08 95       	ret

00001f88 <__vector_16>:

ISR(TIMER0_COMP_vect){
    1f88:	1f 92       	push	r1
    1f8a:	0f 92       	push	r0
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	0f 92       	push	r0
    1f90:	11 24       	eor	r1, r1
    1f92:	2f 93       	push	r18
    1f94:	3f 93       	push	r19
    1f96:	4f 93       	push	r20
    1f98:	5f 93       	push	r21
    1f9a:	6f 93       	push	r22
    1f9c:	7f 93       	push	r23
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
    1fa6:	ef 93       	push	r30
    1fa8:	ff 93       	push	r31
	
	counter++;
    1faa:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <counter>
    1fae:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <counter+0x1>
    1fb2:	2f 5f       	subi	r18, 0xFF	; 255
    1fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb6:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <counter+0x1>
    1fba:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <counter>
	if(counter%10 == 0){
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	6a e0       	ldi	r22, 0x0A	; 10
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
    1fc8:	89 2b       	or	r24, r25
    1fca:	a9 f5       	brne	.+106    	; 0x2036 <__vector_16+0xae>
		mseconds++;
    1fcc:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <mseconds>
    1fd0:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <mseconds+0x1>
    1fd4:	01 96       	adiw	r24, 0x01	; 1
    1fd6:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <mseconds+0x1>
    1fda:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <mseconds>
		
		if(counter%100 == 0){
    1fde:	c9 01       	movw	r24, r18
    1fe0:	64 e6       	ldi	r22, 0x64	; 100
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	0e 94 67 11 	call	0x22ce	; 0x22ce <__divmodhi4>
    1fe8:	89 2b       	or	r24, r25
    1fea:	69 f4       	brne	.+26     	; 0x2006 <__vector_16+0x7e>
			seconds++;
    1fec:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <seconds>
    1ff0:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <seconds+0x1>
    1ff4:	01 96       	adiw	r24, 0x01	; 1
    1ff6:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <seconds+0x1>
    1ffa:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <seconds>
			mseconds = 0;
    1ffe:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <mseconds+0x1>
    2002:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <mseconds>
		}
		printf("Time: %d,%d \n\r", seconds, mseconds);
    2006:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <mseconds+0x1>
    200a:	8f 93       	push	r24
    200c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <mseconds>
    2010:	8f 93       	push	r24
    2012:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <seconds+0x1>
    2016:	8f 93       	push	r24
    2018:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <seconds>
    201c:	8f 93       	push	r24
    201e:	89 e7       	ldi	r24, 0x79	; 121
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	9f 93       	push	r25
    2024:	8f 93       	push	r24
    2026:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <printf>
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
	}
}
    2036:	ff 91       	pop	r31
    2038:	ef 91       	pop	r30
    203a:	bf 91       	pop	r27
    203c:	af 91       	pop	r26
    203e:	9f 91       	pop	r25
    2040:	8f 91       	pop	r24
    2042:	7f 91       	pop	r23
    2044:	6f 91       	pop	r22
    2046:	5f 91       	pop	r21
    2048:	4f 91       	pop	r20
    204a:	3f 91       	pop	r19
    204c:	2f 91       	pop	r18
    204e:	0f 90       	pop	r0
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	0f 90       	pop	r0
    2054:	1f 90       	pop	r1
    2056:	18 95       	reti

00002058 <timer2_init>:

void timer2_init(void){
	cli();
    2058:	f8 94       	cli
	TCCR2 = 0;
    205a:	17 bc       	out	0x27, r1	; 39
	TCCR2 |= (1 << CS22) | (1 << CS21) | (1 << CS20); //Clock selection. MCK/1024 = 4,8 KHz
    205c:	87 b5       	in	r24, 0x27	; 39
    205e:	87 60       	ori	r24, 0x07	; 7
    2060:	87 bd       	out	0x27, r24	; 39
	
	int8_t counterVal = 255; //set the number that counter stops and creates interrupt at.
	OCR2 |= counterVal;
    2062:	82 b5       	in	r24, 0x22	; 34
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	82 bd       	out	0x22, r24	; 34
	
	TCCR2 |= (1 << WGM21); //Mode of operation: Clear Timer on Compare
    2068:	87 b5       	in	r24, 0x27	; 39
    206a:	88 60       	ori	r24, 0x08	; 8
    206c:	87 bd       	out	0x27, r24	; 39
	TCCR2 &= ~(1 << WGM20);
    206e:	87 b5       	in	r24, 0x27	; 39
    2070:	8f 7b       	andi	r24, 0xBF	; 191
    2072:	87 bd       	out	0x27, r24	; 39
	
	TIMSK |= (1 << OCIE2); //Enable interrupts on Output Compare event
    2074:	89 b7       	in	r24, 0x39	; 57
    2076:	80 61       	ori	r24, 0x10	; 16
    2078:	89 bf       	out	0x39, r24	; 57
	sei();
    207a:	78 94       	sei
    207c:	08 95       	ret

0000207e <timer2_stop>:
}

void timer2_stop(void){
	TCCR2 &= ~((1 << CS22) | (1 << CS21)); //Stop timer
    207e:	87 b5       	in	r24, 0x27	; 39
    2080:	89 7f       	andi	r24, 0xF9	; 249
    2082:	87 bd       	out	0x27, r24	; 39
	TCNT2 = 0;
    2084:	13 bc       	out	0x23, r1	; 35
	
	TIMSK &= ~(1 << OCIE2);
    2086:	89 b7       	in	r24, 0x39	; 57
    2088:	8f 7e       	andi	r24, 0xEF	; 239
    208a:	89 bf       	out	0x39, r24	; 57
    208c:	08 95       	ret

0000208e <timer2_start>:
}

void timer2_start(void){
	TCCR2 |= (1 << CS22) | (1 << CS21) | (1 << CS20); //Clock selection. MCK/1024 = 4,8 KHz
    208e:	87 b5       	in	r24, 0x27	; 39
    2090:	87 60       	ori	r24, 0x07	; 7
    2092:	87 bd       	out	0x27, r24	; 39
	TIMSK |= (1 << OCIE2);
    2094:	89 b7       	in	r24, 0x39	; 57
    2096:	80 61       	ori	r24, 0x10	; 16
    2098:	89 bf       	out	0x39, r24	; 57
    209a:	08 95       	ret

0000209c <timer2_set_ctrl>:
}

void timer2_set_ctrl(uint8_t ctrl){
	control = ctrl;
    209c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <control>
    20a0:	08 95       	ret

000020a2 <__vector_10>:
}

ISR(TIMER2_COMP_vect){
    20a2:	1f 92       	push	r1
    20a4:	0f 92       	push	r0
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	0f 92       	push	r0
    20aa:	11 24       	eor	r1, r1
    20ac:	2f 93       	push	r18
    20ae:	3f 93       	push	r19
    20b0:	4f 93       	push	r20
    20b2:	5f 93       	push	r21
    20b4:	6f 93       	push	r22
    20b6:	7f 93       	push	r23
    20b8:	8f 93       	push	r24
    20ba:	9f 93       	push	r25
    20bc:	af 93       	push	r26
    20be:	bf 93       	push	r27
    20c0:	ef 93       	push	r30
    20c2:	ff 93       	push	r31
	if(control){
    20c4:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <control>
    20c8:	88 23       	and	r24, r24
    20ca:	29 f0       	breq	.+10     	; 0x20d6 <__vector_10+0x34>
		slider_sendPositionButtonCan(slider_getPosition());
    20cc:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <slider_getPosition>
    20d0:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <slider_sendPositionButtonCan>
    20d4:	04 c0       	rjmp	.+8      	; 0x20de <__vector_10+0x3c>
		
	}
	else{
		joystick_sendPositionButtonCan(joystick_getPosition());
    20d6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <joystick_getPosition>
    20da:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <joystick_sendPositionButtonCan>
	}
    20de:	ff 91       	pop	r31
    20e0:	ef 91       	pop	r30
    20e2:	bf 91       	pop	r27
    20e4:	af 91       	pop	r26
    20e6:	9f 91       	pop	r25
    20e8:	8f 91       	pop	r24
    20ea:	7f 91       	pop	r23
    20ec:	6f 91       	pop	r22
    20ee:	5f 91       	pop	r21
    20f0:	4f 91       	pop	r20
    20f2:	3f 91       	pop	r19
    20f4:	2f 91       	pop	r18
    20f6:	0f 90       	pop	r0
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	0f 90       	pop	r0
    20fc:	1f 90       	pop	r1
    20fe:	18 95       	reti

00002100 <USART_Init>:
	USART_Transmit(data);
	return 0;
}

void USART_Init( unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr>>8);
    2100:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    2102:	89 b9       	out	0x09, r24	; 9
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2104:	88 e1       	ldi	r24, 0x18	; 24
    2106:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    2108:	8e e8       	ldi	r24, 0x8E	; 142
    210a:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_PUTCHAR,NULL);
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	81 e9       	ldi	r24, 0x91	; 145
    2112:	90 e1       	ldi	r25, 0x10	; 16
    2114:	0e 94 91 13 	call	0x2722	; 0x2722 <fdevopen>
    2118:	08 95       	ret

0000211a <USART_Transmit>:
}

void USART_Transmit( unsigned char data){
	
	while ( !( UCSR0A & (1<<UDRE0)));
    211a:	5d 9b       	sbis	0x0b, 5	; 11
    211c:	fe cf       	rjmp	.-4      	; 0x211a <USART_Transmit>
	UDR0 = data;
    211e:	8c b9       	out	0x0c, r24	; 12
    2120:	08 95       	ret

00002122 <USART_PUTCHAR>:
#include <avr/io.h>

#include "DRIVER_USART.h"

int USART_PUTCHAR(char data ,FILE* unused){
	USART_Transmit(data);
    2122:	0e 94 8d 10 	call	0x211a	; 0x211a <USART_Transmit>
	return 0;
}
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	08 95       	ret

0000212c <xmem_init>:
#include <avr/io.h>
#include "DRIVER_XMEM.h"


void xmem_init(void){
	MCUCR |= (1 << SRE); //enable XMEM
    212c:	85 b7       	in	r24, 0x35	; 53
    212e:	80 68       	ori	r24, 0x80	; 128
    2130:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2); //Mask unused bits/pins, which is PC4-PC7
    2132:	80 b7       	in	r24, 0x30	; 48
    2134:	80 62       	ori	r24, 0x20	; 32
    2136:	80 bf       	out	0x30, r24	; 48
    2138:	08 95       	ret

0000213a <xmem_write>:
}

void xmem_write(uint8_t data, uint16_t addr){
	volatile char *ext_mem = (char *) 0x1000;
	ext_mem[addr] = data;
    213a:	fb 01       	movw	r30, r22
    213c:	f0 5f       	subi	r31, 0xF0	; 240
    213e:	80 83       	st	Z, r24
    2140:	08 95       	ret

00002142 <xmem_read>:
}

uint8_t xmem_read(uint16_t addr){
	volatile char *ext_mem = (char *) 0x1000;
	uint8_t ret_val = ext_mem[addr];
    2142:	90 5f       	subi	r25, 0xF0	; 240
    2144:	fc 01       	movw	r30, r24
    2146:	80 81       	ld	r24, Z
	return ret_val;
}
    2148:	08 95       	ret

0000214a <mcp_read>:
	uint8_t status = spi_read();
	
	PORTB |= (1<<PB4);
	
	return status;
}
    214a:	cf 93       	push	r28
    214c:	c8 2f       	mov	r28, r24
    214e:	c4 98       	cbi	0x18, 4	; 24
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
    2156:	8c 2f       	mov	r24, r28
    2158:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
    215c:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <spi_read>
    2160:	c4 9a       	sbi	0x18, 4	; 24
    2162:	cf 91       	pop	r28
    2164:	08 95       	ret

00002166 <mcp_write>:
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	d8 2f       	mov	r29, r24
    216c:	c6 2f       	mov	r28, r22
    216e:	c4 98       	cbi	0x18, 4	; 24
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
    2176:	8d 2f       	mov	r24, r29
    2178:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
    217c:	8c 2f       	mov	r24, r28
    217e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
    2182:	c4 9a       	sbi	0x18, 4	; 24
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <mcp_req_to_send>:
    218a:	c4 98       	cbi	0x18, 4	; 24
    218c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
    2190:	c4 9a       	sbi	0x18, 4	; 24
    2192:	08 95       	ret

00002194 <mcp_bit_modify>:


void mcp_bit_modify(uint8_t addr, uint8_t mask, uint8_t data){
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	18 2f       	mov	r17, r24
    219c:	d6 2f       	mov	r29, r22
    219e:	c4 2f       	mov	r28, r20
	
	PORTB &= ~(1<<PB4);
    21a0:	c4 98       	cbi	0x18, 4	; 24
	
	spi_send(MCP_BITMOD);
    21a2:	85 e0       	ldi	r24, 0x05	; 5
    21a4:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
	spi_send(addr);			
    21a8:	81 2f       	mov	r24, r17
    21aa:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
	spi_send(mask);			
    21ae:	8d 2f       	mov	r24, r29
    21b0:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
	spi_send(data);
    21b4:	8c 2f       	mov	r24, r28
    21b6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
	
	PORTB |= (1<<PB4);
    21ba:	c4 9a       	sbi	0x18, 4	; 24
	
}
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	08 95       	ret

000021c4 <mcp_reset>:


void mcp_reset(void){
	
	PORTB &= ~(1<<PB4);
    21c4:	c4 98       	cbi	0x18, 4	; 24
	
	spi_send(MCP_RESET); 
    21c6:	80 ec       	ldi	r24, 0xC0	; 192
    21c8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <spi_send>
	
	PORTB |= (1<<PB4);
    21cc:	c4 9a       	sbi	0x18, 4	; 24
    21ce:	8f e3       	ldi	r24, 0x3F	; 63
    21d0:	9c e9       	ldi	r25, 0x9C	; 156
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <mcp_reset+0xe>
    21d6:	00 c0       	rjmp	.+0      	; 0x21d8 <mcp_reset+0x14>
    21d8:	00 00       	nop
    21da:	08 95       	ret

000021dc <mcp_init>:
}

void mcp_init(){
	
	uint8_t value;
	spi_init();
    21dc:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <spi_init>
	mcp_reset();
    21e0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <mcp_reset>
    21e4:	8f e3       	ldi	r24, 0x3F	; 63
    21e6:	9f e1       	ldi	r25, 0x1F	; 31
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <mcp_init+0xc>
    21ec:	00 c0       	rjmp	.+0      	; 0x21ee <mcp_init+0x12>
    21ee:	00 00       	nop
	_delay_ms(2); 
	
	value = mcp_read(MCP_CANSTAT);
    21f0:	8e e0       	ldi	r24, 0x0E	; 14
    21f2:	0e 94 a5 10 	call	0x214a	; 0x214a <mcp_read>
	
 	if ((value & MODE_MASK) != MODE_CONFIG){
    21f6:	98 2f       	mov	r25, r24
    21f8:	90 7e       	andi	r25, 0xE0	; 224
    21fa:	90 38       	cpi	r25, 0x80	; 128
    21fc:	61 f0       	breq	.+24     	; 0x2216 <mcp_init+0x3a>
 		printf("Not in config mode after reset! value: %x \n\r", value);
    21fe:	1f 92       	push	r1
    2200:	8f 93       	push	r24
    2202:	88 e8       	ldi	r24, 0x88	; 136
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	9f 93       	push	r25
    2208:	8f 93       	push	r24
    220a:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <printf>
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	08 95       	ret

00002218 <main>:
#define MYUBRR FOSC/16/BAUD-1 //UART Baud Rate Register


int main(void){
	
	USART_Init(MYUBRR);
    2218:	8f e1       	ldi	r24, 0x1F	; 31
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	0e 94 80 10 	call	0x2100	; 0x2100 <USART_Init>
	xmem_init();
    2220:	0e 94 96 10 	call	0x212c	; 0x212c <xmem_init>
	oled_init();
    2224:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <oled_init>
	menu_init();
    2228:	0e 94 97 09 	call	0x132e	; 0x132e <menu_init>
	adc_init();
    222c:	0e 94 57 06 	call	0xcae	; 0xcae <adc_init>
	joystick_calibrate();
    2230:	0e 94 ee 06 	call	0xddc	; 0xddc <joystick_calibrate>
	can_init();
    2234:	0e 94 73 06 	call	0xce6	; 0xce6 <can_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2238:	85 e0       	ldi	r24, 0x05	; 5
    223a:	8a 95       	dec	r24
    223c:	f1 f7       	brne	.-4      	; 0x223a <main+0x22>
    223e:	00 00       	nop
	
	
	while(1){
		_delay_us(1);
		navigate();
    2240:	0e 94 02 0a 	call	0x1404	; 0x1404 <navigate>
    2244:	f9 cf       	rjmp	.-14     	; 0x2238 <main+0x20>

00002246 <util_sort>:
	t=*p;
	*p=*q;
	*q=t;
}

void util_sort(int a[],int n) {
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
	int i,j,temp;

	for(i = 0;i < n-1;i++) {
    224a:	eb 01       	movw	r28, r22
    224c:	21 97       	sbiw	r28, 0x01	; 1
    224e:	1c 16       	cp	r1, r28
    2250:	1d 06       	cpc	r1, r29
    2252:	14 f5       	brge	.+68     	; 0x2298 <util_sort+0x52>
    2254:	61 50       	subi	r22, 0x01	; 1
    2256:	70 48       	sbci	r23, 0x80	; 128
    2258:	66 0f       	add	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	68 0f       	add	r22, r24
    225e:	79 1f       	adc	r23, r25
    2260:	17 c0       	rjmp	.+46     	; 0x2290 <util_sort+0x4a>
		for(j = 0;j < n-i-1;j++) {
    2262:	fc 01       	movw	r30, r24
			if(a[j] > a[j+1])
    2264:	21 91       	ld	r18, Z+
    2266:	31 91       	ld	r19, Z+
    2268:	40 81       	ld	r20, Z
    226a:	51 81       	ldd	r21, Z+1	; 0x01
    226c:	42 17       	cp	r20, r18
    226e:	53 07       	cpc	r21, r19
    2270:	34 f4       	brge	.+12     	; 0x227e <util_sort+0x38>
#include "util.h"

void util_swap(int *p,int *q) {
	int t;
	t=*p;
	*p=*q;
    2272:	df 01       	movw	r26, r30
    2274:	12 97       	sbiw	r26, 0x02	; 2
    2276:	4d 93       	st	X+, r20
    2278:	5c 93       	st	X, r21
	*q=t;
    227a:	31 83       	std	Z+1, r19	; 0x01
    227c:	20 83       	st	Z, r18

void util_sort(int a[],int n) {
	int i,j,temp;

	for(i = 0;i < n-1;i++) {
		for(j = 0;j < n-i-1;j++) {
    227e:	e6 17       	cp	r30, r22
    2280:	f7 07       	cpc	r31, r23
    2282:	81 f7       	brne	.-32     	; 0x2264 <util_sort+0x1e>
    2284:	21 97       	sbiw	r28, 0x01	; 1
    2286:	62 50       	subi	r22, 0x02	; 2
    2288:	71 09       	sbc	r23, r1
}

void util_sort(int a[],int n) {
	int i,j,temp;

	for(i = 0;i < n-1;i++) {
    228a:	68 17       	cp	r22, r24
    228c:	79 07       	cpc	r23, r25
    228e:	21 f0       	breq	.+8      	; 0x2298 <util_sort+0x52>
		for(j = 0;j < n-i-1;j++) {
    2290:	1c 16       	cp	r1, r28
    2292:	1d 06       	cpc	r1, r29
    2294:	34 f3       	brlt	.-52     	; 0x2262 <util_sort+0x1c>
    2296:	f6 cf       	rjmp	.-20     	; 0x2284 <util_sort+0x3e>
			if(a[j] > a[j+1])
			util_swap(&a[j],&a[j+1]);
		}
	}
}
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	08 95       	ret

0000229e <util_median>:
int util_median(int a[], int n){
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	8c 01       	movw	r16, r24
    22a8:	eb 01       	movw	r28, r22
	util_sort(a,n);
    22aa:	0e 94 23 11 	call	0x2246	; 0x2246 <util_sort>
	n=((n+1)/2)-1;
    22ae:	21 96       	adiw	r28, 0x01	; 1
    22b0:	ce 01       	movw	r24, r28
    22b2:	0a f4       	brpl	.+2      	; 0x22b6 <util_median+0x18>
    22b4:	01 96       	adiw	r24, 0x01	; 1
	return a[n];
    22b6:	fc 01       	movw	r30, r24
    22b8:	ee 7f       	andi	r30, 0xFE	; 254
    22ba:	32 97       	sbiw	r30, 0x02	; 2
    22bc:	e0 0f       	add	r30, r16
    22be:	f1 1f       	adc	r31, r17
    22c0:	80 81       	ld	r24, Z
    22c2:	91 81       	ldd	r25, Z+1	; 0x01
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	08 95       	ret

000022ce <__divmodhi4>:
    22ce:	97 fb       	bst	r25, 7
    22d0:	07 2e       	mov	r0, r23
    22d2:	16 f4       	brtc	.+4      	; 0x22d8 <__divmodhi4+0xa>
    22d4:	00 94       	com	r0
    22d6:	07 d0       	rcall	.+14     	; 0x22e6 <__divmodhi4_neg1>
    22d8:	77 fd       	sbrc	r23, 7
    22da:	09 d0       	rcall	.+18     	; 0x22ee <__divmodhi4_neg2>
    22dc:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__udivmodhi4>
    22e0:	07 fc       	sbrc	r0, 7
    22e2:	05 d0       	rcall	.+10     	; 0x22ee <__divmodhi4_neg2>
    22e4:	3e f4       	brtc	.+14     	; 0x22f4 <__divmodhi4_exit>

000022e6 <__divmodhi4_neg1>:
    22e6:	90 95       	com	r25
    22e8:	81 95       	neg	r24
    22ea:	9f 4f       	sbci	r25, 0xFF	; 255
    22ec:	08 95       	ret

000022ee <__divmodhi4_neg2>:
    22ee:	70 95       	com	r23
    22f0:	61 95       	neg	r22
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255

000022f4 <__divmodhi4_exit>:
    22f4:	08 95       	ret

000022f6 <__udivmodhi4>:
    22f6:	aa 1b       	sub	r26, r26
    22f8:	bb 1b       	sub	r27, r27
    22fa:	51 e1       	ldi	r21, 0x11	; 17
    22fc:	07 c0       	rjmp	.+14     	; 0x230c <__udivmodhi4_ep>

000022fe <__udivmodhi4_loop>:
    22fe:	aa 1f       	adc	r26, r26
    2300:	bb 1f       	adc	r27, r27
    2302:	a6 17       	cp	r26, r22
    2304:	b7 07       	cpc	r27, r23
    2306:	10 f0       	brcs	.+4      	; 0x230c <__udivmodhi4_ep>
    2308:	a6 1b       	sub	r26, r22
    230a:	b7 0b       	sbc	r27, r23

0000230c <__udivmodhi4_ep>:
    230c:	88 1f       	adc	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	5a 95       	dec	r21
    2312:	a9 f7       	brne	.-22     	; 0x22fe <__udivmodhi4_loop>
    2314:	80 95       	com	r24
    2316:	90 95       	com	r25
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	08 95       	ret

0000231e <malloc>:
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	82 30       	cpi	r24, 0x02	; 2
    2328:	91 05       	cpc	r25, r1
    232a:	10 f4       	brcc	.+4      	; 0x2330 <malloc+0x12>
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <__flp>
    2334:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <__flp+0x1>
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	a0 e0       	ldi	r26, 0x00	; 0
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	30 97       	sbiw	r30, 0x00	; 0
    2342:	19 f1       	breq	.+70     	; 0x238a <malloc+0x6c>
    2344:	40 81       	ld	r20, Z
    2346:	51 81       	ldd	r21, Z+1	; 0x01
    2348:	02 81       	ldd	r16, Z+2	; 0x02
    234a:	13 81       	ldd	r17, Z+3	; 0x03
    234c:	48 17       	cp	r20, r24
    234e:	59 07       	cpc	r21, r25
    2350:	c8 f0       	brcs	.+50     	; 0x2384 <malloc+0x66>
    2352:	84 17       	cp	r24, r20
    2354:	95 07       	cpc	r25, r21
    2356:	69 f4       	brne	.+26     	; 0x2372 <malloc+0x54>
    2358:	10 97       	sbiw	r26, 0x00	; 0
    235a:	31 f0       	breq	.+12     	; 0x2368 <malloc+0x4a>
    235c:	12 96       	adiw	r26, 0x02	; 2
    235e:	0c 93       	st	X, r16
    2360:	12 97       	sbiw	r26, 0x02	; 2
    2362:	13 96       	adiw	r26, 0x03	; 3
    2364:	1c 93       	st	X, r17
    2366:	27 c0       	rjmp	.+78     	; 0x23b6 <malloc+0x98>
    2368:	00 93 cc 01 	sts	0x01CC, r16	; 0x8001cc <__flp>
    236c:	10 93 cd 01 	sts	0x01CD, r17	; 0x8001cd <__flp+0x1>
    2370:	22 c0       	rjmp	.+68     	; 0x23b6 <malloc+0x98>
    2372:	21 15       	cp	r18, r1
    2374:	31 05       	cpc	r19, r1
    2376:	19 f0       	breq	.+6      	; 0x237e <malloc+0x60>
    2378:	42 17       	cp	r20, r18
    237a:	53 07       	cpc	r21, r19
    237c:	18 f4       	brcc	.+6      	; 0x2384 <malloc+0x66>
    237e:	9a 01       	movw	r18, r20
    2380:	bd 01       	movw	r22, r26
    2382:	ef 01       	movw	r28, r30
    2384:	df 01       	movw	r26, r30
    2386:	f8 01       	movw	r30, r16
    2388:	db cf       	rjmp	.-74     	; 0x2340 <malloc+0x22>
    238a:	21 15       	cp	r18, r1
    238c:	31 05       	cpc	r19, r1
    238e:	f9 f0       	breq	.+62     	; 0x23ce <malloc+0xb0>
    2390:	28 1b       	sub	r18, r24
    2392:	39 0b       	sbc	r19, r25
    2394:	24 30       	cpi	r18, 0x04	; 4
    2396:	31 05       	cpc	r19, r1
    2398:	80 f4       	brcc	.+32     	; 0x23ba <malloc+0x9c>
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	9b 81       	ldd	r25, Y+3	; 0x03
    239e:	61 15       	cp	r22, r1
    23a0:	71 05       	cpc	r23, r1
    23a2:	21 f0       	breq	.+8      	; 0x23ac <malloc+0x8e>
    23a4:	fb 01       	movw	r30, r22
    23a6:	93 83       	std	Z+3, r25	; 0x03
    23a8:	82 83       	std	Z+2, r24	; 0x02
    23aa:	04 c0       	rjmp	.+8      	; 0x23b4 <malloc+0x96>
    23ac:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <__flp+0x1>
    23b0:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__flp>
    23b4:	fe 01       	movw	r30, r28
    23b6:	32 96       	adiw	r30, 0x02	; 2
    23b8:	44 c0       	rjmp	.+136    	; 0x2442 <malloc+0x124>
    23ba:	fe 01       	movw	r30, r28
    23bc:	e2 0f       	add	r30, r18
    23be:	f3 1f       	adc	r31, r19
    23c0:	81 93       	st	Z+, r24
    23c2:	91 93       	st	Z+, r25
    23c4:	22 50       	subi	r18, 0x02	; 2
    23c6:	31 09       	sbc	r19, r1
    23c8:	39 83       	std	Y+1, r19	; 0x01
    23ca:	28 83       	st	Y, r18
    23cc:	3a c0       	rjmp	.+116    	; 0x2442 <malloc+0x124>
    23ce:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__brkval>
    23d2:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__brkval+0x1>
    23d6:	23 2b       	or	r18, r19
    23d8:	41 f4       	brne	.+16     	; 0x23ea <malloc+0xcc>
    23da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    23de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    23e2:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__brkval+0x1>
    23e6:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__brkval>
    23ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    23ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    23f2:	21 15       	cp	r18, r1
    23f4:	31 05       	cpc	r19, r1
    23f6:	41 f4       	brne	.+16     	; 0x2408 <malloc+0xea>
    23f8:	2d b7       	in	r18, 0x3d	; 61
    23fa:	3e b7       	in	r19, 0x3e	; 62
    23fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2400:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2404:	24 1b       	sub	r18, r20
    2406:	35 0b       	sbc	r19, r21
    2408:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <__brkval>
    240c:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <__brkval+0x1>
    2410:	e2 17       	cp	r30, r18
    2412:	f3 07       	cpc	r31, r19
    2414:	a0 f4       	brcc	.+40     	; 0x243e <malloc+0x120>
    2416:	2e 1b       	sub	r18, r30
    2418:	3f 0b       	sbc	r19, r31
    241a:	28 17       	cp	r18, r24
    241c:	39 07       	cpc	r19, r25
    241e:	78 f0       	brcs	.+30     	; 0x243e <malloc+0x120>
    2420:	ac 01       	movw	r20, r24
    2422:	4e 5f       	subi	r20, 0xFE	; 254
    2424:	5f 4f       	sbci	r21, 0xFF	; 255
    2426:	24 17       	cp	r18, r20
    2428:	35 07       	cpc	r19, r21
    242a:	48 f0       	brcs	.+18     	; 0x243e <malloc+0x120>
    242c:	4e 0f       	add	r20, r30
    242e:	5f 1f       	adc	r21, r31
    2430:	50 93 cb 01 	sts	0x01CB, r21	; 0x8001cb <__brkval+0x1>
    2434:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__brkval>
    2438:	81 93       	st	Z+, r24
    243a:	91 93       	st	Z+, r25
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <malloc+0x124>
    243e:	e0 e0       	ldi	r30, 0x00	; 0
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	cf 01       	movw	r24, r30
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	08 95       	ret

0000244e <free>:
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	09 f4       	brne	.+2      	; 0x2458 <free+0xa>
    2456:	81 c0       	rjmp	.+258    	; 0x255a <free+0x10c>
    2458:	fc 01       	movw	r30, r24
    245a:	32 97       	sbiw	r30, 0x02	; 2
    245c:	13 82       	std	Z+3, r1	; 0x03
    245e:	12 82       	std	Z+2, r1	; 0x02
    2460:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <__flp>
    2464:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <__flp+0x1>
    2468:	10 97       	sbiw	r26, 0x00	; 0
    246a:	81 f4       	brne	.+32     	; 0x248c <free+0x3e>
    246c:	20 81       	ld	r18, Z
    246e:	31 81       	ldd	r19, Z+1	; 0x01
    2470:	82 0f       	add	r24, r18
    2472:	93 1f       	adc	r25, r19
    2474:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__brkval>
    2478:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__brkval+0x1>
    247c:	28 17       	cp	r18, r24
    247e:	39 07       	cpc	r19, r25
    2480:	51 f5       	brne	.+84     	; 0x24d6 <free+0x88>
    2482:	f0 93 cb 01 	sts	0x01CB, r31	; 0x8001cb <__brkval+0x1>
    2486:	e0 93 ca 01 	sts	0x01CA, r30	; 0x8001ca <__brkval>
    248a:	67 c0       	rjmp	.+206    	; 0x255a <free+0x10c>
    248c:	ed 01       	movw	r28, r26
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	ce 17       	cp	r28, r30
    2494:	df 07       	cpc	r29, r31
    2496:	40 f4       	brcc	.+16     	; 0x24a8 <free+0x5a>
    2498:	4a 81       	ldd	r20, Y+2	; 0x02
    249a:	5b 81       	ldd	r21, Y+3	; 0x03
    249c:	9e 01       	movw	r18, r28
    249e:	41 15       	cp	r20, r1
    24a0:	51 05       	cpc	r21, r1
    24a2:	f1 f0       	breq	.+60     	; 0x24e0 <free+0x92>
    24a4:	ea 01       	movw	r28, r20
    24a6:	f5 cf       	rjmp	.-22     	; 0x2492 <free+0x44>
    24a8:	d3 83       	std	Z+3, r29	; 0x03
    24aa:	c2 83       	std	Z+2, r28	; 0x02
    24ac:	40 81       	ld	r20, Z
    24ae:	51 81       	ldd	r21, Z+1	; 0x01
    24b0:	84 0f       	add	r24, r20
    24b2:	95 1f       	adc	r25, r21
    24b4:	c8 17       	cp	r28, r24
    24b6:	d9 07       	cpc	r29, r25
    24b8:	59 f4       	brne	.+22     	; 0x24d0 <free+0x82>
    24ba:	88 81       	ld	r24, Y
    24bc:	99 81       	ldd	r25, Y+1	; 0x01
    24be:	84 0f       	add	r24, r20
    24c0:	95 1f       	adc	r25, r21
    24c2:	02 96       	adiw	r24, 0x02	; 2
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	9b 81       	ldd	r25, Y+3	; 0x03
    24cc:	93 83       	std	Z+3, r25	; 0x03
    24ce:	82 83       	std	Z+2, r24	; 0x02
    24d0:	21 15       	cp	r18, r1
    24d2:	31 05       	cpc	r19, r1
    24d4:	29 f4       	brne	.+10     	; 0x24e0 <free+0x92>
    24d6:	f0 93 cd 01 	sts	0x01CD, r31	; 0x8001cd <__flp+0x1>
    24da:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <__flp>
    24de:	3d c0       	rjmp	.+122    	; 0x255a <free+0x10c>
    24e0:	e9 01       	movw	r28, r18
    24e2:	fb 83       	std	Y+3, r31	; 0x03
    24e4:	ea 83       	std	Y+2, r30	; 0x02
    24e6:	49 91       	ld	r20, Y+
    24e8:	59 91       	ld	r21, Y+
    24ea:	c4 0f       	add	r28, r20
    24ec:	d5 1f       	adc	r29, r21
    24ee:	ec 17       	cp	r30, r28
    24f0:	fd 07       	cpc	r31, r29
    24f2:	61 f4       	brne	.+24     	; 0x250c <free+0xbe>
    24f4:	80 81       	ld	r24, Z
    24f6:	91 81       	ldd	r25, Z+1	; 0x01
    24f8:	84 0f       	add	r24, r20
    24fa:	95 1f       	adc	r25, r21
    24fc:	02 96       	adiw	r24, 0x02	; 2
    24fe:	e9 01       	movw	r28, r18
    2500:	99 83       	std	Y+1, r25	; 0x01
    2502:	88 83       	st	Y, r24
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	9b 83       	std	Y+3, r25	; 0x03
    250a:	8a 83       	std	Y+2, r24	; 0x02
    250c:	e0 e0       	ldi	r30, 0x00	; 0
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	12 96       	adiw	r26, 0x02	; 2
    2512:	8d 91       	ld	r24, X+
    2514:	9c 91       	ld	r25, X
    2516:	13 97       	sbiw	r26, 0x03	; 3
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	19 f0       	breq	.+6      	; 0x2522 <free+0xd4>
    251c:	fd 01       	movw	r30, r26
    251e:	dc 01       	movw	r26, r24
    2520:	f7 cf       	rjmp	.-18     	; 0x2510 <free+0xc2>
    2522:	8d 91       	ld	r24, X+
    2524:	9c 91       	ld	r25, X
    2526:	11 97       	sbiw	r26, 0x01	; 1
    2528:	9d 01       	movw	r18, r26
    252a:	2e 5f       	subi	r18, 0xFE	; 254
    252c:	3f 4f       	sbci	r19, 0xFF	; 255
    252e:	82 0f       	add	r24, r18
    2530:	93 1f       	adc	r25, r19
    2532:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <__brkval>
    2536:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <__brkval+0x1>
    253a:	28 17       	cp	r18, r24
    253c:	39 07       	cpc	r19, r25
    253e:	69 f4       	brne	.+26     	; 0x255a <free+0x10c>
    2540:	30 97       	sbiw	r30, 0x00	; 0
    2542:	29 f4       	brne	.+10     	; 0x254e <free+0x100>
    2544:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <__flp+0x1>
    2548:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <__flp>
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <free+0x104>
    254e:	13 82       	std	Z+3, r1	; 0x03
    2550:	12 82       	std	Z+2, r1	; 0x02
    2552:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <__brkval+0x1>
    2556:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <__brkval>
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	08 95       	ret

00002560 <realloc>:
    2560:	a0 e0       	ldi	r26, 0x00	; 0
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e6 eb       	ldi	r30, 0xB6	; 182
    2566:	f2 e1       	ldi	r31, 0x12	; 18
    2568:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__prologue_saves__+0x8>
    256c:	ec 01       	movw	r28, r24
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	21 f4       	brne	.+8      	; 0x257a <realloc+0x1a>
    2572:	cb 01       	movw	r24, r22
    2574:	0e 94 8f 11 	call	0x231e	; 0x231e <malloc>
    2578:	b4 c0       	rjmp	.+360    	; 0x26e2 <realloc+0x182>
    257a:	fc 01       	movw	r30, r24
    257c:	e6 0f       	add	r30, r22
    257e:	f7 1f       	adc	r31, r23
    2580:	9c 01       	movw	r18, r24
    2582:	22 50       	subi	r18, 0x02	; 2
    2584:	31 09       	sbc	r19, r1
    2586:	e2 17       	cp	r30, r18
    2588:	f3 07       	cpc	r31, r19
    258a:	08 f4       	brcc	.+2      	; 0x258e <realloc+0x2e>
    258c:	a8 c0       	rjmp	.+336    	; 0x26de <realloc+0x17e>
    258e:	d9 01       	movw	r26, r18
    2590:	0d 91       	ld	r16, X+
    2592:	1c 91       	ld	r17, X
    2594:	11 97       	sbiw	r26, 0x01	; 1
    2596:	06 17       	cp	r16, r22
    2598:	17 07       	cpc	r17, r23
    259a:	b0 f0       	brcs	.+44     	; 0x25c8 <realloc+0x68>
    259c:	05 30       	cpi	r16, 0x05	; 5
    259e:	11 05       	cpc	r17, r1
    25a0:	08 f4       	brcc	.+2      	; 0x25a4 <realloc+0x44>
    25a2:	9b c0       	rjmp	.+310    	; 0x26da <realloc+0x17a>
    25a4:	c8 01       	movw	r24, r16
    25a6:	04 97       	sbiw	r24, 0x04	; 4
    25a8:	86 17       	cp	r24, r22
    25aa:	97 07       	cpc	r25, r23
    25ac:	08 f4       	brcc	.+2      	; 0x25b0 <realloc+0x50>
    25ae:	95 c0       	rjmp	.+298    	; 0x26da <realloc+0x17a>
    25b0:	02 50       	subi	r16, 0x02	; 2
    25b2:	11 09       	sbc	r17, r1
    25b4:	06 1b       	sub	r16, r22
    25b6:	17 0b       	sbc	r17, r23
    25b8:	01 93       	st	Z+, r16
    25ba:	11 93       	st	Z+, r17
    25bc:	6d 93       	st	X+, r22
    25be:	7c 93       	st	X, r23
    25c0:	cf 01       	movw	r24, r30
    25c2:	0e 94 27 12 	call	0x244e	; 0x244e <free>
    25c6:	89 c0       	rjmp	.+274    	; 0x26da <realloc+0x17a>
    25c8:	5b 01       	movw	r10, r22
    25ca:	a0 1a       	sub	r10, r16
    25cc:	b1 0a       	sbc	r11, r17
    25ce:	4c 01       	movw	r8, r24
    25d0:	80 0e       	add	r8, r16
    25d2:	91 1e       	adc	r9, r17
    25d4:	a0 91 cc 01 	lds	r26, 0x01CC	; 0x8001cc <__flp>
    25d8:	b0 91 cd 01 	lds	r27, 0x01CD	; 0x8001cd <__flp+0x1>
    25dc:	61 2c       	mov	r6, r1
    25de:	71 2c       	mov	r7, r1
    25e0:	e1 2c       	mov	r14, r1
    25e2:	f1 2c       	mov	r15, r1
    25e4:	10 97       	sbiw	r26, 0x00	; 0
    25e6:	09 f4       	brne	.+2      	; 0x25ea <realloc+0x8a>
    25e8:	46 c0       	rjmp	.+140    	; 0x2676 <realloc+0x116>
    25ea:	8d 91       	ld	r24, X+
    25ec:	9c 91       	ld	r25, X
    25ee:	11 97       	sbiw	r26, 0x01	; 1
    25f0:	a8 15       	cp	r26, r8
    25f2:	b9 05       	cpc	r27, r9
    25f4:	b1 f5       	brne	.+108    	; 0x2662 <realloc+0x102>
    25f6:	6c 01       	movw	r12, r24
    25f8:	42 e0       	ldi	r20, 0x02	; 2
    25fa:	c4 0e       	add	r12, r20
    25fc:	d1 1c       	adc	r13, r1
    25fe:	ca 14       	cp	r12, r10
    2600:	db 04       	cpc	r13, r11
    2602:	78 f1       	brcs	.+94     	; 0x2662 <realloc+0x102>
    2604:	4c 01       	movw	r8, r24
    2606:	8a 18       	sub	r8, r10
    2608:	9b 08       	sbc	r9, r11
    260a:	64 01       	movw	r12, r8
    260c:	42 e0       	ldi	r20, 0x02	; 2
    260e:	c4 0e       	add	r12, r20
    2610:	d1 1c       	adc	r13, r1
    2612:	12 96       	adiw	r26, 0x02	; 2
    2614:	bc 90       	ld	r11, X
    2616:	12 97       	sbiw	r26, 0x02	; 2
    2618:	13 96       	adiw	r26, 0x03	; 3
    261a:	ac 91       	ld	r26, X
    261c:	b5 e0       	ldi	r27, 0x05	; 5
    261e:	cb 16       	cp	r12, r27
    2620:	d1 04       	cpc	r13, r1
    2622:	40 f0       	brcs	.+16     	; 0x2634 <realloc+0xd4>
    2624:	b2 82       	std	Z+2, r11	; 0x02
    2626:	a3 83       	std	Z+3, r26	; 0x03
    2628:	91 82       	std	Z+1, r9	; 0x01
    262a:	80 82       	st	Z, r8
    262c:	d9 01       	movw	r26, r18
    262e:	6d 93       	st	X+, r22
    2630:	7c 93       	st	X, r23
    2632:	09 c0       	rjmp	.+18     	; 0x2646 <realloc+0xe6>
    2634:	0e 5f       	subi	r16, 0xFE	; 254
    2636:	1f 4f       	sbci	r17, 0xFF	; 255
    2638:	80 0f       	add	r24, r16
    263a:	91 1f       	adc	r25, r17
    263c:	f9 01       	movw	r30, r18
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
    2642:	eb 2d       	mov	r30, r11
    2644:	fa 2f       	mov	r31, r26
    2646:	e1 14       	cp	r14, r1
    2648:	f1 04       	cpc	r15, r1
    264a:	31 f0       	breq	.+12     	; 0x2658 <realloc+0xf8>
    264c:	d7 01       	movw	r26, r14
    264e:	13 96       	adiw	r26, 0x03	; 3
    2650:	fc 93       	st	X, r31
    2652:	ee 93       	st	-X, r30
    2654:	12 97       	sbiw	r26, 0x02	; 2
    2656:	41 c0       	rjmp	.+130    	; 0x26da <realloc+0x17a>
    2658:	f0 93 cd 01 	sts	0x01CD, r31	; 0x8001cd <__flp+0x1>
    265c:	e0 93 cc 01 	sts	0x01CC, r30	; 0x8001cc <__flp>
    2660:	3c c0       	rjmp	.+120    	; 0x26da <realloc+0x17a>
    2662:	68 16       	cp	r6, r24
    2664:	79 06       	cpc	r7, r25
    2666:	08 f4       	brcc	.+2      	; 0x266a <realloc+0x10a>
    2668:	3c 01       	movw	r6, r24
    266a:	7d 01       	movw	r14, r26
    266c:	12 96       	adiw	r26, 0x02	; 2
    266e:	0d 90       	ld	r0, X+
    2670:	bc 91       	ld	r27, X
    2672:	a0 2d       	mov	r26, r0
    2674:	b7 cf       	rjmp	.-146    	; 0x25e4 <realloc+0x84>
    2676:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__brkval>
    267a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <__brkval+0x1>
    267e:	88 16       	cp	r8, r24
    2680:	99 06       	cpc	r9, r25
    2682:	e1 f4       	brne	.+56     	; 0x26bc <realloc+0x15c>
    2684:	66 16       	cp	r6, r22
    2686:	77 06       	cpc	r7, r23
    2688:	c8 f4       	brcc	.+50     	; 0x26bc <realloc+0x15c>
    268a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    268e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	41 f4       	brne	.+16     	; 0x26a6 <realloc+0x146>
    2696:	8d b7       	in	r24, 0x3d	; 61
    2698:	9e b7       	in	r25, 0x3e	; 62
    269a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    269e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    26a2:	84 1b       	sub	r24, r20
    26a4:	95 0b       	sbc	r25, r21
    26a6:	e8 17       	cp	r30, r24
    26a8:	f9 07       	cpc	r31, r25
    26aa:	c8 f4       	brcc	.+50     	; 0x26de <realloc+0x17e>
    26ac:	f0 93 cb 01 	sts	0x01CB, r31	; 0x8001cb <__brkval+0x1>
    26b0:	e0 93 ca 01 	sts	0x01CA, r30	; 0x8001ca <__brkval>
    26b4:	f9 01       	movw	r30, r18
    26b6:	71 83       	std	Z+1, r23	; 0x01
    26b8:	60 83       	st	Z, r22
    26ba:	0f c0       	rjmp	.+30     	; 0x26da <realloc+0x17a>
    26bc:	cb 01       	movw	r24, r22
    26be:	0e 94 8f 11 	call	0x231e	; 0x231e <malloc>
    26c2:	7c 01       	movw	r14, r24
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	59 f0       	breq	.+22     	; 0x26de <realloc+0x17e>
    26c8:	a8 01       	movw	r20, r16
    26ca:	be 01       	movw	r22, r28
    26cc:	0e 94 7d 13 	call	0x26fa	; 0x26fa <memcpy>
    26d0:	ce 01       	movw	r24, r28
    26d2:	0e 94 27 12 	call	0x244e	; 0x244e <free>
    26d6:	c7 01       	movw	r24, r14
    26d8:	04 c0       	rjmp	.+8      	; 0x26e2 <realloc+0x182>
    26da:	ce 01       	movw	r24, r28
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <realloc+0x182>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	ee e0       	ldi	r30, 0x0E	; 14
    26e8:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__epilogue_restores__+0x8>

000026ec <strcpy_P>:
    26ec:	fb 01       	movw	r30, r22
    26ee:	dc 01       	movw	r26, r24
    26f0:	05 90       	lpm	r0, Z+
    26f2:	0d 92       	st	X+, r0
    26f4:	00 20       	and	r0, r0
    26f6:	e1 f7       	brne	.-8      	; 0x26f0 <strcpy_P+0x4>
    26f8:	08 95       	ret

000026fa <memcpy>:
    26fa:	fb 01       	movw	r30, r22
    26fc:	dc 01       	movw	r26, r24
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <memcpy+0xa>
    2700:	01 90       	ld	r0, Z+
    2702:	0d 92       	st	X+, r0
    2704:	41 50       	subi	r20, 0x01	; 1
    2706:	50 40       	sbci	r21, 0x00	; 0
    2708:	d8 f7       	brcc	.-10     	; 0x2700 <memcpy+0x6>
    270a:	08 95       	ret

0000270c <strcat>:
    270c:	fb 01       	movw	r30, r22
    270e:	dc 01       	movw	r26, r24
    2710:	0d 90       	ld	r0, X+
    2712:	00 20       	and	r0, r0
    2714:	e9 f7       	brne	.-6      	; 0x2710 <strcat+0x4>
    2716:	11 97       	sbiw	r26, 0x01	; 1
    2718:	01 90       	ld	r0, Z+
    271a:	0d 92       	st	X+, r0
    271c:	00 20       	and	r0, r0
    271e:	e1 f7       	brne	.-8      	; 0x2718 <strcat+0xc>
    2720:	08 95       	ret

00002722 <fdevopen>:
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	31 f4       	brne	.+12     	; 0x273a <fdevopen+0x18>
    272e:	61 15       	cp	r22, r1
    2730:	71 05       	cpc	r23, r1
    2732:	19 f4       	brne	.+6      	; 0x273a <fdevopen+0x18>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	3a c0       	rjmp	.+116    	; 0x27ae <fdevopen+0x8c>
    273a:	8b 01       	movw	r16, r22
    273c:	ec 01       	movw	r28, r24
    273e:	6e e0       	ldi	r22, 0x0E	; 14
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <calloc>
    274a:	fc 01       	movw	r30, r24
    274c:	89 2b       	or	r24, r25
    274e:	91 f3       	breq	.-28     	; 0x2734 <fdevopen+0x12>
    2750:	80 e8       	ldi	r24, 0x80	; 128
    2752:	83 83       	std	Z+3, r24	; 0x03
    2754:	01 15       	cp	r16, r1
    2756:	11 05       	cpc	r17, r1
    2758:	71 f0       	breq	.+28     	; 0x2776 <fdevopen+0x54>
    275a:	13 87       	std	Z+11, r17	; 0x0b
    275c:	02 87       	std	Z+10, r16	; 0x0a
    275e:	81 e8       	ldi	r24, 0x81	; 129
    2760:	83 83       	std	Z+3, r24	; 0x03
    2762:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__iob>
    2766:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <__iob+0x1>
    276a:	89 2b       	or	r24, r25
    276c:	21 f4       	brne	.+8      	; 0x2776 <fdevopen+0x54>
    276e:	f0 93 cf 01 	sts	0x01CF, r31	; 0x8001cf <__iob+0x1>
    2772:	e0 93 ce 01 	sts	0x01CE, r30	; 0x8001ce <__iob>
    2776:	20 97       	sbiw	r28, 0x00	; 0
    2778:	c9 f0       	breq	.+50     	; 0x27ac <fdevopen+0x8a>
    277a:	d1 87       	std	Z+9, r29	; 0x09
    277c:	c0 87       	std	Z+8, r28	; 0x08
    277e:	83 81       	ldd	r24, Z+3	; 0x03
    2780:	82 60       	ori	r24, 0x02	; 2
    2782:	83 83       	std	Z+3, r24	; 0x03
    2784:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__iob+0x2>
    2788:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <__iob+0x3>
    278c:	89 2b       	or	r24, r25
    278e:	71 f4       	brne	.+28     	; 0x27ac <fdevopen+0x8a>
    2790:	f0 93 d1 01 	sts	0x01D1, r31	; 0x8001d1 <__iob+0x3>
    2794:	e0 93 d0 01 	sts	0x01D0, r30	; 0x8001d0 <__iob+0x2>
    2798:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__iob+0x4>
    279c:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <__iob+0x5>
    27a0:	89 2b       	or	r24, r25
    27a2:	21 f4       	brne	.+8      	; 0x27ac <fdevopen+0x8a>
    27a4:	f0 93 d3 01 	sts	0x01D3, r31	; 0x8001d3 <__iob+0x5>
    27a8:	e0 93 d2 01 	sts	0x01D2, r30	; 0x8001d2 <__iob+0x4>
    27ac:	cf 01       	movw	r24, r30
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	0f 91       	pop	r16
    27b6:	08 95       	ret

000027b8 <printf>:
    27b8:	a0 e0       	ldi	r26, 0x00	; 0
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e2 ee       	ldi	r30, 0xE2	; 226
    27be:	f3 e1       	ldi	r31, 0x13	; 19
    27c0:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__prologue_saves__+0x20>
    27c4:	ae 01       	movw	r20, r28
    27c6:	4b 5f       	subi	r20, 0xFB	; 251
    27c8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ca:	fa 01       	movw	r30, r20
    27cc:	61 91       	ld	r22, Z+
    27ce:	71 91       	ld	r23, Z+
    27d0:	af 01       	movw	r20, r30
    27d2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__iob+0x2>
    27d6:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <__iob+0x3>
    27da:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <vfprintf>
    27de:	e2 e0       	ldi	r30, 0x02	; 2
    27e0:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__epilogue_restores__+0x20>

000027e4 <vfprintf>:
    27e4:	ab e0       	ldi	r26, 0x0B	; 11
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e8 ef       	ldi	r30, 0xF8	; 248
    27ea:	f3 e1       	ldi	r31, 0x13	; 19
    27ec:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__prologue_saves__>
    27f0:	6c 01       	movw	r12, r24
    27f2:	7b 01       	movw	r14, r22
    27f4:	8a 01       	movw	r16, r20
    27f6:	fc 01       	movw	r30, r24
    27f8:	17 82       	std	Z+7, r1	; 0x07
    27fa:	16 82       	std	Z+6, r1	; 0x06
    27fc:	83 81       	ldd	r24, Z+3	; 0x03
    27fe:	81 ff       	sbrs	r24, 1
    2800:	cc c1       	rjmp	.+920    	; 0x2b9a <vfprintf+0x3b6>
    2802:	ce 01       	movw	r24, r28
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	3c 01       	movw	r6, r24
    2808:	f6 01       	movw	r30, r12
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	f7 01       	movw	r30, r14
    280e:	93 fd       	sbrc	r25, 3
    2810:	85 91       	lpm	r24, Z+
    2812:	93 ff       	sbrs	r25, 3
    2814:	81 91       	ld	r24, Z+
    2816:	7f 01       	movw	r14, r30
    2818:	88 23       	and	r24, r24
    281a:	09 f4       	brne	.+2      	; 0x281e <vfprintf+0x3a>
    281c:	ba c1       	rjmp	.+884    	; 0x2b92 <vfprintf+0x3ae>
    281e:	85 32       	cpi	r24, 0x25	; 37
    2820:	39 f4       	brne	.+14     	; 0x2830 <vfprintf+0x4c>
    2822:	93 fd       	sbrc	r25, 3
    2824:	85 91       	lpm	r24, Z+
    2826:	93 ff       	sbrs	r25, 3
    2828:	81 91       	ld	r24, Z+
    282a:	7f 01       	movw	r14, r30
    282c:	85 32       	cpi	r24, 0x25	; 37
    282e:	29 f4       	brne	.+10     	; 0x283a <vfprintf+0x56>
    2830:	b6 01       	movw	r22, r12
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    2838:	e7 cf       	rjmp	.-50     	; 0x2808 <vfprintf+0x24>
    283a:	91 2c       	mov	r9, r1
    283c:	21 2c       	mov	r2, r1
    283e:	31 2c       	mov	r3, r1
    2840:	ff e1       	ldi	r31, 0x1F	; 31
    2842:	f3 15       	cp	r31, r3
    2844:	d8 f0       	brcs	.+54     	; 0x287c <vfprintf+0x98>
    2846:	8b 32       	cpi	r24, 0x2B	; 43
    2848:	79 f0       	breq	.+30     	; 0x2868 <vfprintf+0x84>
    284a:	38 f4       	brcc	.+14     	; 0x285a <vfprintf+0x76>
    284c:	80 32       	cpi	r24, 0x20	; 32
    284e:	79 f0       	breq	.+30     	; 0x286e <vfprintf+0x8a>
    2850:	83 32       	cpi	r24, 0x23	; 35
    2852:	a1 f4       	brne	.+40     	; 0x287c <vfprintf+0x98>
    2854:	23 2d       	mov	r18, r3
    2856:	20 61       	ori	r18, 0x10	; 16
    2858:	1d c0       	rjmp	.+58     	; 0x2894 <vfprintf+0xb0>
    285a:	8d 32       	cpi	r24, 0x2D	; 45
    285c:	61 f0       	breq	.+24     	; 0x2876 <vfprintf+0x92>
    285e:	80 33       	cpi	r24, 0x30	; 48
    2860:	69 f4       	brne	.+26     	; 0x287c <vfprintf+0x98>
    2862:	23 2d       	mov	r18, r3
    2864:	21 60       	ori	r18, 0x01	; 1
    2866:	16 c0       	rjmp	.+44     	; 0x2894 <vfprintf+0xb0>
    2868:	83 2d       	mov	r24, r3
    286a:	82 60       	ori	r24, 0x02	; 2
    286c:	38 2e       	mov	r3, r24
    286e:	e3 2d       	mov	r30, r3
    2870:	e4 60       	ori	r30, 0x04	; 4
    2872:	3e 2e       	mov	r3, r30
    2874:	2a c0       	rjmp	.+84     	; 0x28ca <vfprintf+0xe6>
    2876:	f3 2d       	mov	r31, r3
    2878:	f8 60       	ori	r31, 0x08	; 8
    287a:	1d c0       	rjmp	.+58     	; 0x28b6 <vfprintf+0xd2>
    287c:	37 fc       	sbrc	r3, 7
    287e:	2d c0       	rjmp	.+90     	; 0x28da <vfprintf+0xf6>
    2880:	20 ed       	ldi	r18, 0xD0	; 208
    2882:	28 0f       	add	r18, r24
    2884:	2a 30       	cpi	r18, 0x0A	; 10
    2886:	40 f0       	brcs	.+16     	; 0x2898 <vfprintf+0xb4>
    2888:	8e 32       	cpi	r24, 0x2E	; 46
    288a:	b9 f4       	brne	.+46     	; 0x28ba <vfprintf+0xd6>
    288c:	36 fc       	sbrc	r3, 6
    288e:	81 c1       	rjmp	.+770    	; 0x2b92 <vfprintf+0x3ae>
    2890:	23 2d       	mov	r18, r3
    2892:	20 64       	ori	r18, 0x40	; 64
    2894:	32 2e       	mov	r3, r18
    2896:	19 c0       	rjmp	.+50     	; 0x28ca <vfprintf+0xe6>
    2898:	36 fe       	sbrs	r3, 6
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <vfprintf+0xc4>
    289c:	8a e0       	ldi	r24, 0x0A	; 10
    289e:	98 9e       	mul	r9, r24
    28a0:	20 0d       	add	r18, r0
    28a2:	11 24       	eor	r1, r1
    28a4:	92 2e       	mov	r9, r18
    28a6:	11 c0       	rjmp	.+34     	; 0x28ca <vfprintf+0xe6>
    28a8:	ea e0       	ldi	r30, 0x0A	; 10
    28aa:	2e 9e       	mul	r2, r30
    28ac:	20 0d       	add	r18, r0
    28ae:	11 24       	eor	r1, r1
    28b0:	22 2e       	mov	r2, r18
    28b2:	f3 2d       	mov	r31, r3
    28b4:	f0 62       	ori	r31, 0x20	; 32
    28b6:	3f 2e       	mov	r3, r31
    28b8:	08 c0       	rjmp	.+16     	; 0x28ca <vfprintf+0xe6>
    28ba:	8c 36       	cpi	r24, 0x6C	; 108
    28bc:	21 f4       	brne	.+8      	; 0x28c6 <vfprintf+0xe2>
    28be:	83 2d       	mov	r24, r3
    28c0:	80 68       	ori	r24, 0x80	; 128
    28c2:	38 2e       	mov	r3, r24
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <vfprintf+0xe6>
    28c6:	88 36       	cpi	r24, 0x68	; 104
    28c8:	41 f4       	brne	.+16     	; 0x28da <vfprintf+0xf6>
    28ca:	f7 01       	movw	r30, r14
    28cc:	93 fd       	sbrc	r25, 3
    28ce:	85 91       	lpm	r24, Z+
    28d0:	93 ff       	sbrs	r25, 3
    28d2:	81 91       	ld	r24, Z+
    28d4:	7f 01       	movw	r14, r30
    28d6:	81 11       	cpse	r24, r1
    28d8:	b3 cf       	rjmp	.-154    	; 0x2840 <vfprintf+0x5c>
    28da:	98 2f       	mov	r25, r24
    28dc:	9f 7d       	andi	r25, 0xDF	; 223
    28de:	95 54       	subi	r25, 0x45	; 69
    28e0:	93 30       	cpi	r25, 0x03	; 3
    28e2:	28 f4       	brcc	.+10     	; 0x28ee <vfprintf+0x10a>
    28e4:	0c 5f       	subi	r16, 0xFC	; 252
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	9f e3       	ldi	r25, 0x3F	; 63
    28ea:	99 83       	std	Y+1, r25	; 0x01
    28ec:	0d c0       	rjmp	.+26     	; 0x2908 <vfprintf+0x124>
    28ee:	83 36       	cpi	r24, 0x63	; 99
    28f0:	31 f0       	breq	.+12     	; 0x28fe <vfprintf+0x11a>
    28f2:	83 37       	cpi	r24, 0x73	; 115
    28f4:	71 f0       	breq	.+28     	; 0x2912 <vfprintf+0x12e>
    28f6:	83 35       	cpi	r24, 0x53	; 83
    28f8:	09 f0       	breq	.+2      	; 0x28fc <vfprintf+0x118>
    28fa:	59 c0       	rjmp	.+178    	; 0x29ae <vfprintf+0x1ca>
    28fc:	21 c0       	rjmp	.+66     	; 0x2940 <vfprintf+0x15c>
    28fe:	f8 01       	movw	r30, r16
    2900:	80 81       	ld	r24, Z
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	0e 5f       	subi	r16, 0xFE	; 254
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	88 24       	eor	r8, r8
    290a:	83 94       	inc	r8
    290c:	91 2c       	mov	r9, r1
    290e:	53 01       	movw	r10, r6
    2910:	13 c0       	rjmp	.+38     	; 0x2938 <vfprintf+0x154>
    2912:	28 01       	movw	r4, r16
    2914:	f2 e0       	ldi	r31, 0x02	; 2
    2916:	4f 0e       	add	r4, r31
    2918:	51 1c       	adc	r5, r1
    291a:	f8 01       	movw	r30, r16
    291c:	a0 80       	ld	r10, Z
    291e:	b1 80       	ldd	r11, Z+1	; 0x01
    2920:	36 fe       	sbrs	r3, 6
    2922:	03 c0       	rjmp	.+6      	; 0x292a <vfprintf+0x146>
    2924:	69 2d       	mov	r22, r9
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	02 c0       	rjmp	.+4      	; 0x292e <vfprintf+0x14a>
    292a:	6f ef       	ldi	r22, 0xFF	; 255
    292c:	7f ef       	ldi	r23, 0xFF	; 255
    292e:	c5 01       	movw	r24, r10
    2930:	0e 94 01 16 	call	0x2c02	; 0x2c02 <strnlen>
    2934:	4c 01       	movw	r8, r24
    2936:	82 01       	movw	r16, r4
    2938:	f3 2d       	mov	r31, r3
    293a:	ff 77       	andi	r31, 0x7F	; 127
    293c:	3f 2e       	mov	r3, r31
    293e:	16 c0       	rjmp	.+44     	; 0x296c <vfprintf+0x188>
    2940:	28 01       	movw	r4, r16
    2942:	22 e0       	ldi	r18, 0x02	; 2
    2944:	42 0e       	add	r4, r18
    2946:	51 1c       	adc	r5, r1
    2948:	f8 01       	movw	r30, r16
    294a:	a0 80       	ld	r10, Z
    294c:	b1 80       	ldd	r11, Z+1	; 0x01
    294e:	36 fe       	sbrs	r3, 6
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <vfprintf+0x174>
    2952:	69 2d       	mov	r22, r9
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	02 c0       	rjmp	.+4      	; 0x295c <vfprintf+0x178>
    2958:	6f ef       	ldi	r22, 0xFF	; 255
    295a:	7f ef       	ldi	r23, 0xFF	; 255
    295c:	c5 01       	movw	r24, r10
    295e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <strnlen_P>
    2962:	4c 01       	movw	r8, r24
    2964:	f3 2d       	mov	r31, r3
    2966:	f0 68       	ori	r31, 0x80	; 128
    2968:	3f 2e       	mov	r3, r31
    296a:	82 01       	movw	r16, r4
    296c:	33 fc       	sbrc	r3, 3
    296e:	1b c0       	rjmp	.+54     	; 0x29a6 <vfprintf+0x1c2>
    2970:	82 2d       	mov	r24, r2
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	88 16       	cp	r8, r24
    2976:	99 06       	cpc	r9, r25
    2978:	b0 f4       	brcc	.+44     	; 0x29a6 <vfprintf+0x1c2>
    297a:	b6 01       	movw	r22, r12
    297c:	80 e2       	ldi	r24, 0x20	; 32
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    2984:	2a 94       	dec	r2
    2986:	f4 cf       	rjmp	.-24     	; 0x2970 <vfprintf+0x18c>
    2988:	f5 01       	movw	r30, r10
    298a:	37 fc       	sbrc	r3, 7
    298c:	85 91       	lpm	r24, Z+
    298e:	37 fe       	sbrs	r3, 7
    2990:	81 91       	ld	r24, Z+
    2992:	5f 01       	movw	r10, r30
    2994:	b6 01       	movw	r22, r12
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    299c:	21 10       	cpse	r2, r1
    299e:	2a 94       	dec	r2
    29a0:	21 e0       	ldi	r18, 0x01	; 1
    29a2:	82 1a       	sub	r8, r18
    29a4:	91 08       	sbc	r9, r1
    29a6:	81 14       	cp	r8, r1
    29a8:	91 04       	cpc	r9, r1
    29aa:	71 f7       	brne	.-36     	; 0x2988 <vfprintf+0x1a4>
    29ac:	e8 c0       	rjmp	.+464    	; 0x2b7e <vfprintf+0x39a>
    29ae:	84 36       	cpi	r24, 0x64	; 100
    29b0:	11 f0       	breq	.+4      	; 0x29b6 <vfprintf+0x1d2>
    29b2:	89 36       	cpi	r24, 0x69	; 105
    29b4:	41 f5       	brne	.+80     	; 0x2a06 <vfprintf+0x222>
    29b6:	f8 01       	movw	r30, r16
    29b8:	37 fe       	sbrs	r3, 7
    29ba:	07 c0       	rjmp	.+14     	; 0x29ca <vfprintf+0x1e6>
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	0c 5f       	subi	r16, 0xFC	; 252
    29c6:	1f 4f       	sbci	r17, 0xFF	; 255
    29c8:	08 c0       	rjmp	.+16     	; 0x29da <vfprintf+0x1f6>
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	07 2e       	mov	r0, r23
    29d0:	00 0c       	add	r0, r0
    29d2:	88 0b       	sbc	r24, r24
    29d4:	99 0b       	sbc	r25, r25
    29d6:	0e 5f       	subi	r16, 0xFE	; 254
    29d8:	1f 4f       	sbci	r17, 0xFF	; 255
    29da:	f3 2d       	mov	r31, r3
    29dc:	ff 76       	andi	r31, 0x6F	; 111
    29de:	3f 2e       	mov	r3, r31
    29e0:	97 ff       	sbrs	r25, 7
    29e2:	09 c0       	rjmp	.+18     	; 0x29f6 <vfprintf+0x212>
    29e4:	90 95       	com	r25
    29e6:	80 95       	com	r24
    29e8:	70 95       	com	r23
    29ea:	61 95       	neg	r22
    29ec:	7f 4f       	sbci	r23, 0xFF	; 255
    29ee:	8f 4f       	sbci	r24, 0xFF	; 255
    29f0:	9f 4f       	sbci	r25, 0xFF	; 255
    29f2:	f0 68       	ori	r31, 0x80	; 128
    29f4:	3f 2e       	mov	r3, r31
    29f6:	2a e0       	ldi	r18, 0x0A	; 10
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	a3 01       	movw	r20, r6
    29fc:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ultoa_invert>
    2a00:	88 2e       	mov	r8, r24
    2a02:	86 18       	sub	r8, r6
    2a04:	45 c0       	rjmp	.+138    	; 0x2a90 <vfprintf+0x2ac>
    2a06:	85 37       	cpi	r24, 0x75	; 117
    2a08:	31 f4       	brne	.+12     	; 0x2a16 <vfprintf+0x232>
    2a0a:	23 2d       	mov	r18, r3
    2a0c:	2f 7e       	andi	r18, 0xEF	; 239
    2a0e:	b2 2e       	mov	r11, r18
    2a10:	2a e0       	ldi	r18, 0x0A	; 10
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	25 c0       	rjmp	.+74     	; 0x2a60 <vfprintf+0x27c>
    2a16:	93 2d       	mov	r25, r3
    2a18:	99 7f       	andi	r25, 0xF9	; 249
    2a1a:	b9 2e       	mov	r11, r25
    2a1c:	8f 36       	cpi	r24, 0x6F	; 111
    2a1e:	c1 f0       	breq	.+48     	; 0x2a50 <vfprintf+0x26c>
    2a20:	18 f4       	brcc	.+6      	; 0x2a28 <vfprintf+0x244>
    2a22:	88 35       	cpi	r24, 0x58	; 88
    2a24:	79 f0       	breq	.+30     	; 0x2a44 <vfprintf+0x260>
    2a26:	b5 c0       	rjmp	.+362    	; 0x2b92 <vfprintf+0x3ae>
    2a28:	80 37       	cpi	r24, 0x70	; 112
    2a2a:	19 f0       	breq	.+6      	; 0x2a32 <vfprintf+0x24e>
    2a2c:	88 37       	cpi	r24, 0x78	; 120
    2a2e:	21 f0       	breq	.+8      	; 0x2a38 <vfprintf+0x254>
    2a30:	b0 c0       	rjmp	.+352    	; 0x2b92 <vfprintf+0x3ae>
    2a32:	e9 2f       	mov	r30, r25
    2a34:	e0 61       	ori	r30, 0x10	; 16
    2a36:	be 2e       	mov	r11, r30
    2a38:	b4 fe       	sbrs	r11, 4
    2a3a:	0d c0       	rjmp	.+26     	; 0x2a56 <vfprintf+0x272>
    2a3c:	fb 2d       	mov	r31, r11
    2a3e:	f4 60       	ori	r31, 0x04	; 4
    2a40:	bf 2e       	mov	r11, r31
    2a42:	09 c0       	rjmp	.+18     	; 0x2a56 <vfprintf+0x272>
    2a44:	34 fe       	sbrs	r3, 4
    2a46:	0a c0       	rjmp	.+20     	; 0x2a5c <vfprintf+0x278>
    2a48:	29 2f       	mov	r18, r25
    2a4a:	26 60       	ori	r18, 0x06	; 6
    2a4c:	b2 2e       	mov	r11, r18
    2a4e:	06 c0       	rjmp	.+12     	; 0x2a5c <vfprintf+0x278>
    2a50:	28 e0       	ldi	r18, 0x08	; 8
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	05 c0       	rjmp	.+10     	; 0x2a60 <vfprintf+0x27c>
    2a56:	20 e1       	ldi	r18, 0x10	; 16
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <vfprintf+0x27c>
    2a5c:	20 e1       	ldi	r18, 0x10	; 16
    2a5e:	32 e0       	ldi	r19, 0x02	; 2
    2a60:	f8 01       	movw	r30, r16
    2a62:	b7 fe       	sbrs	r11, 7
    2a64:	07 c0       	rjmp	.+14     	; 0x2a74 <vfprintf+0x290>
    2a66:	60 81       	ld	r22, Z
    2a68:	71 81       	ldd	r23, Z+1	; 0x01
    2a6a:	82 81       	ldd	r24, Z+2	; 0x02
    2a6c:	93 81       	ldd	r25, Z+3	; 0x03
    2a6e:	0c 5f       	subi	r16, 0xFC	; 252
    2a70:	1f 4f       	sbci	r17, 0xFF	; 255
    2a72:	06 c0       	rjmp	.+12     	; 0x2a80 <vfprintf+0x29c>
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	0e 5f       	subi	r16, 0xFE	; 254
    2a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a80:	a3 01       	movw	r20, r6
    2a82:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__ultoa_invert>
    2a86:	88 2e       	mov	r8, r24
    2a88:	86 18       	sub	r8, r6
    2a8a:	fb 2d       	mov	r31, r11
    2a8c:	ff 77       	andi	r31, 0x7F	; 127
    2a8e:	3f 2e       	mov	r3, r31
    2a90:	36 fe       	sbrs	r3, 6
    2a92:	0d c0       	rjmp	.+26     	; 0x2aae <vfprintf+0x2ca>
    2a94:	23 2d       	mov	r18, r3
    2a96:	2e 7f       	andi	r18, 0xFE	; 254
    2a98:	a2 2e       	mov	r10, r18
    2a9a:	89 14       	cp	r8, r9
    2a9c:	58 f4       	brcc	.+22     	; 0x2ab4 <vfprintf+0x2d0>
    2a9e:	34 fe       	sbrs	r3, 4
    2aa0:	0b c0       	rjmp	.+22     	; 0x2ab8 <vfprintf+0x2d4>
    2aa2:	32 fc       	sbrc	r3, 2
    2aa4:	09 c0       	rjmp	.+18     	; 0x2ab8 <vfprintf+0x2d4>
    2aa6:	83 2d       	mov	r24, r3
    2aa8:	8e 7e       	andi	r24, 0xEE	; 238
    2aaa:	a8 2e       	mov	r10, r24
    2aac:	05 c0       	rjmp	.+10     	; 0x2ab8 <vfprintf+0x2d4>
    2aae:	b8 2c       	mov	r11, r8
    2ab0:	a3 2c       	mov	r10, r3
    2ab2:	03 c0       	rjmp	.+6      	; 0x2aba <vfprintf+0x2d6>
    2ab4:	b8 2c       	mov	r11, r8
    2ab6:	01 c0       	rjmp	.+2      	; 0x2aba <vfprintf+0x2d6>
    2ab8:	b9 2c       	mov	r11, r9
    2aba:	a4 fe       	sbrs	r10, 4
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <vfprintf+0x2f8>
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e8 0d       	add	r30, r8
    2ac2:	f1 1d       	adc	r31, r1
    2ac4:	80 81       	ld	r24, Z
    2ac6:	80 33       	cpi	r24, 0x30	; 48
    2ac8:	21 f4       	brne	.+8      	; 0x2ad2 <vfprintf+0x2ee>
    2aca:	9a 2d       	mov	r25, r10
    2acc:	99 7e       	andi	r25, 0xE9	; 233
    2ace:	a9 2e       	mov	r10, r25
    2ad0:	09 c0       	rjmp	.+18     	; 0x2ae4 <vfprintf+0x300>
    2ad2:	a2 fe       	sbrs	r10, 2
    2ad4:	06 c0       	rjmp	.+12     	; 0x2ae2 <vfprintf+0x2fe>
    2ad6:	b3 94       	inc	r11
    2ad8:	b3 94       	inc	r11
    2ada:	04 c0       	rjmp	.+8      	; 0x2ae4 <vfprintf+0x300>
    2adc:	8a 2d       	mov	r24, r10
    2ade:	86 78       	andi	r24, 0x86	; 134
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <vfprintf+0x300>
    2ae2:	b3 94       	inc	r11
    2ae4:	a3 fc       	sbrc	r10, 3
    2ae6:	11 c0       	rjmp	.+34     	; 0x2b0a <vfprintf+0x326>
    2ae8:	a0 fe       	sbrs	r10, 0
    2aea:	06 c0       	rjmp	.+12     	; 0x2af8 <vfprintf+0x314>
    2aec:	b2 14       	cp	r11, r2
    2aee:	88 f4       	brcc	.+34     	; 0x2b12 <vfprintf+0x32e>
    2af0:	28 0c       	add	r2, r8
    2af2:	92 2c       	mov	r9, r2
    2af4:	9b 18       	sub	r9, r11
    2af6:	0e c0       	rjmp	.+28     	; 0x2b14 <vfprintf+0x330>
    2af8:	b2 14       	cp	r11, r2
    2afa:	60 f4       	brcc	.+24     	; 0x2b14 <vfprintf+0x330>
    2afc:	b6 01       	movw	r22, r12
    2afe:	80 e2       	ldi	r24, 0x20	; 32
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    2b06:	b3 94       	inc	r11
    2b08:	f7 cf       	rjmp	.-18     	; 0x2af8 <vfprintf+0x314>
    2b0a:	b2 14       	cp	r11, r2
    2b0c:	18 f4       	brcc	.+6      	; 0x2b14 <vfprintf+0x330>
    2b0e:	2b 18       	sub	r2, r11
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <vfprintf+0x332>
    2b12:	98 2c       	mov	r9, r8
    2b14:	21 2c       	mov	r2, r1
    2b16:	a4 fe       	sbrs	r10, 4
    2b18:	10 c0       	rjmp	.+32     	; 0x2b3a <vfprintf+0x356>
    2b1a:	b6 01       	movw	r22, r12
    2b1c:	80 e3       	ldi	r24, 0x30	; 48
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    2b24:	a2 fe       	sbrs	r10, 2
    2b26:	17 c0       	rjmp	.+46     	; 0x2b56 <vfprintf+0x372>
    2b28:	a1 fc       	sbrc	r10, 1
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <vfprintf+0x34e>
    2b2c:	88 e7       	ldi	r24, 0x78	; 120
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <vfprintf+0x352>
    2b32:	88 e5       	ldi	r24, 0x58	; 88
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	b6 01       	movw	r22, r12
    2b38:	0c c0       	rjmp	.+24     	; 0x2b52 <vfprintf+0x36e>
    2b3a:	8a 2d       	mov	r24, r10
    2b3c:	86 78       	andi	r24, 0x86	; 134
    2b3e:	59 f0       	breq	.+22     	; 0x2b56 <vfprintf+0x372>
    2b40:	a1 fe       	sbrs	r10, 1
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <vfprintf+0x364>
    2b44:	8b e2       	ldi	r24, 0x2B	; 43
    2b46:	01 c0       	rjmp	.+2      	; 0x2b4a <vfprintf+0x366>
    2b48:	80 e2       	ldi	r24, 0x20	; 32
    2b4a:	a7 fc       	sbrc	r10, 7
    2b4c:	8d e2       	ldi	r24, 0x2D	; 45
    2b4e:	b6 01       	movw	r22, r12
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    2b56:	89 14       	cp	r8, r9
    2b58:	38 f4       	brcc	.+14     	; 0x2b68 <vfprintf+0x384>
    2b5a:	b6 01       	movw	r22, r12
    2b5c:	80 e3       	ldi	r24, 0x30	; 48
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    2b64:	9a 94       	dec	r9
    2b66:	f7 cf       	rjmp	.-18     	; 0x2b56 <vfprintf+0x372>
    2b68:	8a 94       	dec	r8
    2b6a:	f3 01       	movw	r30, r6
    2b6c:	e8 0d       	add	r30, r8
    2b6e:	f1 1d       	adc	r31, r1
    2b70:	80 81       	ld	r24, Z
    2b72:	b6 01       	movw	r22, r12
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    2b7a:	81 10       	cpse	r8, r1
    2b7c:	f5 cf       	rjmp	.-22     	; 0x2b68 <vfprintf+0x384>
    2b7e:	22 20       	and	r2, r2
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <vfprintf+0x3a0>
    2b82:	42 ce       	rjmp	.-892    	; 0x2808 <vfprintf+0x24>
    2b84:	b6 01       	movw	r22, r12
    2b86:	80 e2       	ldi	r24, 0x20	; 32
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <fputc>
    2b8e:	2a 94       	dec	r2
    2b90:	f6 cf       	rjmp	.-20     	; 0x2b7e <vfprintf+0x39a>
    2b92:	f6 01       	movw	r30, r12
    2b94:	86 81       	ldd	r24, Z+6	; 0x06
    2b96:	97 81       	ldd	r25, Z+7	; 0x07
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <vfprintf+0x3ba>
    2b9a:	8f ef       	ldi	r24, 0xFF	; 255
    2b9c:	9f ef       	ldi	r25, 0xFF	; 255
    2b9e:	2b 96       	adiw	r28, 0x0b	; 11
    2ba0:	e2 e1       	ldi	r30, 0x12	; 18
    2ba2:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__epilogue_restores__>

00002ba6 <calloc>:
    2ba6:	0f 93       	push	r16
    2ba8:	1f 93       	push	r17
    2baa:	cf 93       	push	r28
    2bac:	df 93       	push	r29
    2bae:	86 9f       	mul	r24, r22
    2bb0:	80 01       	movw	r16, r0
    2bb2:	87 9f       	mul	r24, r23
    2bb4:	10 0d       	add	r17, r0
    2bb6:	96 9f       	mul	r25, r22
    2bb8:	10 0d       	add	r17, r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	c8 01       	movw	r24, r16
    2bbe:	0e 94 8f 11 	call	0x231e	; 0x231e <malloc>
    2bc2:	ec 01       	movw	r28, r24
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	29 f0       	breq	.+10     	; 0x2bd2 <calloc+0x2c>
    2bc8:	a8 01       	movw	r20, r16
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <memset>
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	08 95       	ret

00002bde <strnlen_P>:
    2bde:	fc 01       	movw	r30, r24
    2be0:	05 90       	lpm	r0, Z+
    2be2:	61 50       	subi	r22, 0x01	; 1
    2be4:	70 40       	sbci	r23, 0x00	; 0
    2be6:	01 10       	cpse	r0, r1
    2be8:	d8 f7       	brcc	.-10     	; 0x2be0 <strnlen_P+0x2>
    2bea:	80 95       	com	r24
    2bec:	90 95       	com	r25
    2bee:	8e 0f       	add	r24, r30
    2bf0:	9f 1f       	adc	r25, r31
    2bf2:	08 95       	ret

00002bf4 <memset>:
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <memset+0x6>
    2bf8:	6d 93       	st	X+, r22
    2bfa:	41 50       	subi	r20, 0x01	; 1
    2bfc:	50 40       	sbci	r21, 0x00	; 0
    2bfe:	e0 f7       	brcc	.-8      	; 0x2bf8 <memset+0x4>
    2c00:	08 95       	ret

00002c02 <strnlen>:
    2c02:	fc 01       	movw	r30, r24
    2c04:	61 50       	subi	r22, 0x01	; 1
    2c06:	70 40       	sbci	r23, 0x00	; 0
    2c08:	01 90       	ld	r0, Z+
    2c0a:	01 10       	cpse	r0, r1
    2c0c:	d8 f7       	brcc	.-10     	; 0x2c04 <strnlen+0x2>
    2c0e:	80 95       	com	r24
    2c10:	90 95       	com	r25
    2c12:	8e 0f       	add	r24, r30
    2c14:	9f 1f       	adc	r25, r31
    2c16:	08 95       	ret

00002c18 <fputc>:
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	fb 01       	movw	r30, r22
    2c22:	23 81       	ldd	r18, Z+3	; 0x03
    2c24:	21 fd       	sbrc	r18, 1
    2c26:	03 c0       	rjmp	.+6      	; 0x2c2e <fputc+0x16>
    2c28:	8f ef       	ldi	r24, 0xFF	; 255
    2c2a:	9f ef       	ldi	r25, 0xFF	; 255
    2c2c:	2c c0       	rjmp	.+88     	; 0x2c86 <fputc+0x6e>
    2c2e:	22 ff       	sbrs	r18, 2
    2c30:	16 c0       	rjmp	.+44     	; 0x2c5e <fputc+0x46>
    2c32:	46 81       	ldd	r20, Z+6	; 0x06
    2c34:	57 81       	ldd	r21, Z+7	; 0x07
    2c36:	24 81       	ldd	r18, Z+4	; 0x04
    2c38:	35 81       	ldd	r19, Z+5	; 0x05
    2c3a:	42 17       	cp	r20, r18
    2c3c:	53 07       	cpc	r21, r19
    2c3e:	44 f4       	brge	.+16     	; 0x2c50 <fputc+0x38>
    2c40:	a0 81       	ld	r26, Z
    2c42:	b1 81       	ldd	r27, Z+1	; 0x01
    2c44:	9d 01       	movw	r18, r26
    2c46:	2f 5f       	subi	r18, 0xFF	; 255
    2c48:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4a:	31 83       	std	Z+1, r19	; 0x01
    2c4c:	20 83       	st	Z, r18
    2c4e:	8c 93       	st	X, r24
    2c50:	26 81       	ldd	r18, Z+6	; 0x06
    2c52:	37 81       	ldd	r19, Z+7	; 0x07
    2c54:	2f 5f       	subi	r18, 0xFF	; 255
    2c56:	3f 4f       	sbci	r19, 0xFF	; 255
    2c58:	37 83       	std	Z+7, r19	; 0x07
    2c5a:	26 83       	std	Z+6, r18	; 0x06
    2c5c:	14 c0       	rjmp	.+40     	; 0x2c86 <fputc+0x6e>
    2c5e:	8b 01       	movw	r16, r22
    2c60:	ec 01       	movw	r28, r24
    2c62:	fb 01       	movw	r30, r22
    2c64:	00 84       	ldd	r0, Z+8	; 0x08
    2c66:	f1 85       	ldd	r31, Z+9	; 0x09
    2c68:	e0 2d       	mov	r30, r0
    2c6a:	09 95       	icall
    2c6c:	89 2b       	or	r24, r25
    2c6e:	e1 f6       	brne	.-72     	; 0x2c28 <fputc+0x10>
    2c70:	d8 01       	movw	r26, r16
    2c72:	16 96       	adiw	r26, 0x06	; 6
    2c74:	8d 91       	ld	r24, X+
    2c76:	9c 91       	ld	r25, X
    2c78:	17 97       	sbiw	r26, 0x07	; 7
    2c7a:	01 96       	adiw	r24, 0x01	; 1
    2c7c:	17 96       	adiw	r26, 0x07	; 7
    2c7e:	9c 93       	st	X, r25
    2c80:	8e 93       	st	-X, r24
    2c82:	16 97       	sbiw	r26, 0x06	; 6
    2c84:	ce 01       	movw	r24, r28
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	08 95       	ret

00002c90 <__ultoa_invert>:
    2c90:	fa 01       	movw	r30, r20
    2c92:	aa 27       	eor	r26, r26
    2c94:	28 30       	cpi	r18, 0x08	; 8
    2c96:	51 f1       	breq	.+84     	; 0x2cec <__ultoa_invert+0x5c>
    2c98:	20 31       	cpi	r18, 0x10	; 16
    2c9a:	81 f1       	breq	.+96     	; 0x2cfc <__ultoa_invert+0x6c>
    2c9c:	e8 94       	clt
    2c9e:	6f 93       	push	r22
    2ca0:	6e 7f       	andi	r22, 0xFE	; 254
    2ca2:	6e 5f       	subi	r22, 0xFE	; 254
    2ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    2caa:	af 4f       	sbci	r26, 0xFF	; 255
    2cac:	b1 e0       	ldi	r27, 0x01	; 1
    2cae:	3e d0       	rcall	.+124    	; 0x2d2c <__ultoa_invert+0x9c>
    2cb0:	b4 e0       	ldi	r27, 0x04	; 4
    2cb2:	3c d0       	rcall	.+120    	; 0x2d2c <__ultoa_invert+0x9c>
    2cb4:	67 0f       	add	r22, r23
    2cb6:	78 1f       	adc	r23, r24
    2cb8:	89 1f       	adc	r24, r25
    2cba:	9a 1f       	adc	r25, r26
    2cbc:	a1 1d       	adc	r26, r1
    2cbe:	68 0f       	add	r22, r24
    2cc0:	79 1f       	adc	r23, r25
    2cc2:	8a 1f       	adc	r24, r26
    2cc4:	91 1d       	adc	r25, r1
    2cc6:	a1 1d       	adc	r26, r1
    2cc8:	6a 0f       	add	r22, r26
    2cca:	71 1d       	adc	r23, r1
    2ccc:	81 1d       	adc	r24, r1
    2cce:	91 1d       	adc	r25, r1
    2cd0:	a1 1d       	adc	r26, r1
    2cd2:	20 d0       	rcall	.+64     	; 0x2d14 <__ultoa_invert+0x84>
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <__ultoa_invert+0x48>
    2cd6:	68 94       	set
    2cd8:	3f 91       	pop	r19
    2cda:	2a e0       	ldi	r18, 0x0A	; 10
    2cdc:	26 9f       	mul	r18, r22
    2cde:	11 24       	eor	r1, r1
    2ce0:	30 19       	sub	r19, r0
    2ce2:	30 5d       	subi	r19, 0xD0	; 208
    2ce4:	31 93       	st	Z+, r19
    2ce6:	de f6       	brtc	.-74     	; 0x2c9e <__ultoa_invert+0xe>
    2ce8:	cf 01       	movw	r24, r30
    2cea:	08 95       	ret
    2cec:	46 2f       	mov	r20, r22
    2cee:	47 70       	andi	r20, 0x07	; 7
    2cf0:	40 5d       	subi	r20, 0xD0	; 208
    2cf2:	41 93       	st	Z+, r20
    2cf4:	b3 e0       	ldi	r27, 0x03	; 3
    2cf6:	0f d0       	rcall	.+30     	; 0x2d16 <__ultoa_invert+0x86>
    2cf8:	c9 f7       	brne	.-14     	; 0x2cec <__ultoa_invert+0x5c>
    2cfa:	f6 cf       	rjmp	.-20     	; 0x2ce8 <__ultoa_invert+0x58>
    2cfc:	46 2f       	mov	r20, r22
    2cfe:	4f 70       	andi	r20, 0x0F	; 15
    2d00:	40 5d       	subi	r20, 0xD0	; 208
    2d02:	4a 33       	cpi	r20, 0x3A	; 58
    2d04:	18 f0       	brcs	.+6      	; 0x2d0c <__ultoa_invert+0x7c>
    2d06:	49 5d       	subi	r20, 0xD9	; 217
    2d08:	31 fd       	sbrc	r19, 1
    2d0a:	40 52       	subi	r20, 0x20	; 32
    2d0c:	41 93       	st	Z+, r20
    2d0e:	02 d0       	rcall	.+4      	; 0x2d14 <__ultoa_invert+0x84>
    2d10:	a9 f7       	brne	.-22     	; 0x2cfc <__ultoa_invert+0x6c>
    2d12:	ea cf       	rjmp	.-44     	; 0x2ce8 <__ultoa_invert+0x58>
    2d14:	b4 e0       	ldi	r27, 0x04	; 4
    2d16:	a6 95       	lsr	r26
    2d18:	97 95       	ror	r25
    2d1a:	87 95       	ror	r24
    2d1c:	77 95       	ror	r23
    2d1e:	67 95       	ror	r22
    2d20:	ba 95       	dec	r27
    2d22:	c9 f7       	brne	.-14     	; 0x2d16 <__ultoa_invert+0x86>
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	61 05       	cpc	r22, r1
    2d28:	71 05       	cpc	r23, r1
    2d2a:	08 95       	ret
    2d2c:	9b 01       	movw	r18, r22
    2d2e:	ac 01       	movw	r20, r24
    2d30:	0a 2e       	mov	r0, r26
    2d32:	06 94       	lsr	r0
    2d34:	57 95       	ror	r21
    2d36:	47 95       	ror	r20
    2d38:	37 95       	ror	r19
    2d3a:	27 95       	ror	r18
    2d3c:	ba 95       	dec	r27
    2d3e:	c9 f7       	brne	.-14     	; 0x2d32 <__ultoa_invert+0xa2>
    2d40:	62 0f       	add	r22, r18
    2d42:	73 1f       	adc	r23, r19
    2d44:	84 1f       	adc	r24, r20
    2d46:	95 1f       	adc	r25, r21
    2d48:	a0 1d       	adc	r26, r0
    2d4a:	08 95       	ret

00002d4c <__prologue_saves__>:
    2d4c:	2f 92       	push	r2
    2d4e:	3f 92       	push	r3
    2d50:	4f 92       	push	r4
    2d52:	5f 92       	push	r5
    2d54:	6f 92       	push	r6
    2d56:	7f 92       	push	r7
    2d58:	8f 92       	push	r8
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	ca 1b       	sub	r28, r26
    2d76:	db 0b       	sbc	r29, r27
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	09 94       	ijmp

00002d84 <__epilogue_restores__>:
    2d84:	2a 88       	ldd	r2, Y+18	; 0x12
    2d86:	39 88       	ldd	r3, Y+17	; 0x11
    2d88:	48 88       	ldd	r4, Y+16	; 0x10
    2d8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d90:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d92:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d94:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d96:	b9 84       	ldd	r11, Y+9	; 0x09
    2d98:	c8 84       	ldd	r12, Y+8	; 0x08
    2d9a:	df 80       	ldd	r13, Y+7	; 0x07
    2d9c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d9e:	fd 80       	ldd	r15, Y+5	; 0x05
    2da0:	0c 81       	ldd	r16, Y+4	; 0x04
    2da2:	1b 81       	ldd	r17, Y+3	; 0x03
    2da4:	aa 81       	ldd	r26, Y+2	; 0x02
    2da6:	b9 81       	ldd	r27, Y+1	; 0x01
    2da8:	ce 0f       	add	r28, r30
    2daa:	d1 1d       	adc	r29, r1
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	ed 01       	movw	r28, r26
    2db8:	08 95       	ret

00002dba <_exit>:
    2dba:	f8 94       	cli

00002dbc <__stop_program>:
    2dbc:	ff cf       	rjmp	.-2      	; 0x2dbc <__stop_program>
